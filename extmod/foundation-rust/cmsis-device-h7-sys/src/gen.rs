/* automatically generated by rust-bindgen 0.69.5 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_TypeDef {
    pub ISR: u32,
    pub IER: u32,
    pub CR: u32,
    pub CFGR: u32,
    pub CFGR2: u32,
    pub SMPR1: u32,
    pub SMPR2: u32,
    pub PCSEL: u32,
    pub LTR1: u32,
    pub HTR1: u32,
    pub RESERVED1: u32,
    pub RESERVED2: u32,
    pub SQR1: u32,
    pub SQR2: u32,
    pub SQR3: u32,
    pub SQR4: u32,
    pub DR: u32,
    pub RESERVED3: u32,
    pub RESERVED4: u32,
    pub JSQR: u32,
    pub RESERVED5: [u32; 4usize],
    pub OFR1: u32,
    pub OFR2: u32,
    pub OFR3: u32,
    pub OFR4: u32,
    pub RESERVED6: [u32; 4usize],
    pub JDR1: u32,
    pub JDR2: u32,
    pub JDR3: u32,
    pub JDR4: u32,
    pub RESERVED7: [u32; 4usize],
    pub AWD2CR: u32,
    pub AWD3CR: u32,
    pub RESERVED8: u32,
    pub RESERVED9: u32,
    pub LTR2: u32,
    pub HTR2: u32,
    pub LTR3: u32,
    pub HTR3: u32,
    pub DIFSEL: u32,
    pub CALFACT: u32,
    pub CALFACT2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_Common_TypeDef {
    pub CSR: u32,
    pub RESERVED: u32,
    pub CCR: u32,
    pub CDR: u32,
    pub CDR2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREFBUF_TypeDef {
    pub CSR: u32,
    pub CCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TTCAN_TypeDef {
    pub TTTMC: u32,
    pub TTRMC: u32,
    pub TTOCF: u32,
    pub TTMLM: u32,
    pub TURCF: u32,
    pub TTOCN: u32,
    pub TTGTP: u32,
    pub TTTMK: u32,
    pub TTIR: u32,
    pub TTIE: u32,
    pub TTILS: u32,
    pub TTOST: u32,
    pub TURNA: u32,
    pub TTLGT: u32,
    pub TTCTC: u32,
    pub TTCPT: u32,
    pub TTCSM: u32,
    pub RESERVED1: [u32; 111usize],
    pub TTTS: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_ClockCalibrationUnit_TypeDef {
    pub CREL: u32,
    pub CCFG: u32,
    pub CSTAT: u32,
    pub CWD: u32,
    pub IR: u32,
    pub IE: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CEC_TypeDef {
    pub CR: u32,
    pub CFGR: u32,
    pub TXDR: u32,
    pub RXDR: u32,
    pub ISR: u32,
    pub IER: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_TypeDef {
    pub DR: u32,
    pub IDR: u32,
    pub CR: u32,
    pub RESERVED2: u32,
    pub INIT: u32,
    pub POL: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRS_TypeDef {
    pub CR: u32,
    pub CFGR: u32,
    pub ISR: u32,
    pub ICR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_TypeDef {
    pub CR: u32,
    pub SWTRIGR: u32,
    pub DHR12R1: u32,
    pub DHR12L1: u32,
    pub DHR8R1: u32,
    pub DHR12R2: u32,
    pub DHR12L2: u32,
    pub DHR8R2: u32,
    pub DHR12RD: u32,
    pub DHR12LD: u32,
    pub DHR8RD: u32,
    pub DOR1: u32,
    pub DOR2: u32,
    pub SR: u32,
    pub CCR: u32,
    pub MCR: u32,
    pub SHSR1: u32,
    pub SHSR2: u32,
    pub SHHR: u32,
    pub SHRR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFSDM_Filter_TypeDef {
    pub FLTCR1: u32,
    pub FLTCR2: u32,
    pub FLTISR: u32,
    pub FLTICR: u32,
    pub FLTJCHGR: u32,
    pub FLTFCR: u32,
    pub FLTJDATAR: u32,
    pub FLTRDATAR: u32,
    pub FLTAWHTR: u32,
    pub FLTAWLTR: u32,
    pub FLTAWSR: u32,
    pub FLTAWCFR: u32,
    pub FLTEXMAX: u32,
    pub FLTEXMIN: u32,
    pub FLTCNVTIMR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFSDM_Channel_TypeDef {
    pub CHCFGR1: u32,
    pub CHCFGR2: u32,
    pub CHAWSCDR: u32,
    pub CHWDATAR: u32,
    pub CHDATINR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DBGMCU_TypeDef {
    pub IDCODE: u32,
    pub CR: u32,
    pub RESERVED4: [u32; 11usize],
    pub APB3FZ1: u32,
    pub RESERVED5: u32,
    pub APB1LFZ1: u32,
    pub RESERVED6: u32,
    pub APB1HFZ1: u32,
    pub RESERVED7: u32,
    pub APB2FZ1: u32,
    pub RESERVED8: u32,
    pub APB4FZ1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCMI_TypeDef {
    pub CR: u32,
    pub SR: u32,
    pub RISR: u32,
    pub IER: u32,
    pub MISR: u32,
    pub ICR: u32,
    pub ESCR: u32,
    pub ESUR: u32,
    pub CWSTRTR: u32,
    pub CWSIZER: u32,
    pub DR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_Stream_TypeDef {
    pub CR: u32,
    pub NDTR: u32,
    pub PAR: u32,
    pub M0AR: u32,
    pub M1AR: u32,
    pub FCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_TypeDef {
    pub LISR: u32,
    pub HISR: u32,
    pub LIFCR: u32,
    pub HIFCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BDMA_Channel_TypeDef {
    pub CCR: u32,
    pub CNDTR: u32,
    pub CPAR: u32,
    pub CM0AR: u32,
    pub CM1AR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BDMA_TypeDef {
    pub ISR: u32,
    pub IFCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_Channel_TypeDef {
    pub CCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_ChannelStatus_TypeDef {
    pub CSR: u32,
    pub CFR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_RequestGen_TypeDef {
    pub RGCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_RequestGenStatus_TypeDef {
    pub RGSR: u32,
    pub RGCFR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDMA_TypeDef {
    pub GISR0: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDMA_Channel_TypeDef {
    pub CISR: u32,
    pub CIFCR: u32,
    pub CESR: u32,
    pub CCR: u32,
    pub CTCR: u32,
    pub CBNDTR: u32,
    pub CSAR: u32,
    pub CDAR: u32,
    pub CBRUR: u32,
    pub CLAR: u32,
    pub CTBR: u32,
    pub RESERVED0: u32,
    pub CMAR: u32,
    pub CMDR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA2D_TypeDef {
    pub CR: u32,
    pub ISR: u32,
    pub IFCR: u32,
    pub FGMAR: u32,
    pub FGOR: u32,
    pub BGMAR: u32,
    pub BGOR: u32,
    pub FGPFCCR: u32,
    pub FGCOLR: u32,
    pub BGPFCCR: u32,
    pub BGCOLR: u32,
    pub FGCMAR: u32,
    pub BGCMAR: u32,
    pub OPFCCR: u32,
    pub OCOLR: u32,
    pub OMAR: u32,
    pub OOR: u32,
    pub NLR: u32,
    pub LWR: u32,
    pub AMTCR: u32,
    pub RESERVED: [u32; 236usize],
    pub FGCLUT: [u32; 256usize],
    pub BGCLUT: [u32; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ETH_TypeDef {
    pub MACCR: u32,
    pub MACECR: u32,
    pub MACPFR: u32,
    pub MACWTR: u32,
    pub MACHT0R: u32,
    pub MACHT1R: u32,
    pub RESERVED1: [u32; 14usize],
    pub MACVTR: u32,
    pub RESERVED2: u32,
    pub MACVHTR: u32,
    pub RESERVED3: u32,
    pub MACVIR: u32,
    pub MACIVIR: u32,
    pub RESERVED4: [u32; 2usize],
    pub MACTFCR: u32,
    pub RESERVED5: [u32; 7usize],
    pub MACRFCR: u32,
    pub RESERVED6: [u32; 7usize],
    pub MACISR: u32,
    pub MACIER: u32,
    pub MACRXTXSR: u32,
    pub RESERVED7: u32,
    pub MACPCSR: u32,
    pub MACRWKPFR: u32,
    pub RESERVED8: [u32; 2usize],
    pub MACLCSR: u32,
    pub MACLTCR: u32,
    pub MACLETR: u32,
    pub MAC1USTCR: u32,
    pub RESERVED9: [u32; 12usize],
    pub MACVR: u32,
    pub MACDR: u32,
    pub RESERVED10: u32,
    pub MACHWF0R: u32,
    pub MACHWF1R: u32,
    pub MACHWF2R: u32,
    pub RESERVED11: [u32; 54usize],
    pub MACMDIOAR: u32,
    pub MACMDIODR: u32,
    pub RESERVED12: [u32; 2usize],
    pub MACARPAR: u32,
    pub RESERVED13: [u32; 59usize],
    pub MACA0HR: u32,
    pub MACA0LR: u32,
    pub MACA1HR: u32,
    pub MACA1LR: u32,
    pub MACA2HR: u32,
    pub MACA2LR: u32,
    pub MACA3HR: u32,
    pub MACA3LR: u32,
    pub RESERVED14: [u32; 248usize],
    pub MMCCR: u32,
    pub MMCRIR: u32,
    pub MMCTIR: u32,
    pub MMCRIMR: u32,
    pub MMCTIMR: u32,
    pub RESERVED15: [u32; 14usize],
    pub MMCTSCGPR: u32,
    pub MMCTMCGPR: u32,
    pub RESERVED16: [u32; 5usize],
    pub MMCTPCGR: u32,
    pub RESERVED17: [u32; 10usize],
    pub MMCRCRCEPR: u32,
    pub MMCRAEPR: u32,
    pub RESERVED18: [u32; 10usize],
    pub MMCRUPGR: u32,
    pub RESERVED19: [u32; 9usize],
    pub MMCTLPIMSTR: u32,
    pub MMCTLPITCR: u32,
    pub MMCRLPIMSTR: u32,
    pub MMCRLPITCR: u32,
    pub RESERVED20: [u32; 65usize],
    pub MACL3L4C0R: u32,
    pub MACL4A0R: u32,
    pub RESERVED21: [u32; 2usize],
    pub MACL3A0R0R: u32,
    pub MACL3A1R0R: u32,
    pub MACL3A2R0R: u32,
    pub MACL3A3R0R: u32,
    pub RESERVED22: [u32; 4usize],
    pub MACL3L4C1R: u32,
    pub MACL4A1R: u32,
    pub RESERVED23: [u32; 2usize],
    pub MACL3A0R1R: u32,
    pub MACL3A1R1R: u32,
    pub MACL3A2R1R: u32,
    pub MACL3A3R1R: u32,
    pub RESERVED24: [u32; 108usize],
    pub MACTSCR: u32,
    pub MACSSIR: u32,
    pub MACSTSR: u32,
    pub MACSTNR: u32,
    pub MACSTSUR: u32,
    pub MACSTNUR: u32,
    pub MACTSAR: u32,
    pub RESERVED25: u32,
    pub MACTSSR: u32,
    pub RESERVED26: [u32; 3usize],
    pub MACTTSSNR: u32,
    pub MACTTSSSR: u32,
    pub RESERVED27: [u32; 2usize],
    pub MACACR: u32,
    pub RESERVED28: u32,
    pub MACATSNR: u32,
    pub MACATSSR: u32,
    pub MACTSIACR: u32,
    pub MACTSEACR: u32,
    pub MACTSICNR: u32,
    pub MACTSECNR: u32,
    pub RESERVED29: [u32; 4usize],
    pub MACPPSCR: u32,
    pub RESERVED30: [u32; 3usize],
    pub MACPPSTTSR: u32,
    pub MACPPSTTNR: u32,
    pub MACPPSIR: u32,
    pub MACPPSWR: u32,
    pub RESERVED31: [u32; 12usize],
    pub MACPOCR: u32,
    pub MACSPI0R: u32,
    pub MACSPI1R: u32,
    pub MACSPI2R: u32,
    pub MACLMIR: u32,
    pub RESERVED32: [u32; 11usize],
    pub MTLOMR: u32,
    pub RESERVED33: [u32; 7usize],
    pub MTLISR: u32,
    pub RESERVED34: [u32; 55usize],
    pub MTLTQOMR: u32,
    pub MTLTQUR: u32,
    pub MTLTQDR: u32,
    pub RESERVED35: [u32; 8usize],
    pub MTLQICSR: u32,
    pub MTLRQOMR: u32,
    pub MTLRQMPOCR: u32,
    pub MTLRQDR: u32,
    pub RESERVED36: [u32; 177usize],
    pub DMAMR: u32,
    pub DMASBMR: u32,
    pub DMAISR: u32,
    pub DMADSR: u32,
    pub RESERVED37: [u32; 60usize],
    pub DMACCR: u32,
    pub DMACTCR: u32,
    pub DMACRCR: u32,
    pub RESERVED38: [u32; 2usize],
    pub DMACTDLAR: u32,
    pub RESERVED39: u32,
    pub DMACRDLAR: u32,
    pub DMACTDTPR: u32,
    pub RESERVED40: u32,
    pub DMACRDTPR: u32,
    pub DMACTDRLR: u32,
    pub DMACRDRLR: u32,
    pub DMACIER: u32,
    pub DMACRIWTR: u32,
    pub DMACSFCSR: u32,
    pub RESERVED41: u32,
    pub DMACCATDR: u32,
    pub RESERVED42: u32,
    pub DMACCARDR: u32,
    pub RESERVED43: u32,
    pub DMACCATBR: u32,
    pub RESERVED44: u32,
    pub DMACCARBR: u32,
    pub DMACSR: u32,
    pub RESERVED45: [u32; 2usize],
    pub DMACMFCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXTI_TypeDef {
    pub RTSR1: u32,
    pub FTSR1: u32,
    pub SWIER1: u32,
    pub D3PMR1: u32,
    pub D3PCR1L: u32,
    pub D3PCR1H: u32,
    pub RESERVED1: [u32; 2usize],
    pub RTSR2: u32,
    pub FTSR2: u32,
    pub SWIER2: u32,
    pub D3PMR2: u32,
    pub D3PCR2L: u32,
    pub D3PCR2H: u32,
    pub RESERVED2: [u32; 2usize],
    pub RTSR3: u32,
    pub FTSR3: u32,
    pub SWIER3: u32,
    pub D3PMR3: u32,
    pub D3PCR3L: u32,
    pub D3PCR3H: u32,
    pub RESERVED3: [u32; 10usize],
    pub IMR1: u32,
    pub EMR1: u32,
    pub PR1: u32,
    pub RESERVED4: u32,
    pub IMR2: u32,
    pub EMR2: u32,
    pub PR2: u32,
    pub RESERVED5: u32,
    pub IMR3: u32,
    pub EMR3: u32,
    pub PR3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXTI_Core_TypeDef {
    pub IMR1: u32,
    pub EMR1: u32,
    pub PR1: u32,
    pub RESERVED1: u32,
    pub IMR2: u32,
    pub EMR2: u32,
    pub PR2: u32,
    pub RESERVED2: u32,
    pub IMR3: u32,
    pub EMR3: u32,
    pub PR3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_TypeDef {
    pub ACR: u32,
    pub KEYR1: u32,
    pub OPTKEYR: u32,
    pub CR1: u32,
    pub SR1: u32,
    pub CCR1: u32,
    pub OPTCR: u32,
    pub OPTSR_CUR: u32,
    pub OPTSR_PRG: u32,
    pub OPTCCR: u32,
    pub PRAR_CUR1: u32,
    pub PRAR_PRG1: u32,
    pub SCAR_CUR1: u32,
    pub SCAR_PRG1: u32,
    pub WPSN_CUR1: u32,
    pub WPSN_PRG1: u32,
    pub BOOT_CUR: u32,
    pub BOOT_PRG: u32,
    pub RESERVED0: [u32; 2usize],
    pub CRCCR1: u32,
    pub CRCSADD1: u32,
    pub CRCEADD1: u32,
    pub CRCDATA: u32,
    pub ECC_FA1: u32,
    pub RESERVED1: [u32; 40usize],
    pub KEYR2: u32,
    pub RESERVED2: u32,
    pub CR2: u32,
    pub SR2: u32,
    pub CCR2: u32,
    pub RESERVED3: [u32; 4usize],
    pub PRAR_CUR2: u32,
    pub PRAR_PRG2: u32,
    pub SCAR_CUR2: u32,
    pub SCAR_PRG2: u32,
    pub WPSN_CUR2: u32,
    pub WPSN_PRG2: u32,
    pub RESERVED4: [u32; 4usize],
    pub CRCCR2: u32,
    pub CRCSADD2: u32,
    pub CRCEADD2: u32,
    pub CRCDATA2: u32,
    pub ECC_FA2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_Bank1_TypeDef {
    pub BTCR: [u32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_Bank1E_TypeDef {
    pub BWTR: [u32; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_Bank2_TypeDef {
    pub PCR2: u32,
    pub SR2: u32,
    pub PMEM2: u32,
    pub PATT2: u32,
    pub RESERVED0: u32,
    pub ECCR2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_Bank3_TypeDef {
    pub PCR: u32,
    pub SR: u32,
    pub PMEM: u32,
    pub PATT: u32,
    pub RESERVED: u32,
    pub ECCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_Bank5_6_TypeDef {
    pub SDCR: [u32; 2usize],
    pub SDTR: [u32; 2usize],
    pub SDCMR: u32,
    pub SDRTR: u32,
    pub SDSR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_TypeDef {
    pub MODER: u32,
    pub OTYPER: u32,
    pub OSPEEDR: u32,
    pub PUPDR: u32,
    pub IDR: u32,
    pub ODR: u32,
    pub BSRR: u32,
    pub LCKR: u32,
    pub AFR: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OPAMP_TypeDef {
    pub CSR: u32,
    pub OTR: u32,
    pub HSOTR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSCFG_TypeDef {
    pub RESERVED1: u32,
    pub PMCR: u32,
    pub EXTICR: [u32; 4usize],
    pub CFGR: u32,
    pub RESERVED2: u32,
    pub CCCSR: u32,
    pub CCVR: u32,
    pub CCCR: u32,
    pub PWRCR: u32,
    pub RESERVED3: [u32; 61usize],
    pub PKGR: u32,
    pub RESERVED4: [u32; 118usize],
    pub UR0: u32,
    pub UR1: u32,
    pub UR2: u32,
    pub UR3: u32,
    pub UR4: u32,
    pub UR5: u32,
    pub UR6: u32,
    pub UR7: u32,
    pub UR8: u32,
    pub UR9: u32,
    pub UR10: u32,
    pub UR11: u32,
    pub UR12: u32,
    pub UR13: u32,
    pub UR14: u32,
    pub UR15: u32,
    pub UR16: u32,
    pub UR17: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2C_TypeDef {
    pub CR1: u32,
    pub CR2: u32,
    pub OAR1: u32,
    pub OAR2: u32,
    pub TIMINGR: u32,
    pub TIMEOUTR: u32,
    pub ISR: u32,
    pub ICR: u32,
    pub PECR: u32,
    pub RXDR: u32,
    pub TXDR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWDG_TypeDef {
    pub KR: u32,
    pub PR: u32,
    pub RLR: u32,
    pub SR: u32,
    pub WINR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JPEG_TypeDef {
    pub CONFR0: u32,
    pub CONFR1: u32,
    pub CONFR2: u32,
    pub CONFR3: u32,
    pub CONFR4: u32,
    pub CONFR5: u32,
    pub CONFR6: u32,
    pub CONFR7: u32,
    pub Reserved20: [u32; 4usize],
    pub CR: u32,
    pub SR: u32,
    pub CFR: u32,
    pub Reserved3c: u32,
    pub DIR: u32,
    pub DOR: u32,
    pub Reserved48: [u32; 2usize],
    pub QMEM0: [u32; 16usize],
    pub QMEM1: [u32; 16usize],
    pub QMEM2: [u32; 16usize],
    pub QMEM3: [u32; 16usize],
    pub HUFFMIN: [u32; 16usize],
    pub HUFFBASE: [u32; 32usize],
    pub HUFFSYMB: [u32; 84usize],
    pub DHTMEM: [u32; 103usize],
    pub Reserved4FC: u32,
    pub HUFFENC_AC0: [u32; 88usize],
    pub HUFFENC_AC1: [u32; 88usize],
    pub HUFFENC_DC0: [u32; 8usize],
    pub HUFFENC_DC1: [u32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LTDC_TypeDef {
    pub RESERVED0: [u32; 2usize],
    pub SSCR: u32,
    pub BPCR: u32,
    pub AWCR: u32,
    pub TWCR: u32,
    pub GCR: u32,
    pub RESERVED1: [u32; 2usize],
    pub SRCR: u32,
    pub RESERVED2: [u32; 1usize],
    pub BCCR: u32,
    pub RESERVED3: [u32; 1usize],
    pub IER: u32,
    pub ISR: u32,
    pub ICR: u32,
    pub LIPCR: u32,
    pub CPSR: u32,
    pub CDSR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LTDC_Layer_TypeDef {
    pub CR: u32,
    pub WHPCR: u32,
    pub WVPCR: u32,
    pub CKCR: u32,
    pub PFCR: u32,
    pub CACR: u32,
    pub DCCR: u32,
    pub BFCR: u32,
    pub RESERVED0: [u32; 2usize],
    pub CFBAR: u32,
    pub CFBLR: u32,
    pub CFBLNR: u32,
    pub RESERVED1: [u32; 3usize],
    pub CLUTWR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWR_TypeDef {
    pub CR1: u32,
    pub CSR1: u32,
    pub CR2: u32,
    pub CR3: u32,
    pub CPUCR: u32,
    pub RESERVED0: u32,
    pub D3CR: u32,
    pub RESERVED1: u32,
    pub WKUPCR: u32,
    pub WKUPFR: u32,
    pub WKUPEPR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_TypeDef {
    pub CR: u32,
    pub HSICFGR: u32,
    pub CRRCR: u32,
    pub CSICFGR: u32,
    pub CFGR: u32,
    pub RESERVED1: u32,
    pub D1CFGR: u32,
    pub D2CFGR: u32,
    pub D3CFGR: u32,
    pub RESERVED2: u32,
    pub PLLCKSELR: u32,
    pub PLLCFGR: u32,
    pub PLL1DIVR: u32,
    pub PLL1FRACR: u32,
    pub PLL2DIVR: u32,
    pub PLL2FRACR: u32,
    pub PLL3DIVR: u32,
    pub PLL3FRACR: u32,
    pub RESERVED3: u32,
    pub D1CCIPR: u32,
    pub D2CCIP1R: u32,
    pub D2CCIP2R: u32,
    pub D3CCIPR: u32,
    pub RESERVED4: u32,
    pub CIER: u32,
    pub CIFR: u32,
    pub CICR: u32,
    pub RESERVED5: u32,
    pub BDCR: u32,
    pub CSR: u32,
    pub RESERVED6: u32,
    pub AHB3RSTR: u32,
    pub AHB1RSTR: u32,
    pub AHB2RSTR: u32,
    pub AHB4RSTR: u32,
    pub APB3RSTR: u32,
    pub APB1LRSTR: u32,
    pub APB1HRSTR: u32,
    pub APB2RSTR: u32,
    pub APB4RSTR: u32,
    pub GCR: u32,
    pub RESERVED8: u32,
    pub D3AMR: u32,
    pub RESERVED11: [u32; 9usize],
    pub RSR: u32,
    pub AHB3ENR: u32,
    pub AHB1ENR: u32,
    pub AHB2ENR: u32,
    pub AHB4ENR: u32,
    pub APB3ENR: u32,
    pub APB1LENR: u32,
    pub APB1HENR: u32,
    pub APB2ENR: u32,
    pub APB4ENR: u32,
    pub RESERVED12: u32,
    pub AHB3LPENR: u32,
    pub AHB1LPENR: u32,
    pub AHB2LPENR: u32,
    pub AHB4LPENR: u32,
    pub APB3LPENR: u32,
    pub APB1LLPENR: u32,
    pub APB1HLPENR: u32,
    pub APB2LPENR: u32,
    pub APB4LPENR: u32,
    pub RESERVED13: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_TypeDef {
    pub TR: u32,
    pub DR: u32,
    pub CR: u32,
    pub ISR: u32,
    pub PRER: u32,
    pub WUTR: u32,
    pub RESERVED: u32,
    pub ALRMAR: u32,
    pub ALRMBR: u32,
    pub WPR: u32,
    pub SSR: u32,
    pub SHIFTR: u32,
    pub TSTR: u32,
    pub TSDR: u32,
    pub TSSSR: u32,
    pub CALR: u32,
    pub TAMPCR: u32,
    pub ALRMASSR: u32,
    pub ALRMBSSR: u32,
    pub OR: u32,
    pub BKP0R: u32,
    pub BKP1R: u32,
    pub BKP2R: u32,
    pub BKP3R: u32,
    pub BKP4R: u32,
    pub BKP5R: u32,
    pub BKP6R: u32,
    pub BKP7R: u32,
    pub BKP8R: u32,
    pub BKP9R: u32,
    pub BKP10R: u32,
    pub BKP11R: u32,
    pub BKP12R: u32,
    pub BKP13R: u32,
    pub BKP14R: u32,
    pub BKP15R: u32,
    pub BKP16R: u32,
    pub BKP17R: u32,
    pub BKP18R: u32,
    pub BKP19R: u32,
    pub BKP20R: u32,
    pub BKP21R: u32,
    pub BKP22R: u32,
    pub BKP23R: u32,
    pub BKP24R: u32,
    pub BKP25R: u32,
    pub BKP26R: u32,
    pub BKP27R: u32,
    pub BKP28R: u32,
    pub BKP29R: u32,
    pub BKP30R: u32,
    pub BKP31R: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAI_TypeDef {
    pub GCR: u32,
    pub RESERVED0: [u32; 16usize],
    pub PDMCR: u32,
    pub PDMDLY: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAI_Block_TypeDef {
    pub CR1: u32,
    pub CR2: u32,
    pub FRCR: u32,
    pub SLOTR: u32,
    pub IMR: u32,
    pub SR: u32,
    pub CLRFR: u32,
    pub DR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPDIFRX_TypeDef {
    pub CR: u32,
    pub IMR: u32,
    pub SR: u32,
    pub IFCR: u32,
    pub DR: u32,
    pub CSR: u32,
    pub DIR: u32,
    pub RESERVED2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDMMC_TypeDef {
    pub POWER: u32,
    pub CLKCR: u32,
    pub ARG: u32,
    pub CMD: u32,
    pub RESPCMD: u32,
    pub RESP1: u32,
    pub RESP2: u32,
    pub RESP3: u32,
    pub RESP4: u32,
    pub DTIMER: u32,
    pub DLEN: u32,
    pub DCTRL: u32,
    pub DCOUNT: u32,
    pub STA: u32,
    pub ICR: u32,
    pub MASK: u32,
    pub ACKTIME: u32,
    pub RESERVED0: [u32; 3usize],
    pub IDMACTRL: u32,
    pub IDMABSIZE: u32,
    pub IDMABASE0: u32,
    pub IDMABASE1: u32,
    pub RESERVED1: [u32; 8usize],
    pub FIFO: u32,
    pub RESERVED2: [u32; 222usize],
    pub IPVR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DLYB_TypeDef {
    pub CR: u32,
    pub CFGR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSEM_TypeDef {
    pub R: [u32; 32usize],
    pub RLR: [u32; 32usize],
    pub C1IER: u32,
    pub C1ICR: u32,
    pub C1ISR: u32,
    pub C1MISR: u32,
    pub Reserved: [u32; 12usize],
    pub CR: u32,
    pub KEYR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSEM_Common_TypeDef {
    pub IER: u32,
    pub ICR: u32,
    pub ISR: u32,
    pub MISR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPI_TypeDef {
    pub CR1: u32,
    pub CR2: u32,
    pub CFG1: u32,
    pub CFG2: u32,
    pub IER: u32,
    pub SR: u32,
    pub IFCR: u32,
    pub RESERVED0: u32,
    pub TXDR: u32,
    pub RESERVED1: [u32; 3usize],
    pub RXDR: u32,
    pub RESERVED2: [u32; 3usize],
    pub CRCPOLY: u32,
    pub TXCRC: u32,
    pub RXCRC: u32,
    pub UDRDR: u32,
    pub I2SCFGR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QUADSPI_TypeDef {
    pub CR: u32,
    pub DCR: u32,
    pub SR: u32,
    pub FCR: u32,
    pub DLR: u32,
    pub CCR: u32,
    pub AR: u32,
    pub ABR: u32,
    pub DR: u32,
    pub PSMKR: u32,
    pub PSMAR: u32,
    pub PIR: u32,
    pub LPTR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_TypeDef {
    pub CR1: u32,
    pub CR2: u32,
    pub SMCR: u32,
    pub DIER: u32,
    pub SR: u32,
    pub EGR: u32,
    pub CCMR1: u32,
    pub CCMR2: u32,
    pub CCER: u32,
    pub CNT: u32,
    pub PSC: u32,
    pub ARR: u32,
    pub RCR: u32,
    pub CCR1: u32,
    pub CCR2: u32,
    pub CCR3: u32,
    pub CCR4: u32,
    pub BDTR: u32,
    pub DCR: u32,
    pub DMAR: u32,
    pub RESERVED1: u32,
    pub CCMR3: u32,
    pub CCR5: u32,
    pub CCR6: u32,
    pub AF1: u32,
    pub AF2: u32,
    pub TISEL: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LPTIM_TypeDef {
    pub ISR: u32,
    pub ICR: u32,
    pub IER: u32,
    pub CFGR: u32,
    pub CR: u32,
    pub CMP: u32,
    pub ARR: u32,
    pub CNT: u32,
    pub RESERVED1: u32,
    pub CFGR2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COMPOPT_TypeDef {
    pub SR: u32,
    pub ICFR: u32,
    pub OR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COMP_TypeDef {
    pub CFGR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COMP_Common_TypeDef {
    pub CFGR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USART_TypeDef {
    pub CR1: u32,
    pub CR2: u32,
    pub CR3: u32,
    pub BRR: u32,
    pub GTPR: u32,
    pub RTOR: u32,
    pub RQR: u32,
    pub ISR: u32,
    pub ICR: u32,
    pub RDR: u32,
    pub TDR: u32,
    pub PRESC: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SWPMI_TypeDef {
    pub CR: u32,
    pub BRR: u32,
    pub RESERVED1: u32,
    pub ISR: u32,
    pub ICR: u32,
    pub IER: u32,
    pub RFL: u32,
    pub TDR: u32,
    pub RDR: u32,
    pub OR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WWDG_TypeDef {
    pub CR: u32,
    pub CFR: u32,
    pub SR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RAMECC_TypeDef {
    pub IER: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRYP_TypeDef {
    pub CR: u32,
    pub SR: u32,
    pub DIN: u32,
    pub DOUT: u32,
    pub DMACR: u32,
    pub IMSCR: u32,
    pub RISR: u32,
    pub MISR: u32,
    pub K0LR: u32,
    pub K0RR: u32,
    pub K1LR: u32,
    pub K1RR: u32,
    pub K2LR: u32,
    pub K2RR: u32,
    pub K3LR: u32,
    pub K3RR: u32,
    pub IV0LR: u32,
    pub IV0RR: u32,
    pub IV1LR: u32,
    pub IV1RR: u32,
    pub CSGCMCCM0R: u32,
    pub CSGCMCCM1R: u32,
    pub CSGCMCCM2R: u32,
    pub CSGCMCCM3R: u32,
    pub CSGCMCCM4R: u32,
    pub CSGCMCCM5R: u32,
    pub CSGCMCCM6R: u32,
    pub CSGCMCCM7R: u32,
    pub CSGCM0R: u32,
    pub CSGCM1R: u32,
    pub CSGCM2R: u32,
    pub CSGCM3R: u32,
    pub CSGCM4R: u32,
    pub CSGCM5R: u32,
    pub CSGCM6R: u32,
    pub CSGCM7R: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HASH_TypeDef {
    pub CR: u32,
    pub DIN: u32,
    pub STR: u32,
    pub HR: [u32; 5usize],
    pub IMR: u32,
    pub SR: u32,
    pub RESERVED: [u32; 52usize],
    pub CSR: [u32; 54usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HASH_DIGEST_TypeDef {
    pub HR: [u32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRTIM_Master_TypeDef {
    pub MCR: u32,
    pub MISR: u32,
    pub MICR: u32,
    pub MDIER: u32,
    pub MCNTR: u32,
    pub MPER: u32,
    pub MREP: u32,
    pub MCMP1R: u32,
    pub RESERVED0: u32,
    pub MCMP2R: u32,
    pub MCMP3R: u32,
    pub MCMP4R: u32,
    pub RESERVED1: [u32; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRTIM_Timerx_TypeDef {
    pub TIMxCR: u32,
    pub TIMxISR: u32,
    pub TIMxICR: u32,
    pub TIMxDIER: u32,
    pub CNTxR: u32,
    pub PERxR: u32,
    pub REPxR: u32,
    pub CMP1xR: u32,
    pub CMP1CxR: u32,
    pub CMP2xR: u32,
    pub CMP3xR: u32,
    pub CMP4xR: u32,
    pub CPT1xR: u32,
    pub CPT2xR: u32,
    pub DTxR: u32,
    pub SETx1R: u32,
    pub RSTx1R: u32,
    pub SETx2R: u32,
    pub RSTx2R: u32,
    pub EEFxR1: u32,
    pub EEFxR2: u32,
    pub RSTxR: u32,
    pub CHPxR: u32,
    pub CPT1xCR: u32,
    pub CPT2xCR: u32,
    pub OUTxR: u32,
    pub FLTxR: u32,
    pub RESERVED0: [u32; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRTIM_Common_TypeDef {
    pub CR1: u32,
    pub CR2: u32,
    pub ISR: u32,
    pub ICR: u32,
    pub IER: u32,
    pub OENR: u32,
    pub ODISR: u32,
    pub ODSR: u32,
    pub BMCR: u32,
    pub BMTRGR: u32,
    pub BMCMPR: u32,
    pub BMPER: u32,
    pub EECR1: u32,
    pub EECR2: u32,
    pub EECR3: u32,
    pub ADC1R: u32,
    pub ADC2R: u32,
    pub ADC3R: u32,
    pub ADC4R: u32,
    pub RESERVED0: u32,
    pub FLTINR1: u32,
    pub FLTINR2: u32,
    pub BDMUPR: u32,
    pub BDTAUPR: u32,
    pub BDTBUPR: u32,
    pub BDTCUPR: u32,
    pub BDTDUPR: u32,
    pub BDTEUPR: u32,
    pub BDMADR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRTIM_TypeDef {
    pub sMasterRegs: HRTIM_Master_TypeDef,
    pub sTimerxRegs: [HRTIM_Timerx_TypeDef; 5usize],
    pub RESERVED0: [u32; 32usize],
    pub sCommonRegs: HRTIM_Common_TypeDef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RNG_TypeDef {
    pub CR: u32,
    pub SR: u32,
    pub DR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDIOS_TypeDef {
    pub CR: u32,
    pub WRFR: u32,
    pub CWRFR: u32,
    pub RDFR: u32,
    pub CRDFR: u32,
    pub SR: u32,
    pub CLRFR: u32,
    pub RESERVED: [u32; 57usize],
    pub DINR0: u32,
    pub DINR1: u32,
    pub DINR2: u32,
    pub DINR3: u32,
    pub DINR4: u32,
    pub DINR5: u32,
    pub DINR6: u32,
    pub DINR7: u32,
    pub DINR8: u32,
    pub DINR9: u32,
    pub DINR10: u32,
    pub DINR11: u32,
    pub DINR12: u32,
    pub DINR13: u32,
    pub DINR14: u32,
    pub DINR15: u32,
    pub DINR16: u32,
    pub DINR17: u32,
    pub DINR18: u32,
    pub DINR19: u32,
    pub DINR20: u32,
    pub DINR21: u32,
    pub DINR22: u32,
    pub DINR23: u32,
    pub DINR24: u32,
    pub DINR25: u32,
    pub DINR26: u32,
    pub DINR27: u32,
    pub DINR28: u32,
    pub DINR29: u32,
    pub DINR30: u32,
    pub DINR31: u32,
    pub DOUTR0: u32,
    pub DOUTR1: u32,
    pub DOUTR2: u32,
    pub DOUTR3: u32,
    pub DOUTR4: u32,
    pub DOUTR5: u32,
    pub DOUTR6: u32,
    pub DOUTR7: u32,
    pub DOUTR8: u32,
    pub DOUTR9: u32,
    pub DOUTR10: u32,
    pub DOUTR11: u32,
    pub DOUTR12: u32,
    pub DOUTR13: u32,
    pub DOUTR14: u32,
    pub DOUTR15: u32,
    pub DOUTR16: u32,
    pub DOUTR17: u32,
    pub DOUTR18: u32,
    pub DOUTR19: u32,
    pub DOUTR20: u32,
    pub DOUTR21: u32,
    pub DOUTR22: u32,
    pub DOUTR23: u32,
    pub DOUTR24: u32,
    pub DOUTR25: u32,
    pub DOUTR26: u32,
    pub DOUTR27: u32,
    pub DOUTR28: u32,
    pub DOUTR29: u32,
    pub DOUTR30: u32,
    pub DOUTR31: u32,
}
pub const SCS_BASE: u32 = 3758153728;
pub const ITM_BASE: u32 = 3758096384;
pub const DWT_BASE: u32 = 3758100480;
pub const TPI_BASE: u32 = 3758358528;
pub const CoreDebug_BASE: u32 = 3758157296;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const MPU_BASE: u32 = 3758157200;
pub const FPU_BASE: u32 = 3758157616;
pub const D1_ITCMRAM_BASE: u32 = 0;
pub const D1_ITCMICP_BASE: u32 = 1048576;
pub const D1_DTCMRAM_BASE: u32 = 536870912;
pub const D1_AXIFLASH_BASE: u32 = 134217728;
pub const D1_AXIICP_BASE: u32 = 535822336;
pub const D1_AXISRAM_BASE: u32 = 603979776;
pub const D2_AXISRAM_BASE: u32 = 268435456;
pub const D2_AHBSRAM_BASE: u32 = 805306368;
pub const D3_BKPSRAM_BASE: u32 = 947912704;
pub const D3_SRAM_BASE: u32 = 939524096;
pub const PERIPH_BASE: u32 = 1073741824;
pub const QSPI_BASE: u32 = 2415919104;
pub const FLASH_BANK1_BASE: u32 = 134217728;
pub const FLASH_BANK2_BASE: u32 = 135266304;
pub const FLASH_BASE: u32 = 134217728;
pub const UID_BASE: u32 = 535947264;
pub const FLASHSIZE_BASE: u32 = 535947392;
pub const D2_APB1PERIPH_BASE: u32 = 1073741824;
pub const D2_APB2PERIPH_BASE: u32 = 1073807360;
pub const D2_AHB1PERIPH_BASE: u32 = 1073872896;
pub const D2_AHB2PERIPH_BASE: u32 = 1208090624;
pub const D1_APB1PERIPH_BASE: u32 = 1342177280;
pub const D1_AHB1PERIPH_BASE: u32 = 1375731712;
pub const D3_APB1PERIPH_BASE: u32 = 1476395008;
pub const D3_AHB1PERIPH_BASE: u32 = 1476526080;
pub const APB1PERIPH_BASE: u32 = 1073741824;
pub const APB2PERIPH_BASE: u32 = 1073807360;
pub const AHB1PERIPH_BASE: u32 = 1073872896;
pub const AHB2PERIPH_BASE: u32 = 1207959552;
pub const MDMA_BASE: u32 = 1375731712;
pub const DMA2D_BASE: u32 = 1375735808;
pub const JPGDEC_BASE: u32 = 1375744000;
pub const FLASH_R_BASE: u32 = 1375739904;
pub const FMC_R_BASE: u32 = 1375748096;
pub const QSPI_R_BASE: u32 = 1375752192;
pub const DLYB_QSPI_BASE: u32 = 1375756288;
pub const SDMMC1_BASE: u32 = 1375760384;
pub const DLYB_SDMMC1_BASE: u32 = 1375764480;
pub const RAMECC1_BASE: u32 = 1375768576;
pub const DMA1_BASE: u32 = 1073872896;
pub const DMA2_BASE: u32 = 1073873920;
pub const DMAMUX1_BASE: u32 = 1073874944;
pub const ADC1_BASE: u32 = 1073881088;
pub const ADC2_BASE: u32 = 1073881344;
pub const ADC12_COMMON_BASE: u32 = 1073881856;
pub const ETH_BASE: u32 = 1073905664;
pub const ETH_MAC_BASE: u32 = 1073905664;
pub const USB1_OTG_HS_PERIPH_BASE: u32 = 1074003968;
pub const USB2_OTG_FS_PERIPH_BASE: u32 = 1074266112;
pub const USB_OTG_GLOBAL_BASE: u32 = 0;
pub const USB_OTG_DEVICE_BASE: u32 = 2048;
pub const USB_OTG_IN_ENDPOINT_BASE: u32 = 2304;
pub const USB_OTG_OUT_ENDPOINT_BASE: u32 = 2816;
pub const USB_OTG_HOST_BASE: u32 = 1024;
pub const USB_OTG_HOST_PORT_BASE: u32 = 1088;
pub const USB_OTG_HOST_CHANNEL_BASE: u32 = 1280;
pub const USB_OTG_PCGCCTL_BASE: u32 = 3584;
pub const USB_OTG_FIFO_BASE: u32 = 4096;
pub const DCMI_BASE: u32 = 1208090624;
pub const CRYP_BASE: u32 = 1208094720;
pub const HASH_BASE: u32 = 1208095744;
pub const HASH_DIGEST_BASE: u32 = 1208096528;
pub const RNG_BASE: u32 = 1208096768;
pub const SDMMC2_BASE: u32 = 1208099840;
pub const DLYB_SDMMC2_BASE: u32 = 1208100864;
pub const RAMECC2_BASE: u32 = 1208102912;
pub const GPIOA_BASE: u32 = 1476526080;
pub const GPIOB_BASE: u32 = 1476527104;
pub const GPIOC_BASE: u32 = 1476528128;
pub const GPIOD_BASE: u32 = 1476529152;
pub const GPIOE_BASE: u32 = 1476530176;
pub const GPIOF_BASE: u32 = 1476531200;
pub const GPIOG_BASE: u32 = 1476532224;
pub const GPIOH_BASE: u32 = 1476533248;
pub const GPIOI_BASE: u32 = 1476534272;
pub const GPIOJ_BASE: u32 = 1476535296;
pub const GPIOK_BASE: u32 = 1476536320;
pub const RCC_BASE: u32 = 1476543488;
pub const PWR_BASE: u32 = 1476544512;
pub const CRC_BASE: u32 = 1476545536;
pub const BDMA_BASE: u32 = 1476547584;
pub const DMAMUX2_BASE: u32 = 1476548608;
pub const ADC3_BASE: u32 = 1476550656;
pub const ADC3_COMMON_BASE: u32 = 1476551424;
pub const HSEM_BASE: u32 = 1476551680;
pub const RAMECC3_BASE: u32 = 1476554752;
pub const LTDC_BASE: u32 = 1342181376;
pub const LTDC_Layer1_BASE: u32 = 1342181508;
pub const LTDC_Layer2_BASE: u32 = 1342181636;
pub const WWDG1_BASE: u32 = 1342189568;
pub const TIM2_BASE: u32 = 1073741824;
pub const TIM3_BASE: u32 = 1073742848;
pub const TIM4_BASE: u32 = 1073743872;
pub const TIM5_BASE: u32 = 1073744896;
pub const TIM6_BASE: u32 = 1073745920;
pub const TIM7_BASE: u32 = 1073746944;
pub const TIM12_BASE: u32 = 1073747968;
pub const TIM13_BASE: u32 = 1073748992;
pub const TIM14_BASE: u32 = 1073750016;
pub const LPTIM1_BASE: u32 = 1073751040;
pub const SPI2_BASE: u32 = 1073756160;
pub const SPI3_BASE: u32 = 1073757184;
pub const SPDIFRX_BASE: u32 = 1073758208;
pub const USART2_BASE: u32 = 1073759232;
pub const USART3_BASE: u32 = 1073760256;
pub const UART4_BASE: u32 = 1073761280;
pub const UART5_BASE: u32 = 1073762304;
pub const I2C1_BASE: u32 = 1073763328;
pub const I2C2_BASE: u32 = 1073764352;
pub const I2C3_BASE: u32 = 1073765376;
pub const CEC_BASE: u32 = 1073769472;
pub const DAC1_BASE: u32 = 1073771520;
pub const UART7_BASE: u32 = 1073772544;
pub const UART8_BASE: u32 = 1073773568;
pub const CRS_BASE: u32 = 1073775616;
pub const SWPMI1_BASE: u32 = 1073776640;
pub const OPAMP_BASE: u32 = 1073778688;
pub const OPAMP1_BASE: u32 = 1073778688;
pub const OPAMP2_BASE: u32 = 1073778704;
pub const MDIOS_BASE: u32 = 1073779712;
pub const FDCAN1_BASE: u32 = 1073782784;
pub const FDCAN2_BASE: u32 = 1073783808;
pub const FDCAN_CCU_BASE: u32 = 1073784832;
pub const SRAMCAN_BASE: u32 = 1073785856;
pub const TIM1_BASE: u32 = 1073807360;
pub const TIM8_BASE: u32 = 1073808384;
pub const USART1_BASE: u32 = 1073811456;
pub const USART6_BASE: u32 = 1073812480;
pub const SPI1_BASE: u32 = 1073819648;
pub const SPI4_BASE: u32 = 1073820672;
pub const TIM15_BASE: u32 = 1073823744;
pub const TIM16_BASE: u32 = 1073824768;
pub const TIM17_BASE: u32 = 1073825792;
pub const SPI5_BASE: u32 = 1073827840;
pub const SAI1_BASE: u32 = 1073829888;
pub const SAI1_Block_A_BASE: u32 = 1073829892;
pub const SAI1_Block_B_BASE: u32 = 1073829924;
pub const SAI2_BASE: u32 = 1073830912;
pub const SAI2_Block_A_BASE: u32 = 1073830916;
pub const SAI2_Block_B_BASE: u32 = 1073830948;
pub const SAI3_BASE: u32 = 1073831936;
pub const SAI3_Block_A_BASE: u32 = 1073831940;
pub const SAI3_Block_B_BASE: u32 = 1073831972;
pub const DFSDM1_BASE: u32 = 1073836032;
pub const DFSDM1_Channel0_BASE: u32 = 1073836032;
pub const DFSDM1_Channel1_BASE: u32 = 1073836064;
pub const DFSDM1_Channel2_BASE: u32 = 1073836096;
pub const DFSDM1_Channel3_BASE: u32 = 1073836128;
pub const DFSDM1_Channel4_BASE: u32 = 1073836160;
pub const DFSDM1_Channel5_BASE: u32 = 1073836192;
pub const DFSDM1_Channel6_BASE: u32 = 1073836224;
pub const DFSDM1_Channel7_BASE: u32 = 1073836256;
pub const DFSDM1_Filter0_BASE: u32 = 1073836288;
pub const DFSDM1_Filter1_BASE: u32 = 1073836416;
pub const DFSDM1_Filter2_BASE: u32 = 1073836544;
pub const DFSDM1_Filter3_BASE: u32 = 1073836672;
pub const HRTIM1_BASE: u32 = 1073837056;
pub const HRTIM1_TIMA_BASE: u32 = 1073837184;
pub const HRTIM1_TIMB_BASE: u32 = 1073837312;
pub const HRTIM1_TIMC_BASE: u32 = 1073837440;
pub const HRTIM1_TIMD_BASE: u32 = 1073837568;
pub const HRTIM1_TIME_BASE: u32 = 1073837696;
pub const HRTIM1_COMMON_BASE: u32 = 1073837952;
pub const EXTI_BASE: u32 = 1476395008;
pub const EXTI_D1_BASE: u32 = 1476395136;
pub const EXTI_D2_BASE: u32 = 1476395200;
pub const SYSCFG_BASE: u32 = 1476396032;
pub const LPUART1_BASE: u32 = 1476398080;
pub const SPI6_BASE: u32 = 1476400128;
pub const I2C4_BASE: u32 = 1476402176;
pub const LPTIM2_BASE: u32 = 1476404224;
pub const LPTIM3_BASE: u32 = 1476405248;
pub const LPTIM4_BASE: u32 = 1476406272;
pub const LPTIM5_BASE: u32 = 1476407296;
pub const COMP12_BASE: u32 = 1476409344;
pub const COMP1_BASE: u32 = 1476409356;
pub const COMP2_BASE: u32 = 1476409360;
pub const VREFBUF_BASE: u32 = 1476410368;
pub const RTC_BASE: u32 = 1476411392;
pub const IWDG1_BASE: u32 = 1476413440;
pub const SAI4_BASE: u32 = 1476416512;
pub const SAI4_Block_A_BASE: u32 = 1476416516;
pub const SAI4_Block_B_BASE: u32 = 1476416548;
pub const BDMA_Channel0_BASE: u32 = 1476547592;
pub const BDMA_Channel1_BASE: u32 = 1476547612;
pub const BDMA_Channel2_BASE: u32 = 1476547632;
pub const BDMA_Channel3_BASE: u32 = 1476547652;
pub const BDMA_Channel4_BASE: u32 = 1476547672;
pub const BDMA_Channel5_BASE: u32 = 1476547692;
pub const BDMA_Channel6_BASE: u32 = 1476547712;
pub const BDMA_Channel7_BASE: u32 = 1476547732;
pub const DMAMUX2_Channel0_BASE: u32 = 1476548608;
pub const DMAMUX2_Channel1_BASE: u32 = 1476548612;
pub const DMAMUX2_Channel2_BASE: u32 = 1476548616;
pub const DMAMUX2_Channel3_BASE: u32 = 1476548620;
pub const DMAMUX2_Channel4_BASE: u32 = 1476548624;
pub const DMAMUX2_Channel5_BASE: u32 = 1476548628;
pub const DMAMUX2_Channel6_BASE: u32 = 1476548632;
pub const DMAMUX2_Channel7_BASE: u32 = 1476548636;
pub const DMAMUX2_RequestGenerator0_BASE: u32 = 1476548864;
pub const DMAMUX2_RequestGenerator1_BASE: u32 = 1476548868;
pub const DMAMUX2_RequestGenerator2_BASE: u32 = 1476548872;
pub const DMAMUX2_RequestGenerator3_BASE: u32 = 1476548876;
pub const DMAMUX2_RequestGenerator4_BASE: u32 = 1476548880;
pub const DMAMUX2_RequestGenerator5_BASE: u32 = 1476548884;
pub const DMAMUX2_RequestGenerator6_BASE: u32 = 1476548888;
pub const DMAMUX2_RequestGenerator7_BASE: u32 = 1476548892;
pub const DMAMUX2_ChannelStatus_BASE: u32 = 1476548736;
pub const DMAMUX2_RequestGenStatus_BASE: u32 = 1476548928;
pub const DMA1_Stream0_BASE: u32 = 1073872912;
pub const DMA1_Stream1_BASE: u32 = 1073872936;
pub const DMA1_Stream2_BASE: u32 = 1073872960;
pub const DMA1_Stream3_BASE: u32 = 1073872984;
pub const DMA1_Stream4_BASE: u32 = 1073873008;
pub const DMA1_Stream5_BASE: u32 = 1073873032;
pub const DMA1_Stream6_BASE: u32 = 1073873056;
pub const DMA1_Stream7_BASE: u32 = 1073873080;
pub const DMA2_Stream0_BASE: u32 = 1073873936;
pub const DMA2_Stream1_BASE: u32 = 1073873960;
pub const DMA2_Stream2_BASE: u32 = 1073873984;
pub const DMA2_Stream3_BASE: u32 = 1073874008;
pub const DMA2_Stream4_BASE: u32 = 1073874032;
pub const DMA2_Stream5_BASE: u32 = 1073874056;
pub const DMA2_Stream6_BASE: u32 = 1073874080;
pub const DMA2_Stream7_BASE: u32 = 1073874104;
pub const DMAMUX1_Channel0_BASE: u32 = 1073874944;
pub const DMAMUX1_Channel1_BASE: u32 = 1073874948;
pub const DMAMUX1_Channel2_BASE: u32 = 1073874952;
pub const DMAMUX1_Channel3_BASE: u32 = 1073874956;
pub const DMAMUX1_Channel4_BASE: u32 = 1073874960;
pub const DMAMUX1_Channel5_BASE: u32 = 1073874964;
pub const DMAMUX1_Channel6_BASE: u32 = 1073874968;
pub const DMAMUX1_Channel7_BASE: u32 = 1073874972;
pub const DMAMUX1_Channel8_BASE: u32 = 1073874976;
pub const DMAMUX1_Channel9_BASE: u32 = 1073874980;
pub const DMAMUX1_Channel10_BASE: u32 = 1073874984;
pub const DMAMUX1_Channel11_BASE: u32 = 1073874988;
pub const DMAMUX1_Channel12_BASE: u32 = 1073874992;
pub const DMAMUX1_Channel13_BASE: u32 = 1073874996;
pub const DMAMUX1_Channel14_BASE: u32 = 1073875000;
pub const DMAMUX1_Channel15_BASE: u32 = 1073875004;
pub const DMAMUX1_RequestGenerator0_BASE: u32 = 1073875200;
pub const DMAMUX1_RequestGenerator1_BASE: u32 = 1073875204;
pub const DMAMUX1_RequestGenerator2_BASE: u32 = 1073875208;
pub const DMAMUX1_RequestGenerator3_BASE: u32 = 1073875212;
pub const DMAMUX1_RequestGenerator4_BASE: u32 = 1073875216;
pub const DMAMUX1_RequestGenerator5_BASE: u32 = 1073875220;
pub const DMAMUX1_RequestGenerator6_BASE: u32 = 1073875224;
pub const DMAMUX1_RequestGenerator7_BASE: u32 = 1073875228;
pub const DMAMUX1_ChannelStatus_BASE: u32 = 1073875072;
pub const DMAMUX1_RequestGenStatus_BASE: u32 = 1073875264;
pub const FMC_Bank1_R_BASE: u32 = 1375748096;
pub const FMC_Bank1E_R_BASE: u32 = 1375748356;
pub const FMC_Bank2_R_BASE: u32 = 1375748192;
pub const FMC_Bank3_R_BASE: u32 = 1375748224;
pub const FMC_Bank5_6_R_BASE: u32 = 1375748416;
pub const DBGMCU_BASE: u32 = 1543507968;
pub const MDMA_Channel0_BASE: u32 = 1375731776;
pub const MDMA_Channel1_BASE: u32 = 1375731840;
pub const MDMA_Channel2_BASE: u32 = 1375731904;
pub const MDMA_Channel3_BASE: u32 = 1375731968;
pub const MDMA_Channel4_BASE: u32 = 1375732032;
pub const MDMA_Channel5_BASE: u32 = 1375732096;
pub const MDMA_Channel6_BASE: u32 = 1375732160;
pub const MDMA_Channel7_BASE: u32 = 1375732224;
pub const MDMA_Channel8_BASE: u32 = 1375732288;
pub const MDMA_Channel9_BASE: u32 = 1375732352;
pub const MDMA_Channel10_BASE: u32 = 1375732416;
pub const MDMA_Channel11_BASE: u32 = 1375732480;
pub const MDMA_Channel12_BASE: u32 = 1375732544;
pub const MDMA_Channel13_BASE: u32 = 1375732608;
pub const MDMA_Channel14_BASE: u32 = 1375732672;
pub const MDMA_Channel15_BASE: u32 = 1375732736;
pub const RAMECC1_Monitor1_BASE: u32 = 1375768608;
pub const RAMECC1_Monitor2_BASE: u32 = 1375768640;
pub const RAMECC1_Monitor3_BASE: u32 = 1375768672;
pub const RAMECC1_Monitor4_BASE: u32 = 1375768704;
pub const RAMECC1_Monitor5_BASE: u32 = 1375768736;
pub const RAMECC2_Monitor1_BASE: u32 = 1208102944;
pub const RAMECC2_Monitor2_BASE: u32 = 1208102976;
pub const RAMECC2_Monitor3_BASE: u32 = 1208103008;
pub const RAMECC2_Monitor4_BASE: u32 = 1208103040;
pub const RAMECC2_Monitor5_BASE: u32 = 1208103072;
pub const RAMECC3_Monitor1_BASE: u32 = 1476554784;
pub const RAMECC3_Monitor2_BASE: u32 = 1476554816;
pub const USB_OTG_HS_PERIPH_BASE: u32 = 1074003968;
pub const USB_OTG_FS_PERIPH_BASE: u32 = 1074266112;
pub const RCC_CR_HSION_Pos: u32 = 0;
pub const RCC_CR_HSION_Msk: u32 = 1;
pub const RCC_CR_HSION: u32 = 1;
pub const RCC_CR_HSIKERON_Pos: u32 = 1;
pub const RCC_CR_HSIKERON_Msk: u32 = 2;
pub const RCC_CR_HSIKERON: u32 = 2;
pub const RCC_CR_HSIRDY_Pos: u32 = 2;
pub const RCC_CR_HSIRDY_Msk: u32 = 4;
pub const RCC_CR_HSIRDY: u32 = 4;
pub const RCC_CR_HSIDIV_Pos: u32 = 3;
pub const RCC_CR_HSIDIV_Msk: u32 = 24;
pub const RCC_CR_HSIDIV: u32 = 24;
pub const RCC_CR_HSIDIV_1: u32 = 0;
pub const RCC_CR_HSIDIV_2: u32 = 8;
pub const RCC_CR_HSIDIV_4: u32 = 16;
pub const RCC_CR_HSIDIV_8: u32 = 24;
pub const RCC_CR_HSIDIVF_Pos: u32 = 5;
pub const RCC_CR_HSIDIVF_Msk: u32 = 32;
pub const RCC_CR_HSIDIVF: u32 = 32;
pub const RCC_CR_CSION_Pos: u32 = 7;
pub const RCC_CR_CSION_Msk: u32 = 128;
pub const RCC_CR_CSION: u32 = 128;
pub const RCC_CR_CSIRDY_Pos: u32 = 8;
pub const RCC_CR_CSIRDY_Msk: u32 = 256;
pub const RCC_CR_CSIRDY: u32 = 256;
pub const RCC_CR_CSIKERON_Pos: u32 = 9;
pub const RCC_CR_CSIKERON_Msk: u32 = 512;
pub const RCC_CR_CSIKERON: u32 = 512;
pub const RCC_CR_HSI48ON_Pos: u32 = 12;
pub const RCC_CR_HSI48ON_Msk: u32 = 4096;
pub const RCC_CR_HSI48ON: u32 = 4096;
pub const RCC_CR_HSI48RDY_Pos: u32 = 13;
pub const RCC_CR_HSI48RDY_Msk: u32 = 8192;
pub const RCC_CR_HSI48RDY: u32 = 8192;
pub const RCC_CR_D1CKRDY_Pos: u32 = 14;
pub const RCC_CR_D1CKRDY_Msk: u32 = 16384;
pub const RCC_CR_D1CKRDY: u32 = 16384;
pub const RCC_CR_D2CKRDY_Pos: u32 = 15;
pub const RCC_CR_D2CKRDY_Msk: u32 = 32768;
pub const RCC_CR_D2CKRDY: u32 = 32768;
pub const RCC_CR_HSEON_Pos: u32 = 16;
pub const RCC_CR_HSEON_Msk: u32 = 65536;
pub const RCC_CR_HSEON: u32 = 65536;
pub const RCC_CR_HSERDY_Pos: u32 = 17;
pub const RCC_CR_HSERDY_Msk: u32 = 131072;
pub const RCC_CR_HSERDY: u32 = 131072;
pub const RCC_CR_HSEBYP_Pos: u32 = 18;
pub const RCC_CR_HSEBYP_Msk: u32 = 262144;
pub const RCC_CR_HSEBYP: u32 = 262144;
pub const RCC_CR_CSSHSEON_Pos: u32 = 19;
pub const RCC_CR_CSSHSEON_Msk: u32 = 524288;
pub const RCC_CR_CSSHSEON: u32 = 524288;
pub const RCC_CR_PLL1ON_Pos: u32 = 24;
pub const RCC_CR_PLL1ON_Msk: u32 = 16777216;
pub const RCC_CR_PLL1ON: u32 = 16777216;
pub const RCC_CR_PLL1RDY_Pos: u32 = 25;
pub const RCC_CR_PLL1RDY_Msk: u32 = 33554432;
pub const RCC_CR_PLL1RDY: u32 = 33554432;
pub const RCC_CR_PLL2ON_Pos: u32 = 26;
pub const RCC_CR_PLL2ON_Msk: u32 = 67108864;
pub const RCC_CR_PLL2ON: u32 = 67108864;
pub const RCC_CR_PLL2RDY_Pos: u32 = 27;
pub const RCC_CR_PLL2RDY_Msk: u32 = 134217728;
pub const RCC_CR_PLL2RDY: u32 = 134217728;
pub const RCC_CR_PLL3ON_Pos: u32 = 28;
pub const RCC_CR_PLL3ON_Msk: u32 = 268435456;
pub const RCC_CR_PLL3ON: u32 = 268435456;
pub const RCC_CR_PLL3RDY_Pos: u32 = 29;
pub const RCC_CR_PLL3RDY_Msk: u32 = 536870912;
pub const RCC_CR_PLL3RDY: u32 = 536870912;
pub const RCC_CR_PLLON_Pos: u32 = 24;
pub const RCC_CR_PLLON_Msk: u32 = 16777216;
pub const RCC_CR_PLLON: u32 = 16777216;
pub const RCC_CR_PLLRDY_Pos: u32 = 25;
pub const RCC_CR_PLLRDY_Msk: u32 = 33554432;
pub const RCC_CR_PLLRDY: u32 = 33554432;
pub const RCC_HSICFGR_HSICAL_Pos: u32 = 0;
pub const RCC_HSICFGR_HSICAL_Msk: u32 = 4095;
pub const RCC_HSICFGR_HSICAL: u32 = 4095;
pub const RCC_HSICFGR_HSICAL_0: u32 = 1;
pub const RCC_HSICFGR_HSICAL_1: u32 = 2;
pub const RCC_HSICFGR_HSICAL_2: u32 = 4;
pub const RCC_HSICFGR_HSICAL_3: u32 = 8;
pub const RCC_HSICFGR_HSICAL_4: u32 = 16;
pub const RCC_HSICFGR_HSICAL_5: u32 = 32;
pub const RCC_HSICFGR_HSICAL_6: u32 = 64;
pub const RCC_HSICFGR_HSICAL_7: u32 = 128;
pub const RCC_HSICFGR_HSICAL_8: u32 = 256;
pub const RCC_HSICFGR_HSICAL_9: u32 = 512;
pub const RCC_HSICFGR_HSICAL_10: u32 = 1024;
pub const RCC_HSICFGR_HSICAL_11: u32 = 2048;
pub const RCC_HSICFGR_HSITRIM_Pos: u32 = 24;
pub const RCC_HSICFGR_HSITRIM_Msk: u32 = 2130706432;
pub const RCC_HSICFGR_HSITRIM: u32 = 2130706432;
pub const RCC_HSICFGR_HSITRIM_0: u32 = 16777216;
pub const RCC_HSICFGR_HSITRIM_1: u32 = 33554432;
pub const RCC_HSICFGR_HSITRIM_2: u32 = 67108864;
pub const RCC_HSICFGR_HSITRIM_3: u32 = 134217728;
pub const RCC_HSICFGR_HSITRIM_4: u32 = 268435456;
pub const RCC_HSICFGR_HSITRIM_5: u32 = 536870912;
pub const RCC_HSICFGR_HSITRIM_6: u32 = 1073741824;
pub const RCC_CRRCR_HSI48CAL_Pos: u32 = 0;
pub const RCC_CRRCR_HSI48CAL_Msk: u32 = 1023;
pub const RCC_CRRCR_HSI48CAL: u32 = 1023;
pub const RCC_CRRCR_HSI48CAL_0: u32 = 1;
pub const RCC_CRRCR_HSI48CAL_1: u32 = 2;
pub const RCC_CRRCR_HSI48CAL_2: u32 = 4;
pub const RCC_CRRCR_HSI48CAL_3: u32 = 8;
pub const RCC_CRRCR_HSI48CAL_4: u32 = 16;
pub const RCC_CRRCR_HSI48CAL_5: u32 = 32;
pub const RCC_CRRCR_HSI48CAL_6: u32 = 64;
pub const RCC_CRRCR_HSI48CAL_7: u32 = 128;
pub const RCC_CRRCR_HSI48CAL_8: u32 = 256;
pub const RCC_CRRCR_HSI48CAL_9: u32 = 512;
pub const RCC_CSICFGR_CSICAL_Pos: u32 = 0;
pub const RCC_CSICFGR_CSICAL_Msk: u32 = 255;
pub const RCC_CSICFGR_CSICAL: u32 = 255;
pub const RCC_CSICFGR_CSICAL_0: u32 = 1;
pub const RCC_CSICFGR_CSICAL_1: u32 = 2;
pub const RCC_CSICFGR_CSICAL_2: u32 = 4;
pub const RCC_CSICFGR_CSICAL_3: u32 = 8;
pub const RCC_CSICFGR_CSICAL_4: u32 = 16;
pub const RCC_CSICFGR_CSICAL_5: u32 = 32;
pub const RCC_CSICFGR_CSICAL_6: u32 = 64;
pub const RCC_CSICFGR_CSICAL_7: u32 = 128;
pub const RCC_CSICFGR_CSITRIM_Pos: u32 = 24;
pub const RCC_CSICFGR_CSITRIM_Msk: u32 = 1056964608;
pub const RCC_CSICFGR_CSITRIM: u32 = 1056964608;
pub const RCC_CSICFGR_CSITRIM_0: u32 = 16777216;
pub const RCC_CSICFGR_CSITRIM_1: u32 = 33554432;
pub const RCC_CSICFGR_CSITRIM_2: u32 = 67108864;
pub const RCC_CSICFGR_CSITRIM_3: u32 = 134217728;
pub const RCC_CSICFGR_CSITRIM_4: u32 = 268435456;
pub const RCC_CSICFGR_CSITRIM_5: u32 = 536870912;
pub const RCC_CFGR_SW_Pos: u32 = 0;
pub const RCC_CFGR_SW_Msk: u32 = 7;
pub const RCC_CFGR_SW: u32 = 7;
pub const RCC_CFGR_SW_0: u32 = 1;
pub const RCC_CFGR_SW_1: u32 = 2;
pub const RCC_CFGR_SW_2: u32 = 4;
pub const RCC_CFGR_SW_HSI: u32 = 0;
pub const RCC_CFGR_SW_CSI: u32 = 1;
pub const RCC_CFGR_SW_HSE: u32 = 2;
pub const RCC_CFGR_SW_PLL1: u32 = 3;
pub const RCC_CFGR_SWS_Pos: u32 = 3;
pub const RCC_CFGR_SWS_Msk: u32 = 56;
pub const RCC_CFGR_SWS: u32 = 56;
pub const RCC_CFGR_SWS_0: u32 = 8;
pub const RCC_CFGR_SWS_1: u32 = 16;
pub const RCC_CFGR_SWS_2: u32 = 32;
pub const RCC_CFGR_SWS_HSI: u32 = 0;
pub const RCC_CFGR_SWS_CSI: u32 = 8;
pub const RCC_CFGR_SWS_HSE: u32 = 16;
pub const RCC_CFGR_SWS_PLL1: u32 = 24;
pub const RCC_CFGR_STOPWUCK_Pos: u32 = 6;
pub const RCC_CFGR_STOPWUCK_Msk: u32 = 64;
pub const RCC_CFGR_STOPWUCK: u32 = 64;
pub const RCC_CFGR_STOPKERWUCK_Pos: u32 = 7;
pub const RCC_CFGR_STOPKERWUCK_Msk: u32 = 128;
pub const RCC_CFGR_STOPKERWUCK: u32 = 128;
pub const RCC_CFGR_RTCPRE_Pos: u32 = 8;
pub const RCC_CFGR_RTCPRE_Msk: u32 = 16128;
pub const RCC_CFGR_RTCPRE: u32 = 16128;
pub const RCC_CFGR_RTCPRE_0: u32 = 256;
pub const RCC_CFGR_RTCPRE_1: u32 = 512;
pub const RCC_CFGR_RTCPRE_2: u32 = 1024;
pub const RCC_CFGR_RTCPRE_3: u32 = 2048;
pub const RCC_CFGR_RTCPRE_4: u32 = 4096;
pub const RCC_CFGR_RTCPRE_5: u32 = 8192;
pub const RCC_CFGR_HRTIMSEL_Pos: u32 = 14;
pub const RCC_CFGR_HRTIMSEL_Msk: u32 = 16384;
pub const RCC_CFGR_HRTIMSEL: u32 = 16384;
pub const RCC_CFGR_TIMPRE_Pos: u32 = 15;
pub const RCC_CFGR_TIMPRE_Msk: u32 = 32768;
pub const RCC_CFGR_TIMPRE: u32 = 32768;
pub const RCC_CFGR_MCO1_Pos: u32 = 22;
pub const RCC_CFGR_MCO1_Msk: u32 = 29360128;
pub const RCC_CFGR_MCO1: u32 = 29360128;
pub const RCC_CFGR_MCO1_0: u32 = 4194304;
pub const RCC_CFGR_MCO1_1: u32 = 8388608;
pub const RCC_CFGR_MCO1_2: u32 = 16777216;
pub const RCC_CFGR_MCO1PRE_Pos: u32 = 18;
pub const RCC_CFGR_MCO1PRE_Msk: u32 = 3932160;
pub const RCC_CFGR_MCO1PRE: u32 = 3932160;
pub const RCC_CFGR_MCO1PRE_0: u32 = 262144;
pub const RCC_CFGR_MCO1PRE_1: u32 = 524288;
pub const RCC_CFGR_MCO1PRE_2: u32 = 1048576;
pub const RCC_CFGR_MCO1PRE_3: u32 = 2097152;
pub const RCC_CFGR_MCO2PRE_Pos: u32 = 25;
pub const RCC_CFGR_MCO2PRE_Msk: u32 = 503316480;
pub const RCC_CFGR_MCO2PRE: u32 = 503316480;
pub const RCC_CFGR_MCO2PRE_0: u32 = 33554432;
pub const RCC_CFGR_MCO2PRE_1: u32 = 67108864;
pub const RCC_CFGR_MCO2PRE_2: u32 = 134217728;
pub const RCC_CFGR_MCO2PRE_3: u32 = 268435456;
pub const RCC_CFGR_MCO2_Pos: u32 = 29;
pub const RCC_CFGR_MCO2_Msk: u32 = 3758096384;
pub const RCC_CFGR_MCO2: u32 = 3758096384;
pub const RCC_CFGR_MCO2_0: u32 = 536870912;
pub const RCC_CFGR_MCO2_1: u32 = 1073741824;
pub const RCC_CFGR_MCO2_2: u32 = 2147483648;
pub const RCC_D1CFGR_HPRE_Pos: u32 = 0;
pub const RCC_D1CFGR_HPRE_Msk: u32 = 15;
pub const RCC_D1CFGR_HPRE: u32 = 15;
pub const RCC_D1CFGR_HPRE_0: u32 = 1;
pub const RCC_D1CFGR_HPRE_1: u32 = 2;
pub const RCC_D1CFGR_HPRE_2: u32 = 4;
pub const RCC_D1CFGR_HPRE_3: u32 = 8;
pub const RCC_D1CFGR_HPRE_DIV2_Pos: u32 = 3;
pub const RCC_D1CFGR_HPRE_DIV2_Msk: u32 = 8;
pub const RCC_D1CFGR_HPRE_DIV2: u32 = 8;
pub const RCC_D1CFGR_HPRE_DIV4_Pos: u32 = 0;
pub const RCC_D1CFGR_HPRE_DIV4_Msk: u32 = 9;
pub const RCC_D1CFGR_HPRE_DIV4: u32 = 9;
pub const RCC_D1CFGR_HPRE_DIV8_Pos: u32 = 1;
pub const RCC_D1CFGR_HPRE_DIV8_Msk: u32 = 10;
pub const RCC_D1CFGR_HPRE_DIV8: u32 = 10;
pub const RCC_D1CFGR_HPRE_DIV16_Pos: u32 = 0;
pub const RCC_D1CFGR_HPRE_DIV16_Msk: u32 = 11;
pub const RCC_D1CFGR_HPRE_DIV16: u32 = 11;
pub const RCC_D1CFGR_HPRE_DIV64_Pos: u32 = 2;
pub const RCC_D1CFGR_HPRE_DIV64_Msk: u32 = 12;
pub const RCC_D1CFGR_HPRE_DIV64: u32 = 12;
pub const RCC_D1CFGR_HPRE_DIV128_Pos: u32 = 0;
pub const RCC_D1CFGR_HPRE_DIV128_Msk: u32 = 13;
pub const RCC_D1CFGR_HPRE_DIV128: u32 = 13;
pub const RCC_D1CFGR_HPRE_DIV256_Pos: u32 = 1;
pub const RCC_D1CFGR_HPRE_DIV256_Msk: u32 = 14;
pub const RCC_D1CFGR_HPRE_DIV256: u32 = 14;
pub const RCC_D1CFGR_HPRE_DIV512_Pos: u32 = 0;
pub const RCC_D1CFGR_HPRE_DIV512_Msk: u32 = 15;
pub const RCC_D1CFGR_HPRE_DIV512: u32 = 15;
pub const RCC_D1CFGR_D1PPRE_Pos: u32 = 4;
pub const RCC_D1CFGR_D1PPRE_Msk: u32 = 112;
pub const RCC_D1CFGR_D1PPRE: u32 = 112;
pub const RCC_D1CFGR_D1PPRE_0: u32 = 16;
pub const RCC_D1CFGR_D1PPRE_1: u32 = 32;
pub const RCC_D1CFGR_D1PPRE_2: u32 = 64;
pub const RCC_D1CFGR_D1PPRE_DIV2_Pos: u32 = 6;
pub const RCC_D1CFGR_D1PPRE_DIV2_Msk: u32 = 64;
pub const RCC_D1CFGR_D1PPRE_DIV2: u32 = 64;
pub const RCC_D1CFGR_D1PPRE_DIV4_Pos: u32 = 4;
pub const RCC_D1CFGR_D1PPRE_DIV4_Msk: u32 = 80;
pub const RCC_D1CFGR_D1PPRE_DIV4: u32 = 80;
pub const RCC_D1CFGR_D1PPRE_DIV8_Pos: u32 = 5;
pub const RCC_D1CFGR_D1PPRE_DIV8_Msk: u32 = 96;
pub const RCC_D1CFGR_D1PPRE_DIV8: u32 = 96;
pub const RCC_D1CFGR_D1PPRE_DIV16_Pos: u32 = 4;
pub const RCC_D1CFGR_D1PPRE_DIV16_Msk: u32 = 112;
pub const RCC_D1CFGR_D1PPRE_DIV16: u32 = 112;
pub const RCC_D1CFGR_D1CPRE_Pos: u32 = 8;
pub const RCC_D1CFGR_D1CPRE_Msk: u32 = 3840;
pub const RCC_D1CFGR_D1CPRE: u32 = 3840;
pub const RCC_D1CFGR_D1CPRE_0: u32 = 256;
pub const RCC_D1CFGR_D1CPRE_1: u32 = 512;
pub const RCC_D1CFGR_D1CPRE_2: u32 = 1024;
pub const RCC_D1CFGR_D1CPRE_3: u32 = 2048;
pub const RCC_D1CFGR_D1CPRE_DIV2_Pos: u32 = 11;
pub const RCC_D1CFGR_D1CPRE_DIV2_Msk: u32 = 2048;
pub const RCC_D1CFGR_D1CPRE_DIV2: u32 = 2048;
pub const RCC_D1CFGR_D1CPRE_DIV4_Pos: u32 = 8;
pub const RCC_D1CFGR_D1CPRE_DIV4_Msk: u32 = 2304;
pub const RCC_D1CFGR_D1CPRE_DIV4: u32 = 2304;
pub const RCC_D1CFGR_D1CPRE_DIV8_Pos: u32 = 9;
pub const RCC_D1CFGR_D1CPRE_DIV8_Msk: u32 = 2560;
pub const RCC_D1CFGR_D1CPRE_DIV8: u32 = 2560;
pub const RCC_D1CFGR_D1CPRE_DIV16_Pos: u32 = 8;
pub const RCC_D1CFGR_D1CPRE_DIV16_Msk: u32 = 2816;
pub const RCC_D1CFGR_D1CPRE_DIV16: u32 = 2816;
pub const RCC_D1CFGR_D1CPRE_DIV64_Pos: u32 = 10;
pub const RCC_D1CFGR_D1CPRE_DIV64_Msk: u32 = 3072;
pub const RCC_D1CFGR_D1CPRE_DIV64: u32 = 3072;
pub const RCC_D1CFGR_D1CPRE_DIV128_Pos: u32 = 8;
pub const RCC_D1CFGR_D1CPRE_DIV128_Msk: u32 = 3328;
pub const RCC_D1CFGR_D1CPRE_DIV128: u32 = 3328;
pub const RCC_D1CFGR_D1CPRE_DIV256_Pos: u32 = 9;
pub const RCC_D1CFGR_D1CPRE_DIV256_Msk: u32 = 3584;
pub const RCC_D1CFGR_D1CPRE_DIV256: u32 = 3584;
pub const RCC_D1CFGR_D1CPRE_DIV512_Pos: u32 = 8;
pub const RCC_D1CFGR_D1CPRE_DIV512_Msk: u32 = 3840;
pub const RCC_D1CFGR_D1CPRE_DIV512: u32 = 3840;
pub const RCC_D2CFGR_D2PPRE1_Pos: u32 = 4;
pub const RCC_D2CFGR_D2PPRE1_Msk: u32 = 112;
pub const RCC_D2CFGR_D2PPRE1: u32 = 112;
pub const RCC_D2CFGR_D2PPRE1_0: u32 = 16;
pub const RCC_D2CFGR_D2PPRE1_1: u32 = 32;
pub const RCC_D2CFGR_D2PPRE1_2: u32 = 64;
pub const RCC_D2CFGR_D2PPRE1_DIV2_Pos: u32 = 6;
pub const RCC_D2CFGR_D2PPRE1_DIV2_Msk: u32 = 64;
pub const RCC_D2CFGR_D2PPRE1_DIV2: u32 = 64;
pub const RCC_D2CFGR_D2PPRE1_DIV4_Pos: u32 = 4;
pub const RCC_D2CFGR_D2PPRE1_DIV4_Msk: u32 = 80;
pub const RCC_D2CFGR_D2PPRE1_DIV4: u32 = 80;
pub const RCC_D2CFGR_D2PPRE1_DIV8_Pos: u32 = 5;
pub const RCC_D2CFGR_D2PPRE1_DIV8_Msk: u32 = 96;
pub const RCC_D2CFGR_D2PPRE1_DIV8: u32 = 96;
pub const RCC_D2CFGR_D2PPRE1_DIV16_Pos: u32 = 4;
pub const RCC_D2CFGR_D2PPRE1_DIV16_Msk: u32 = 112;
pub const RCC_D2CFGR_D2PPRE1_DIV16: u32 = 112;
pub const RCC_D2CFGR_D2PPRE2_Pos: u32 = 8;
pub const RCC_D2CFGR_D2PPRE2_Msk: u32 = 1792;
pub const RCC_D2CFGR_D2PPRE2: u32 = 1792;
pub const RCC_D2CFGR_D2PPRE2_0: u32 = 256;
pub const RCC_D2CFGR_D2PPRE2_1: u32 = 512;
pub const RCC_D2CFGR_D2PPRE2_2: u32 = 1024;
pub const RCC_D2CFGR_D2PPRE2_DIV2_Pos: u32 = 10;
pub const RCC_D2CFGR_D2PPRE2_DIV2_Msk: u32 = 1024;
pub const RCC_D2CFGR_D2PPRE2_DIV2: u32 = 1024;
pub const RCC_D2CFGR_D2PPRE2_DIV4_Pos: u32 = 8;
pub const RCC_D2CFGR_D2PPRE2_DIV4_Msk: u32 = 1280;
pub const RCC_D2CFGR_D2PPRE2_DIV4: u32 = 1280;
pub const RCC_D2CFGR_D2PPRE2_DIV8_Pos: u32 = 9;
pub const RCC_D2CFGR_D2PPRE2_DIV8_Msk: u32 = 1536;
pub const RCC_D2CFGR_D2PPRE2_DIV8: u32 = 1536;
pub const RCC_D2CFGR_D2PPRE2_DIV16_Pos: u32 = 8;
pub const RCC_D2CFGR_D2PPRE2_DIV16_Msk: u32 = 1792;
pub const RCC_D2CFGR_D2PPRE2_DIV16: u32 = 1792;
pub const RCC_D3CFGR_D3PPRE_Pos: u32 = 4;
pub const RCC_D3CFGR_D3PPRE_Msk: u32 = 112;
pub const RCC_D3CFGR_D3PPRE: u32 = 112;
pub const RCC_D3CFGR_D3PPRE_0: u32 = 16;
pub const RCC_D3CFGR_D3PPRE_1: u32 = 32;
pub const RCC_D3CFGR_D3PPRE_2: u32 = 64;
pub const RCC_D3CFGR_D3PPRE_DIV2_Pos: u32 = 6;
pub const RCC_D3CFGR_D3PPRE_DIV2_Msk: u32 = 64;
pub const RCC_D3CFGR_D3PPRE_DIV2: u32 = 64;
pub const RCC_D3CFGR_D3PPRE_DIV4_Pos: u32 = 4;
pub const RCC_D3CFGR_D3PPRE_DIV4_Msk: u32 = 80;
pub const RCC_D3CFGR_D3PPRE_DIV4: u32 = 80;
pub const RCC_D3CFGR_D3PPRE_DIV8_Pos: u32 = 5;
pub const RCC_D3CFGR_D3PPRE_DIV8_Msk: u32 = 96;
pub const RCC_D3CFGR_D3PPRE_DIV8: u32 = 96;
pub const RCC_D3CFGR_D3PPRE_DIV16_Pos: u32 = 4;
pub const RCC_D3CFGR_D3PPRE_DIV16_Msk: u32 = 112;
pub const RCC_D3CFGR_D3PPRE_DIV16: u32 = 112;
pub const RCC_PLLCKSELR_PLLSRC_Pos: u32 = 0;
pub const RCC_PLLCKSELR_PLLSRC_Msk: u32 = 3;
pub const RCC_PLLCKSELR_PLLSRC: u32 = 3;
pub const RCC_PLLCKSELR_PLLSRC_CSI_Pos: u32 = 0;
pub const RCC_PLLCKSELR_PLLSRC_CSI_Msk: u32 = 1;
pub const RCC_PLLCKSELR_PLLSRC_CSI: u32 = 1;
pub const RCC_PLLCKSELR_PLLSRC_HSE_Pos: u32 = 1;
pub const RCC_PLLCKSELR_PLLSRC_HSE_Msk: u32 = 2;
pub const RCC_PLLCKSELR_PLLSRC_HSE: u32 = 2;
pub const RCC_PLLCKSELR_PLLSRC_NONE_Pos: u32 = 0;
pub const RCC_PLLCKSELR_PLLSRC_NONE_Msk: u32 = 3;
pub const RCC_PLLCKSELR_PLLSRC_NONE: u32 = 3;
pub const RCC_PLLCKSELR_DIVM1_Pos: u32 = 4;
pub const RCC_PLLCKSELR_DIVM1_Msk: u32 = 1008;
pub const RCC_PLLCKSELR_DIVM1: u32 = 1008;
pub const RCC_PLLCKSELR_DIVM1_0: u32 = 16;
pub const RCC_PLLCKSELR_DIVM1_1: u32 = 32;
pub const RCC_PLLCKSELR_DIVM1_2: u32 = 64;
pub const RCC_PLLCKSELR_DIVM1_3: u32 = 128;
pub const RCC_PLLCKSELR_DIVM1_4: u32 = 256;
pub const RCC_PLLCKSELR_DIVM1_5: u32 = 512;
pub const RCC_PLLCKSELR_DIVM2_Pos: u32 = 12;
pub const RCC_PLLCKSELR_DIVM2_Msk: u32 = 258048;
pub const RCC_PLLCKSELR_DIVM2: u32 = 258048;
pub const RCC_PLLCKSELR_DIVM2_0: u32 = 4096;
pub const RCC_PLLCKSELR_DIVM2_1: u32 = 8192;
pub const RCC_PLLCKSELR_DIVM2_2: u32 = 16384;
pub const RCC_PLLCKSELR_DIVM2_3: u32 = 32768;
pub const RCC_PLLCKSELR_DIVM2_4: u32 = 65536;
pub const RCC_PLLCKSELR_DIVM2_5: u32 = 131072;
pub const RCC_PLLCKSELR_DIVM3_Pos: u32 = 20;
pub const RCC_PLLCKSELR_DIVM3_Msk: u32 = 66060288;
pub const RCC_PLLCKSELR_DIVM3: u32 = 66060288;
pub const RCC_PLLCKSELR_DIVM3_0: u32 = 1048576;
pub const RCC_PLLCKSELR_DIVM3_1: u32 = 2097152;
pub const RCC_PLLCKSELR_DIVM3_2: u32 = 4194304;
pub const RCC_PLLCKSELR_DIVM3_3: u32 = 8388608;
pub const RCC_PLLCKSELR_DIVM3_4: u32 = 16777216;
pub const RCC_PLLCKSELR_DIVM3_5: u32 = 33554432;
pub const RCC_PLLCFGR_PLL1FRACEN_Pos: u32 = 0;
pub const RCC_PLLCFGR_PLL1FRACEN_Msk: u32 = 1;
pub const RCC_PLLCFGR_PLL1FRACEN: u32 = 1;
pub const RCC_PLLCFGR_PLL1VCOSEL_Pos: u32 = 1;
pub const RCC_PLLCFGR_PLL1VCOSEL_Msk: u32 = 2;
pub const RCC_PLLCFGR_PLL1VCOSEL: u32 = 2;
pub const RCC_PLLCFGR_PLL1RGE_Pos: u32 = 2;
pub const RCC_PLLCFGR_PLL1RGE_Msk: u32 = 12;
pub const RCC_PLLCFGR_PLL1RGE: u32 = 12;
pub const RCC_PLLCFGR_PLL1RGE_0: u32 = 0;
pub const RCC_PLLCFGR_PLL1RGE_1: u32 = 4;
pub const RCC_PLLCFGR_PLL1RGE_2: u32 = 8;
pub const RCC_PLLCFGR_PLL1RGE_3: u32 = 12;
pub const RCC_PLLCFGR_PLL2FRACEN_Pos: u32 = 4;
pub const RCC_PLLCFGR_PLL2FRACEN_Msk: u32 = 16;
pub const RCC_PLLCFGR_PLL2FRACEN: u32 = 16;
pub const RCC_PLLCFGR_PLL2VCOSEL_Pos: u32 = 5;
pub const RCC_PLLCFGR_PLL2VCOSEL_Msk: u32 = 32;
pub const RCC_PLLCFGR_PLL2VCOSEL: u32 = 32;
pub const RCC_PLLCFGR_PLL2RGE_Pos: u32 = 6;
pub const RCC_PLLCFGR_PLL2RGE_Msk: u32 = 192;
pub const RCC_PLLCFGR_PLL2RGE: u32 = 192;
pub const RCC_PLLCFGR_PLL2RGE_0: u32 = 0;
pub const RCC_PLLCFGR_PLL2RGE_1: u32 = 64;
pub const RCC_PLLCFGR_PLL2RGE_2: u32 = 128;
pub const RCC_PLLCFGR_PLL2RGE_3: u32 = 192;
pub const RCC_PLLCFGR_PLL3FRACEN_Pos: u32 = 8;
pub const RCC_PLLCFGR_PLL3FRACEN_Msk: u32 = 256;
pub const RCC_PLLCFGR_PLL3FRACEN: u32 = 256;
pub const RCC_PLLCFGR_PLL3VCOSEL_Pos: u32 = 9;
pub const RCC_PLLCFGR_PLL3VCOSEL_Msk: u32 = 512;
pub const RCC_PLLCFGR_PLL3VCOSEL: u32 = 512;
pub const RCC_PLLCFGR_PLL3RGE_Pos: u32 = 10;
pub const RCC_PLLCFGR_PLL3RGE_Msk: u32 = 3072;
pub const RCC_PLLCFGR_PLL3RGE: u32 = 3072;
pub const RCC_PLLCFGR_PLL3RGE_0: u32 = 0;
pub const RCC_PLLCFGR_PLL3RGE_1: u32 = 1024;
pub const RCC_PLLCFGR_PLL3RGE_2: u32 = 2048;
pub const RCC_PLLCFGR_PLL3RGE_3: u32 = 3072;
pub const RCC_PLLCFGR_DIVP1EN_Pos: u32 = 16;
pub const RCC_PLLCFGR_DIVP1EN_Msk: u32 = 65536;
pub const RCC_PLLCFGR_DIVP1EN: u32 = 65536;
pub const RCC_PLLCFGR_DIVQ1EN_Pos: u32 = 17;
pub const RCC_PLLCFGR_DIVQ1EN_Msk: u32 = 131072;
pub const RCC_PLLCFGR_DIVQ1EN: u32 = 131072;
pub const RCC_PLLCFGR_DIVR1EN_Pos: u32 = 18;
pub const RCC_PLLCFGR_DIVR1EN_Msk: u32 = 262144;
pub const RCC_PLLCFGR_DIVR1EN: u32 = 262144;
pub const RCC_PLLCFGR_DIVP2EN_Pos: u32 = 19;
pub const RCC_PLLCFGR_DIVP2EN_Msk: u32 = 524288;
pub const RCC_PLLCFGR_DIVP2EN: u32 = 524288;
pub const RCC_PLLCFGR_DIVQ2EN_Pos: u32 = 20;
pub const RCC_PLLCFGR_DIVQ2EN_Msk: u32 = 1048576;
pub const RCC_PLLCFGR_DIVQ2EN: u32 = 1048576;
pub const RCC_PLLCFGR_DIVR2EN_Pos: u32 = 21;
pub const RCC_PLLCFGR_DIVR2EN_Msk: u32 = 2097152;
pub const RCC_PLLCFGR_DIVR2EN: u32 = 2097152;
pub const RCC_PLLCFGR_DIVP3EN_Pos: u32 = 22;
pub const RCC_PLLCFGR_DIVP3EN_Msk: u32 = 4194304;
pub const RCC_PLLCFGR_DIVP3EN: u32 = 4194304;
pub const RCC_PLLCFGR_DIVQ3EN_Pos: u32 = 23;
pub const RCC_PLLCFGR_DIVQ3EN_Msk: u32 = 8388608;
pub const RCC_PLLCFGR_DIVQ3EN: u32 = 8388608;
pub const RCC_PLLCFGR_DIVR3EN_Pos: u32 = 24;
pub const RCC_PLLCFGR_DIVR3EN_Msk: u32 = 16777216;
pub const RCC_PLLCFGR_DIVR3EN: u32 = 16777216;
pub const RCC_PLL1DIVR_N1_Pos: u32 = 0;
pub const RCC_PLL1DIVR_N1_Msk: u32 = 511;
pub const RCC_PLL1DIVR_N1: u32 = 511;
pub const RCC_PLL1DIVR_P1_Pos: u32 = 9;
pub const RCC_PLL1DIVR_P1_Msk: u32 = 65024;
pub const RCC_PLL1DIVR_P1: u32 = 65024;
pub const RCC_PLL1DIVR_Q1_Pos: u32 = 16;
pub const RCC_PLL1DIVR_Q1_Msk: u32 = 8323072;
pub const RCC_PLL1DIVR_Q1: u32 = 8323072;
pub const RCC_PLL1DIVR_R1_Pos: u32 = 24;
pub const RCC_PLL1DIVR_R1_Msk: u32 = 2130706432;
pub const RCC_PLL1DIVR_R1: u32 = 2130706432;
pub const RCC_PLL1FRACR_FRACN1_Pos: u32 = 3;
pub const RCC_PLL1FRACR_FRACN1_Msk: u32 = 65528;
pub const RCC_PLL1FRACR_FRACN1: u32 = 65528;
pub const RCC_PLL2DIVR_N2_Pos: u32 = 0;
pub const RCC_PLL2DIVR_N2_Msk: u32 = 511;
pub const RCC_PLL2DIVR_N2: u32 = 511;
pub const RCC_PLL2DIVR_P2_Pos: u32 = 9;
pub const RCC_PLL2DIVR_P2_Msk: u32 = 65024;
pub const RCC_PLL2DIVR_P2: u32 = 65024;
pub const RCC_PLL2DIVR_Q2_Pos: u32 = 16;
pub const RCC_PLL2DIVR_Q2_Msk: u32 = 8323072;
pub const RCC_PLL2DIVR_Q2: u32 = 8323072;
pub const RCC_PLL2DIVR_R2_Pos: u32 = 24;
pub const RCC_PLL2DIVR_R2_Msk: u32 = 2130706432;
pub const RCC_PLL2DIVR_R2: u32 = 2130706432;
pub const RCC_PLL2FRACR_FRACN2_Pos: u32 = 3;
pub const RCC_PLL2FRACR_FRACN2_Msk: u32 = 65528;
pub const RCC_PLL2FRACR_FRACN2: u32 = 65528;
pub const RCC_PLL3DIVR_N3_Pos: u32 = 0;
pub const RCC_PLL3DIVR_N3_Msk: u32 = 511;
pub const RCC_PLL3DIVR_N3: u32 = 511;
pub const RCC_PLL3DIVR_P3_Pos: u32 = 9;
pub const RCC_PLL3DIVR_P3_Msk: u32 = 65024;
pub const RCC_PLL3DIVR_P3: u32 = 65024;
pub const RCC_PLL3DIVR_Q3_Pos: u32 = 16;
pub const RCC_PLL3DIVR_Q3_Msk: u32 = 8323072;
pub const RCC_PLL3DIVR_Q3: u32 = 8323072;
pub const RCC_PLL3DIVR_R3_Pos: u32 = 24;
pub const RCC_PLL3DIVR_R3_Msk: u32 = 2130706432;
pub const RCC_PLL3DIVR_R3: u32 = 2130706432;
pub const RCC_PLL3FRACR_FRACN3_Pos: u32 = 3;
pub const RCC_PLL3FRACR_FRACN3_Msk: u32 = 65528;
pub const RCC_PLL3FRACR_FRACN3: u32 = 65528;
pub const RCC_D1CCIPR_FMCSEL_Pos: u32 = 0;
pub const RCC_D1CCIPR_FMCSEL_Msk: u32 = 3;
pub const RCC_D1CCIPR_FMCSEL: u32 = 3;
pub const RCC_D1CCIPR_FMCSEL_0: u32 = 1;
pub const RCC_D1CCIPR_FMCSEL_1: u32 = 2;
pub const RCC_D1CCIPR_QSPISEL_Pos: u32 = 4;
pub const RCC_D1CCIPR_QSPISEL_Msk: u32 = 48;
pub const RCC_D1CCIPR_QSPISEL: u32 = 48;
pub const RCC_D1CCIPR_QSPISEL_0: u32 = 16;
pub const RCC_D1CCIPR_QSPISEL_1: u32 = 32;
pub const RCC_D1CCIPR_SDMMCSEL_Pos: u32 = 16;
pub const RCC_D1CCIPR_SDMMCSEL_Msk: u32 = 65536;
pub const RCC_D1CCIPR_SDMMCSEL: u32 = 65536;
pub const RCC_D1CCIPR_CKPERSEL_Pos: u32 = 28;
pub const RCC_D1CCIPR_CKPERSEL_Msk: u32 = 805306368;
pub const RCC_D1CCIPR_CKPERSEL: u32 = 805306368;
pub const RCC_D1CCIPR_CKPERSEL_0: u32 = 268435456;
pub const RCC_D1CCIPR_CKPERSEL_1: u32 = 536870912;
pub const RCC_D2CCIP1R_SAI1SEL_Pos: u32 = 0;
pub const RCC_D2CCIP1R_SAI1SEL_Msk: u32 = 7;
pub const RCC_D2CCIP1R_SAI1SEL: u32 = 7;
pub const RCC_D2CCIP1R_SAI1SEL_0: u32 = 1;
pub const RCC_D2CCIP1R_SAI1SEL_1: u32 = 2;
pub const RCC_D2CCIP1R_SAI1SEL_2: u32 = 4;
pub const RCC_D2CCIP1R_SAI23SEL_Pos: u32 = 6;
pub const RCC_D2CCIP1R_SAI23SEL_Msk: u32 = 448;
pub const RCC_D2CCIP1R_SAI23SEL: u32 = 448;
pub const RCC_D2CCIP1R_SAI23SEL_0: u32 = 64;
pub const RCC_D2CCIP1R_SAI23SEL_1: u32 = 128;
pub const RCC_D2CCIP1R_SAI23SEL_2: u32 = 256;
pub const RCC_D2CCIP1R_SPI123SEL_Pos: u32 = 12;
pub const RCC_D2CCIP1R_SPI123SEL_Msk: u32 = 28672;
pub const RCC_D2CCIP1R_SPI123SEL: u32 = 28672;
pub const RCC_D2CCIP1R_SPI123SEL_0: u32 = 4096;
pub const RCC_D2CCIP1R_SPI123SEL_1: u32 = 8192;
pub const RCC_D2CCIP1R_SPI123SEL_2: u32 = 16384;
pub const RCC_D2CCIP1R_SPI45SEL_Pos: u32 = 16;
pub const RCC_D2CCIP1R_SPI45SEL_Msk: u32 = 458752;
pub const RCC_D2CCIP1R_SPI45SEL: u32 = 458752;
pub const RCC_D2CCIP1R_SPI45SEL_0: u32 = 65536;
pub const RCC_D2CCIP1R_SPI45SEL_1: u32 = 131072;
pub const RCC_D2CCIP1R_SPI45SEL_2: u32 = 262144;
pub const RCC_D2CCIP1R_SPDIFSEL_Pos: u32 = 20;
pub const RCC_D2CCIP1R_SPDIFSEL_Msk: u32 = 3145728;
pub const RCC_D2CCIP1R_SPDIFSEL: u32 = 3145728;
pub const RCC_D2CCIP1R_SPDIFSEL_0: u32 = 1048576;
pub const RCC_D2CCIP1R_SPDIFSEL_1: u32 = 2097152;
pub const RCC_D2CCIP1R_DFSDM1SEL_Pos: u32 = 24;
pub const RCC_D2CCIP1R_DFSDM1SEL_Msk: u32 = 16777216;
pub const RCC_D2CCIP1R_DFSDM1SEL: u32 = 16777216;
pub const RCC_D2CCIP1R_FDCANSEL_Pos: u32 = 28;
pub const RCC_D2CCIP1R_FDCANSEL_Msk: u32 = 805306368;
pub const RCC_D2CCIP1R_FDCANSEL: u32 = 805306368;
pub const RCC_D2CCIP1R_FDCANSEL_0: u32 = 268435456;
pub const RCC_D2CCIP1R_FDCANSEL_1: u32 = 536870912;
pub const RCC_D2CCIP1R_SWPSEL_Pos: u32 = 31;
pub const RCC_D2CCIP1R_SWPSEL_Msk: u32 = 2147483648;
pub const RCC_D2CCIP1R_SWPSEL: u32 = 2147483648;
pub const RCC_D2CCIP2R_USART16SEL_Pos: u32 = 3;
pub const RCC_D2CCIP2R_USART16SEL_Msk: u32 = 56;
pub const RCC_D2CCIP2R_USART16SEL: u32 = 56;
pub const RCC_D2CCIP2R_USART16SEL_0: u32 = 8;
pub const RCC_D2CCIP2R_USART16SEL_1: u32 = 16;
pub const RCC_D2CCIP2R_USART16SEL_2: u32 = 32;
pub const RCC_D2CCIP2R_USART28SEL_Pos: u32 = 0;
pub const RCC_D2CCIP2R_USART28SEL_Msk: u32 = 7;
pub const RCC_D2CCIP2R_USART28SEL: u32 = 7;
pub const RCC_D2CCIP2R_USART28SEL_0: u32 = 1;
pub const RCC_D2CCIP2R_USART28SEL_1: u32 = 2;
pub const RCC_D2CCIP2R_USART28SEL_2: u32 = 4;
pub const RCC_D2CCIP2R_RNGSEL_Pos: u32 = 8;
pub const RCC_D2CCIP2R_RNGSEL_Msk: u32 = 768;
pub const RCC_D2CCIP2R_RNGSEL: u32 = 768;
pub const RCC_D2CCIP2R_RNGSEL_0: u32 = 256;
pub const RCC_D2CCIP2R_RNGSEL_1: u32 = 512;
pub const RCC_D2CCIP2R_I2C123SEL_Pos: u32 = 12;
pub const RCC_D2CCIP2R_I2C123SEL_Msk: u32 = 12288;
pub const RCC_D2CCIP2R_I2C123SEL: u32 = 12288;
pub const RCC_D2CCIP2R_I2C123SEL_0: u32 = 4096;
pub const RCC_D2CCIP2R_I2C123SEL_1: u32 = 8192;
pub const RCC_D2CCIP2R_USBSEL_Pos: u32 = 20;
pub const RCC_D2CCIP2R_USBSEL_Msk: u32 = 3145728;
pub const RCC_D2CCIP2R_USBSEL: u32 = 3145728;
pub const RCC_D2CCIP2R_USBSEL_0: u32 = 1048576;
pub const RCC_D2CCIP2R_USBSEL_1: u32 = 2097152;
pub const RCC_D2CCIP2R_CECSEL_Pos: u32 = 22;
pub const RCC_D2CCIP2R_CECSEL_Msk: u32 = 12582912;
pub const RCC_D2CCIP2R_CECSEL: u32 = 12582912;
pub const RCC_D2CCIP2R_CECSEL_0: u32 = 4194304;
pub const RCC_D2CCIP2R_CECSEL_1: u32 = 8388608;
pub const RCC_D2CCIP2R_LPTIM1SEL_Pos: u32 = 28;
pub const RCC_D2CCIP2R_LPTIM1SEL_Msk: u32 = 1879048192;
pub const RCC_D2CCIP2R_LPTIM1SEL: u32 = 1879048192;
pub const RCC_D2CCIP2R_LPTIM1SEL_0: u32 = 268435456;
pub const RCC_D2CCIP2R_LPTIM1SEL_1: u32 = 536870912;
pub const RCC_D2CCIP2R_LPTIM1SEL_2: u32 = 1073741824;
pub const RCC_D3CCIPR_LPUART1SEL_Pos: u32 = 0;
pub const RCC_D3CCIPR_LPUART1SEL_Msk: u32 = 7;
pub const RCC_D3CCIPR_LPUART1SEL: u32 = 7;
pub const RCC_D3CCIPR_LPUART1SEL_0: u32 = 1;
pub const RCC_D3CCIPR_LPUART1SEL_1: u32 = 2;
pub const RCC_D3CCIPR_LPUART1SEL_2: u32 = 4;
pub const RCC_D3CCIPR_I2C4SEL_Pos: u32 = 8;
pub const RCC_D3CCIPR_I2C4SEL_Msk: u32 = 768;
pub const RCC_D3CCIPR_I2C4SEL: u32 = 768;
pub const RCC_D3CCIPR_I2C4SEL_0: u32 = 256;
pub const RCC_D3CCIPR_I2C4SEL_1: u32 = 512;
pub const RCC_D3CCIPR_LPTIM2SEL_Pos: u32 = 10;
pub const RCC_D3CCIPR_LPTIM2SEL_Msk: u32 = 7168;
pub const RCC_D3CCIPR_LPTIM2SEL: u32 = 7168;
pub const RCC_D3CCIPR_LPTIM2SEL_0: u32 = 1024;
pub const RCC_D3CCIPR_LPTIM2SEL_1: u32 = 2048;
pub const RCC_D3CCIPR_LPTIM2SEL_2: u32 = 4096;
pub const RCC_D3CCIPR_LPTIM345SEL_Pos: u32 = 13;
pub const RCC_D3CCIPR_LPTIM345SEL_Msk: u32 = 57344;
pub const RCC_D3CCIPR_LPTIM345SEL: u32 = 57344;
pub const RCC_D3CCIPR_LPTIM345SEL_0: u32 = 8192;
pub const RCC_D3CCIPR_LPTIM345SEL_1: u32 = 16384;
pub const RCC_D3CCIPR_LPTIM345SEL_2: u32 = 32768;
pub const RCC_D3CCIPR_SAI4ASEL_Pos: u32 = 21;
pub const RCC_D3CCIPR_SAI4ASEL_Msk: u32 = 14680064;
pub const RCC_D3CCIPR_SAI4ASEL: u32 = 14680064;
pub const RCC_D3CCIPR_SAI4ASEL_0: u32 = 2097152;
pub const RCC_D3CCIPR_SAI4ASEL_1: u32 = 4194304;
pub const RCC_D3CCIPR_SAI4ASEL_2: u32 = 8388608;
pub const RCC_D3CCIPR_SAI4BSEL_Pos: u32 = 24;
pub const RCC_D3CCIPR_SAI4BSEL_Msk: u32 = 117440512;
pub const RCC_D3CCIPR_SAI4BSEL: u32 = 117440512;
pub const RCC_D3CCIPR_SAI4BSEL_0: u32 = 16777216;
pub const RCC_D3CCIPR_SAI4BSEL_1: u32 = 33554432;
pub const RCC_D3CCIPR_SAI4BSEL_2: u32 = 67108864;
pub const RCC_D3CCIPR_ADCSEL_Pos: u32 = 16;
pub const RCC_D3CCIPR_ADCSEL_Msk: u32 = 196608;
pub const RCC_D3CCIPR_ADCSEL: u32 = 196608;
pub const RCC_D3CCIPR_ADCSEL_0: u32 = 65536;
pub const RCC_D3CCIPR_ADCSEL_1: u32 = 131072;
pub const RCC_D3CCIPR_SPI6SEL_Pos: u32 = 28;
pub const RCC_D3CCIPR_SPI6SEL_Msk: u32 = 1879048192;
pub const RCC_D3CCIPR_SPI6SEL: u32 = 1879048192;
pub const RCC_D3CCIPR_SPI6SEL_0: u32 = 268435456;
pub const RCC_D3CCIPR_SPI6SEL_1: u32 = 536870912;
pub const RCC_D3CCIPR_SPI6SEL_2: u32 = 1073741824;
pub const RCC_CIER_LSIRDYIE_Pos: u32 = 0;
pub const RCC_CIER_LSIRDYIE_Msk: u32 = 1;
pub const RCC_CIER_LSIRDYIE: u32 = 1;
pub const RCC_CIER_LSERDYIE_Pos: u32 = 1;
pub const RCC_CIER_LSERDYIE_Msk: u32 = 2;
pub const RCC_CIER_LSERDYIE: u32 = 2;
pub const RCC_CIER_HSIRDYIE_Pos: u32 = 2;
pub const RCC_CIER_HSIRDYIE_Msk: u32 = 4;
pub const RCC_CIER_HSIRDYIE: u32 = 4;
pub const RCC_CIER_HSERDYIE_Pos: u32 = 3;
pub const RCC_CIER_HSERDYIE_Msk: u32 = 8;
pub const RCC_CIER_HSERDYIE: u32 = 8;
pub const RCC_CIER_CSIRDYIE_Pos: u32 = 4;
pub const RCC_CIER_CSIRDYIE_Msk: u32 = 16;
pub const RCC_CIER_CSIRDYIE: u32 = 16;
pub const RCC_CIER_HSI48RDYIE_Pos: u32 = 5;
pub const RCC_CIER_HSI48RDYIE_Msk: u32 = 32;
pub const RCC_CIER_HSI48RDYIE: u32 = 32;
pub const RCC_CIER_PLL1RDYIE_Pos: u32 = 6;
pub const RCC_CIER_PLL1RDYIE_Msk: u32 = 64;
pub const RCC_CIER_PLL1RDYIE: u32 = 64;
pub const RCC_CIER_PLL2RDYIE_Pos: u32 = 7;
pub const RCC_CIER_PLL2RDYIE_Msk: u32 = 128;
pub const RCC_CIER_PLL2RDYIE: u32 = 128;
pub const RCC_CIER_PLL3RDYIE_Pos: u32 = 8;
pub const RCC_CIER_PLL3RDYIE_Msk: u32 = 256;
pub const RCC_CIER_PLL3RDYIE: u32 = 256;
pub const RCC_CIER_LSECSSIE_Pos: u32 = 9;
pub const RCC_CIER_LSECSSIE_Msk: u32 = 512;
pub const RCC_CIER_LSECSSIE: u32 = 512;
pub const RCC_CIFR_LSIRDYF_Pos: u32 = 0;
pub const RCC_CIFR_LSIRDYF_Msk: u32 = 1;
pub const RCC_CIFR_LSIRDYF: u32 = 1;
pub const RCC_CIFR_LSERDYF_Pos: u32 = 1;
pub const RCC_CIFR_LSERDYF_Msk: u32 = 2;
pub const RCC_CIFR_LSERDYF: u32 = 2;
pub const RCC_CIFR_HSIRDYF_Pos: u32 = 2;
pub const RCC_CIFR_HSIRDYF_Msk: u32 = 4;
pub const RCC_CIFR_HSIRDYF: u32 = 4;
pub const RCC_CIFR_HSERDYF_Pos: u32 = 3;
pub const RCC_CIFR_HSERDYF_Msk: u32 = 8;
pub const RCC_CIFR_HSERDYF: u32 = 8;
pub const RCC_CIFR_CSIRDYF_Pos: u32 = 4;
pub const RCC_CIFR_CSIRDYF_Msk: u32 = 16;
pub const RCC_CIFR_CSIRDYF: u32 = 16;
pub const RCC_CIFR_HSI48RDYF_Pos: u32 = 5;
pub const RCC_CIFR_HSI48RDYF_Msk: u32 = 32;
pub const RCC_CIFR_HSI48RDYF: u32 = 32;
pub const RCC_CIFR_PLLRDYF_Pos: u32 = 6;
pub const RCC_CIFR_PLLRDYF_Msk: u32 = 64;
pub const RCC_CIFR_PLLRDYF: u32 = 64;
pub const RCC_CIFR_PLL2RDYF_Pos: u32 = 7;
pub const RCC_CIFR_PLL2RDYF_Msk: u32 = 128;
pub const RCC_CIFR_PLL2RDYF: u32 = 128;
pub const RCC_CIFR_PLL3RDYF_Pos: u32 = 8;
pub const RCC_CIFR_PLL3RDYF_Msk: u32 = 256;
pub const RCC_CIFR_PLL3RDYF: u32 = 256;
pub const RCC_CIFR_LSECSSF_Pos: u32 = 9;
pub const RCC_CIFR_LSECSSF_Msk: u32 = 512;
pub const RCC_CIFR_LSECSSF: u32 = 512;
pub const RCC_CIFR_HSECSSF_Pos: u32 = 10;
pub const RCC_CIFR_HSECSSF_Msk: u32 = 1024;
pub const RCC_CIFR_HSECSSF: u32 = 1024;
pub const RCC_CICR_LSIRDYC_Pos: u32 = 0;
pub const RCC_CICR_LSIRDYC_Msk: u32 = 1;
pub const RCC_CICR_LSIRDYC: u32 = 1;
pub const RCC_CICR_LSERDYC_Pos: u32 = 1;
pub const RCC_CICR_LSERDYC_Msk: u32 = 2;
pub const RCC_CICR_LSERDYC: u32 = 2;
pub const RCC_CICR_HSIRDYC_Pos: u32 = 2;
pub const RCC_CICR_HSIRDYC_Msk: u32 = 4;
pub const RCC_CICR_HSIRDYC: u32 = 4;
pub const RCC_CICR_HSERDYC_Pos: u32 = 3;
pub const RCC_CICR_HSERDYC_Msk: u32 = 8;
pub const RCC_CICR_HSERDYC: u32 = 8;
pub const RCC_CICR_CSIRDYC_Pos: u32 = 4;
pub const RCC_CICR_CSIRDYC_Msk: u32 = 16;
pub const RCC_CICR_CSIRDYC: u32 = 16;
pub const RCC_CICR_HSI48RDYC_Pos: u32 = 5;
pub const RCC_CICR_HSI48RDYC_Msk: u32 = 32;
pub const RCC_CICR_HSI48RDYC: u32 = 32;
pub const RCC_CICR_PLLRDYC_Pos: u32 = 6;
pub const RCC_CICR_PLLRDYC_Msk: u32 = 64;
pub const RCC_CICR_PLLRDYC: u32 = 64;
pub const RCC_CICR_PLL2RDYC_Pos: u32 = 7;
pub const RCC_CICR_PLL2RDYC_Msk: u32 = 128;
pub const RCC_CICR_PLL2RDYC: u32 = 128;
pub const RCC_CICR_PLL3RDYC_Pos: u32 = 8;
pub const RCC_CICR_PLL3RDYC_Msk: u32 = 256;
pub const RCC_CICR_PLL3RDYC: u32 = 256;
pub const RCC_CICR_LSECSSC_Pos: u32 = 9;
pub const RCC_CICR_LSECSSC_Msk: u32 = 512;
pub const RCC_CICR_LSECSSC: u32 = 512;
pub const RCC_CICR_HSECSSC_Pos: u32 = 10;
pub const RCC_CICR_HSECSSC_Msk: u32 = 1024;
pub const RCC_CICR_HSECSSC: u32 = 1024;
pub const RCC_BDCR_LSEON_Pos: u32 = 0;
pub const RCC_BDCR_LSEON_Msk: u32 = 1;
pub const RCC_BDCR_LSEON: u32 = 1;
pub const RCC_BDCR_LSERDY_Pos: u32 = 1;
pub const RCC_BDCR_LSERDY_Msk: u32 = 2;
pub const RCC_BDCR_LSERDY: u32 = 2;
pub const RCC_BDCR_LSEBYP_Pos: u32 = 2;
pub const RCC_BDCR_LSEBYP_Msk: u32 = 4;
pub const RCC_BDCR_LSEBYP: u32 = 4;
pub const RCC_BDCR_LSEDRV_Pos: u32 = 3;
pub const RCC_BDCR_LSEDRV_Msk: u32 = 24;
pub const RCC_BDCR_LSEDRV: u32 = 24;
pub const RCC_BDCR_LSEDRV_0: u32 = 8;
pub const RCC_BDCR_LSEDRV_1: u32 = 16;
pub const RCC_BDCR_LSECSSON_Pos: u32 = 5;
pub const RCC_BDCR_LSECSSON_Msk: u32 = 32;
pub const RCC_BDCR_LSECSSON: u32 = 32;
pub const RCC_BDCR_LSECSSD_Pos: u32 = 6;
pub const RCC_BDCR_LSECSSD_Msk: u32 = 64;
pub const RCC_BDCR_LSECSSD: u32 = 64;
pub const RCC_BDCR_RTCSEL_Pos: u32 = 8;
pub const RCC_BDCR_RTCSEL_Msk: u32 = 768;
pub const RCC_BDCR_RTCSEL: u32 = 768;
pub const RCC_BDCR_RTCSEL_0: u32 = 256;
pub const RCC_BDCR_RTCSEL_1: u32 = 512;
pub const RCC_BDCR_RTCEN_Pos: u32 = 15;
pub const RCC_BDCR_RTCEN_Msk: u32 = 32768;
pub const RCC_BDCR_RTCEN: u32 = 32768;
pub const RCC_BDCR_BDRST_Pos: u32 = 16;
pub const RCC_BDCR_BDRST_Msk: u32 = 65536;
pub const RCC_BDCR_BDRST: u32 = 65536;
pub const RCC_CSR_LSION_Pos: u32 = 0;
pub const RCC_CSR_LSION_Msk: u32 = 1;
pub const RCC_CSR_LSION: u32 = 1;
pub const RCC_CSR_LSIRDY_Pos: u32 = 1;
pub const RCC_CSR_LSIRDY_Msk: u32 = 2;
pub const RCC_CSR_LSIRDY: u32 = 2;
pub const RCC_AHB3ENR_MDMAEN_Pos: u32 = 0;
pub const RCC_AHB3ENR_MDMAEN_Msk: u32 = 1;
pub const RCC_AHB3ENR_MDMAEN: u32 = 1;
pub const RCC_AHB3ENR_DMA2DEN_Pos: u32 = 4;
pub const RCC_AHB3ENR_DMA2DEN_Msk: u32 = 16;
pub const RCC_AHB3ENR_DMA2DEN: u32 = 16;
pub const RCC_AHB3ENR_JPGDECEN_Pos: u32 = 5;
pub const RCC_AHB3ENR_JPGDECEN_Msk: u32 = 32;
pub const RCC_AHB3ENR_JPGDECEN: u32 = 32;
pub const RCC_AHB3ENR_FMCEN_Pos: u32 = 12;
pub const RCC_AHB3ENR_FMCEN_Msk: u32 = 4096;
pub const RCC_AHB3ENR_FMCEN: u32 = 4096;
pub const RCC_AHB3ENR_QSPIEN_Pos: u32 = 14;
pub const RCC_AHB3ENR_QSPIEN_Msk: u32 = 16384;
pub const RCC_AHB3ENR_QSPIEN: u32 = 16384;
pub const RCC_AHB3ENR_SDMMC1EN_Pos: u32 = 16;
pub const RCC_AHB3ENR_SDMMC1EN_Msk: u32 = 65536;
pub const RCC_AHB3ENR_SDMMC1EN: u32 = 65536;
pub const RCC_AHB1ENR_DMA1EN_Pos: u32 = 0;
pub const RCC_AHB1ENR_DMA1EN_Msk: u32 = 1;
pub const RCC_AHB1ENR_DMA1EN: u32 = 1;
pub const RCC_AHB1ENR_DMA2EN_Pos: u32 = 1;
pub const RCC_AHB1ENR_DMA2EN_Msk: u32 = 2;
pub const RCC_AHB1ENR_DMA2EN: u32 = 2;
pub const RCC_AHB1ENR_ADC12EN_Pos: u32 = 5;
pub const RCC_AHB1ENR_ADC12EN_Msk: u32 = 32;
pub const RCC_AHB1ENR_ADC12EN: u32 = 32;
pub const RCC_AHB1ENR_ETH1MACEN_Pos: u32 = 15;
pub const RCC_AHB1ENR_ETH1MACEN_Msk: u32 = 32768;
pub const RCC_AHB1ENR_ETH1MACEN: u32 = 32768;
pub const RCC_AHB1ENR_ETH1TXEN_Pos: u32 = 16;
pub const RCC_AHB1ENR_ETH1TXEN_Msk: u32 = 65536;
pub const RCC_AHB1ENR_ETH1TXEN: u32 = 65536;
pub const RCC_AHB1ENR_ETH1RXEN_Pos: u32 = 17;
pub const RCC_AHB1ENR_ETH1RXEN_Msk: u32 = 131072;
pub const RCC_AHB1ENR_ETH1RXEN: u32 = 131072;
pub const RCC_AHB1ENR_USB1OTGHSEN_Pos: u32 = 25;
pub const RCC_AHB1ENR_USB1OTGHSEN_Msk: u32 = 33554432;
pub const RCC_AHB1ENR_USB1OTGHSEN: u32 = 33554432;
pub const RCC_AHB1ENR_USB1OTGHSULPIEN_Pos: u32 = 26;
pub const RCC_AHB1ENR_USB1OTGHSULPIEN_Msk: u32 = 67108864;
pub const RCC_AHB1ENR_USB1OTGHSULPIEN: u32 = 67108864;
pub const RCC_AHB1ENR_USB2OTGFSEN_Pos: u32 = 27;
pub const RCC_AHB1ENR_USB2OTGFSEN_Msk: u32 = 134217728;
pub const RCC_AHB1ENR_USB2OTGFSEN: u32 = 134217728;
pub const RCC_AHB1ENR_USB2OTGFSULPIEN_Pos: u32 = 28;
pub const RCC_AHB1ENR_USB2OTGFSULPIEN_Msk: u32 = 268435456;
pub const RCC_AHB1ENR_USB2OTGFSULPIEN: u32 = 268435456;
pub const RCC_AHB1ENR_USB2OTGHSEN_Pos: u32 = 27;
pub const RCC_AHB1ENR_USB2OTGHSEN_Msk: u32 = 134217728;
pub const RCC_AHB1ENR_USB2OTGHSEN: u32 = 134217728;
pub const RCC_AHB1ENR_USB2OTGHSULPIEN_Pos: u32 = 28;
pub const RCC_AHB1ENR_USB2OTGHSULPIEN_Msk: u32 = 268435456;
pub const RCC_AHB1ENR_USB2OTGHSULPIEN: u32 = 268435456;
pub const RCC_AHB2ENR_DCMIEN_Pos: u32 = 0;
pub const RCC_AHB2ENR_DCMIEN_Msk: u32 = 1;
pub const RCC_AHB2ENR_DCMIEN: u32 = 1;
pub const RCC_AHB2ENR_CRYPEN_Pos: u32 = 4;
pub const RCC_AHB2ENR_CRYPEN_Msk: u32 = 16;
pub const RCC_AHB2ENR_CRYPEN: u32 = 16;
pub const RCC_AHB2ENR_HASHEN_Pos: u32 = 5;
pub const RCC_AHB2ENR_HASHEN_Msk: u32 = 32;
pub const RCC_AHB2ENR_HASHEN: u32 = 32;
pub const RCC_AHB2ENR_RNGEN_Pos: u32 = 6;
pub const RCC_AHB2ENR_RNGEN_Msk: u32 = 64;
pub const RCC_AHB2ENR_RNGEN: u32 = 64;
pub const RCC_AHB2ENR_SDMMC2EN_Pos: u32 = 9;
pub const RCC_AHB2ENR_SDMMC2EN_Msk: u32 = 512;
pub const RCC_AHB2ENR_SDMMC2EN: u32 = 512;
pub const RCC_AHB2ENR_SRAM1EN_Pos: u32 = 29;
pub const RCC_AHB2ENR_SRAM1EN_Msk: u32 = 536870912;
pub const RCC_AHB2ENR_SRAM1EN: u32 = 536870912;
pub const RCC_AHB2ENR_SRAM2EN_Pos: u32 = 30;
pub const RCC_AHB2ENR_SRAM2EN_Msk: u32 = 1073741824;
pub const RCC_AHB2ENR_SRAM2EN: u32 = 1073741824;
pub const RCC_AHB2ENR_SRAM3EN_Pos: u32 = 31;
pub const RCC_AHB2ENR_SRAM3EN_Msk: u32 = 2147483648;
pub const RCC_AHB2ENR_SRAM3EN: u32 = 2147483648;
pub const RCC_AHB2ENR_D2SRAM1EN_Pos: u32 = 29;
pub const RCC_AHB2ENR_D2SRAM1EN_Msk: u32 = 536870912;
pub const RCC_AHB2ENR_D2SRAM1EN: u32 = 536870912;
pub const RCC_AHB2ENR_D2SRAM2EN_Pos: u32 = 30;
pub const RCC_AHB2ENR_D2SRAM2EN_Msk: u32 = 1073741824;
pub const RCC_AHB2ENR_D2SRAM2EN: u32 = 1073741824;
pub const RCC_AHB2ENR_D2SRAM3EN_Pos: u32 = 31;
pub const RCC_AHB2ENR_D2SRAM3EN_Msk: u32 = 2147483648;
pub const RCC_AHB2ENR_D2SRAM3EN: u32 = 2147483648;
pub const RCC_AHB4ENR_GPIOAEN_Pos: u32 = 0;
pub const RCC_AHB4ENR_GPIOAEN_Msk: u32 = 1;
pub const RCC_AHB4ENR_GPIOAEN: u32 = 1;
pub const RCC_AHB4ENR_GPIOBEN_Pos: u32 = 1;
pub const RCC_AHB4ENR_GPIOBEN_Msk: u32 = 2;
pub const RCC_AHB4ENR_GPIOBEN: u32 = 2;
pub const RCC_AHB4ENR_GPIOCEN_Pos: u32 = 2;
pub const RCC_AHB4ENR_GPIOCEN_Msk: u32 = 4;
pub const RCC_AHB4ENR_GPIOCEN: u32 = 4;
pub const RCC_AHB4ENR_GPIODEN_Pos: u32 = 3;
pub const RCC_AHB4ENR_GPIODEN_Msk: u32 = 8;
pub const RCC_AHB4ENR_GPIODEN: u32 = 8;
pub const RCC_AHB4ENR_GPIOEEN_Pos: u32 = 4;
pub const RCC_AHB4ENR_GPIOEEN_Msk: u32 = 16;
pub const RCC_AHB4ENR_GPIOEEN: u32 = 16;
pub const RCC_AHB4ENR_GPIOFEN_Pos: u32 = 5;
pub const RCC_AHB4ENR_GPIOFEN_Msk: u32 = 32;
pub const RCC_AHB4ENR_GPIOFEN: u32 = 32;
pub const RCC_AHB4ENR_GPIOGEN_Pos: u32 = 6;
pub const RCC_AHB4ENR_GPIOGEN_Msk: u32 = 64;
pub const RCC_AHB4ENR_GPIOGEN: u32 = 64;
pub const RCC_AHB4ENR_GPIOHEN_Pos: u32 = 7;
pub const RCC_AHB4ENR_GPIOHEN_Msk: u32 = 128;
pub const RCC_AHB4ENR_GPIOHEN: u32 = 128;
pub const RCC_AHB4ENR_GPIOIEN_Pos: u32 = 8;
pub const RCC_AHB4ENR_GPIOIEN_Msk: u32 = 256;
pub const RCC_AHB4ENR_GPIOIEN: u32 = 256;
pub const RCC_AHB4ENR_GPIOJEN_Pos: u32 = 9;
pub const RCC_AHB4ENR_GPIOJEN_Msk: u32 = 512;
pub const RCC_AHB4ENR_GPIOJEN: u32 = 512;
pub const RCC_AHB4ENR_GPIOKEN_Pos: u32 = 10;
pub const RCC_AHB4ENR_GPIOKEN_Msk: u32 = 1024;
pub const RCC_AHB4ENR_GPIOKEN: u32 = 1024;
pub const RCC_AHB4ENR_CRCEN_Pos: u32 = 19;
pub const RCC_AHB4ENR_CRCEN_Msk: u32 = 524288;
pub const RCC_AHB4ENR_CRCEN: u32 = 524288;
pub const RCC_AHB4ENR_BDMAEN_Pos: u32 = 21;
pub const RCC_AHB4ENR_BDMAEN_Msk: u32 = 2097152;
pub const RCC_AHB4ENR_BDMAEN: u32 = 2097152;
pub const RCC_AHB4ENR_ADC3EN_Pos: u32 = 24;
pub const RCC_AHB4ENR_ADC3EN_Msk: u32 = 16777216;
pub const RCC_AHB4ENR_ADC3EN: u32 = 16777216;
pub const RCC_AHB4ENR_HSEMEN_Pos: u32 = 25;
pub const RCC_AHB4ENR_HSEMEN_Msk: u32 = 33554432;
pub const RCC_AHB4ENR_HSEMEN: u32 = 33554432;
pub const RCC_AHB4ENR_BKPRAMEN_Pos: u32 = 28;
pub const RCC_AHB4ENR_BKPRAMEN_Msk: u32 = 268435456;
pub const RCC_AHB4ENR_BKPRAMEN: u32 = 268435456;
pub const RCC_APB3ENR_LTDCEN_Pos: u32 = 3;
pub const RCC_APB3ENR_LTDCEN_Msk: u32 = 8;
pub const RCC_APB3ENR_LTDCEN: u32 = 8;
pub const RCC_APB3ENR_WWDG1EN_Pos: u32 = 6;
pub const RCC_APB3ENR_WWDG1EN_Msk: u32 = 64;
pub const RCC_APB3ENR_WWDG1EN: u32 = 64;
pub const RCC_APB1LENR_TIM2EN_Pos: u32 = 0;
pub const RCC_APB1LENR_TIM2EN_Msk: u32 = 1;
pub const RCC_APB1LENR_TIM2EN: u32 = 1;
pub const RCC_APB1LENR_TIM3EN_Pos: u32 = 1;
pub const RCC_APB1LENR_TIM3EN_Msk: u32 = 2;
pub const RCC_APB1LENR_TIM3EN: u32 = 2;
pub const RCC_APB1LENR_TIM4EN_Pos: u32 = 2;
pub const RCC_APB1LENR_TIM4EN_Msk: u32 = 4;
pub const RCC_APB1LENR_TIM4EN: u32 = 4;
pub const RCC_APB1LENR_TIM5EN_Pos: u32 = 3;
pub const RCC_APB1LENR_TIM5EN_Msk: u32 = 8;
pub const RCC_APB1LENR_TIM5EN: u32 = 8;
pub const RCC_APB1LENR_TIM6EN_Pos: u32 = 4;
pub const RCC_APB1LENR_TIM6EN_Msk: u32 = 16;
pub const RCC_APB1LENR_TIM6EN: u32 = 16;
pub const RCC_APB1LENR_TIM7EN_Pos: u32 = 5;
pub const RCC_APB1LENR_TIM7EN_Msk: u32 = 32;
pub const RCC_APB1LENR_TIM7EN: u32 = 32;
pub const RCC_APB1LENR_TIM12EN_Pos: u32 = 6;
pub const RCC_APB1LENR_TIM12EN_Msk: u32 = 64;
pub const RCC_APB1LENR_TIM12EN: u32 = 64;
pub const RCC_APB1LENR_TIM13EN_Pos: u32 = 7;
pub const RCC_APB1LENR_TIM13EN_Msk: u32 = 128;
pub const RCC_APB1LENR_TIM13EN: u32 = 128;
pub const RCC_APB1LENR_TIM14EN_Pos: u32 = 8;
pub const RCC_APB1LENR_TIM14EN_Msk: u32 = 256;
pub const RCC_APB1LENR_TIM14EN: u32 = 256;
pub const RCC_APB1LENR_LPTIM1EN_Pos: u32 = 9;
pub const RCC_APB1LENR_LPTIM1EN_Msk: u32 = 512;
pub const RCC_APB1LENR_LPTIM1EN: u32 = 512;
pub const RCC_APB1LENR_SPI2EN_Pos: u32 = 14;
pub const RCC_APB1LENR_SPI2EN_Msk: u32 = 16384;
pub const RCC_APB1LENR_SPI2EN: u32 = 16384;
pub const RCC_APB1LENR_SPI3EN_Pos: u32 = 15;
pub const RCC_APB1LENR_SPI3EN_Msk: u32 = 32768;
pub const RCC_APB1LENR_SPI3EN: u32 = 32768;
pub const RCC_APB1LENR_SPDIFRXEN_Pos: u32 = 16;
pub const RCC_APB1LENR_SPDIFRXEN_Msk: u32 = 65536;
pub const RCC_APB1LENR_SPDIFRXEN: u32 = 65536;
pub const RCC_APB1LENR_USART2EN_Pos: u32 = 17;
pub const RCC_APB1LENR_USART2EN_Msk: u32 = 131072;
pub const RCC_APB1LENR_USART2EN: u32 = 131072;
pub const RCC_APB1LENR_USART3EN_Pos: u32 = 18;
pub const RCC_APB1LENR_USART3EN_Msk: u32 = 262144;
pub const RCC_APB1LENR_USART3EN: u32 = 262144;
pub const RCC_APB1LENR_UART4EN_Pos: u32 = 19;
pub const RCC_APB1LENR_UART4EN_Msk: u32 = 524288;
pub const RCC_APB1LENR_UART4EN: u32 = 524288;
pub const RCC_APB1LENR_UART5EN_Pos: u32 = 20;
pub const RCC_APB1LENR_UART5EN_Msk: u32 = 1048576;
pub const RCC_APB1LENR_UART5EN: u32 = 1048576;
pub const RCC_APB1LENR_I2C1EN_Pos: u32 = 21;
pub const RCC_APB1LENR_I2C1EN_Msk: u32 = 2097152;
pub const RCC_APB1LENR_I2C1EN: u32 = 2097152;
pub const RCC_APB1LENR_I2C2EN_Pos: u32 = 22;
pub const RCC_APB1LENR_I2C2EN_Msk: u32 = 4194304;
pub const RCC_APB1LENR_I2C2EN: u32 = 4194304;
pub const RCC_APB1LENR_I2C3EN_Pos: u32 = 23;
pub const RCC_APB1LENR_I2C3EN_Msk: u32 = 8388608;
pub const RCC_APB1LENR_I2C3EN: u32 = 8388608;
pub const RCC_APB1LENR_CECEN_Pos: u32 = 27;
pub const RCC_APB1LENR_CECEN_Msk: u32 = 134217728;
pub const RCC_APB1LENR_CECEN: u32 = 134217728;
pub const RCC_APB1LENR_DAC12EN_Pos: u32 = 29;
pub const RCC_APB1LENR_DAC12EN_Msk: u32 = 536870912;
pub const RCC_APB1LENR_DAC12EN: u32 = 536870912;
pub const RCC_APB1LENR_UART7EN_Pos: u32 = 30;
pub const RCC_APB1LENR_UART7EN_Msk: u32 = 1073741824;
pub const RCC_APB1LENR_UART7EN: u32 = 1073741824;
pub const RCC_APB1LENR_UART8EN_Pos: u32 = 31;
pub const RCC_APB1LENR_UART8EN_Msk: u32 = 2147483648;
pub const RCC_APB1LENR_UART8EN: u32 = 2147483648;
pub const RCC_APB1LENR_HDMICECEN_Pos: u32 = 27;
pub const RCC_APB1LENR_HDMICECEN_Msk: u32 = 134217728;
pub const RCC_APB1LENR_HDMICECEN: u32 = 134217728;
pub const RCC_APB1HENR_CRSEN_Pos: u32 = 1;
pub const RCC_APB1HENR_CRSEN_Msk: u32 = 2;
pub const RCC_APB1HENR_CRSEN: u32 = 2;
pub const RCC_APB1HENR_SWPMIEN_Pos: u32 = 2;
pub const RCC_APB1HENR_SWPMIEN_Msk: u32 = 4;
pub const RCC_APB1HENR_SWPMIEN: u32 = 4;
pub const RCC_APB1HENR_OPAMPEN_Pos: u32 = 4;
pub const RCC_APB1HENR_OPAMPEN_Msk: u32 = 16;
pub const RCC_APB1HENR_OPAMPEN: u32 = 16;
pub const RCC_APB1HENR_MDIOSEN_Pos: u32 = 5;
pub const RCC_APB1HENR_MDIOSEN_Msk: u32 = 32;
pub const RCC_APB1HENR_MDIOSEN: u32 = 32;
pub const RCC_APB1HENR_FDCANEN_Pos: u32 = 8;
pub const RCC_APB1HENR_FDCANEN_Msk: u32 = 256;
pub const RCC_APB1HENR_FDCANEN: u32 = 256;
pub const RCC_APB2ENR_TIM1EN_Pos: u32 = 0;
pub const RCC_APB2ENR_TIM1EN_Msk: u32 = 1;
pub const RCC_APB2ENR_TIM1EN: u32 = 1;
pub const RCC_APB2ENR_TIM8EN_Pos: u32 = 1;
pub const RCC_APB2ENR_TIM8EN_Msk: u32 = 2;
pub const RCC_APB2ENR_TIM8EN: u32 = 2;
pub const RCC_APB2ENR_USART1EN_Pos: u32 = 4;
pub const RCC_APB2ENR_USART1EN_Msk: u32 = 16;
pub const RCC_APB2ENR_USART1EN: u32 = 16;
pub const RCC_APB2ENR_USART6EN_Pos: u32 = 5;
pub const RCC_APB2ENR_USART6EN_Msk: u32 = 32;
pub const RCC_APB2ENR_USART6EN: u32 = 32;
pub const RCC_APB2ENR_SPI1EN_Pos: u32 = 12;
pub const RCC_APB2ENR_SPI1EN_Msk: u32 = 4096;
pub const RCC_APB2ENR_SPI1EN: u32 = 4096;
pub const RCC_APB2ENR_SPI4EN_Pos: u32 = 13;
pub const RCC_APB2ENR_SPI4EN_Msk: u32 = 8192;
pub const RCC_APB2ENR_SPI4EN: u32 = 8192;
pub const RCC_APB2ENR_TIM15EN_Pos: u32 = 16;
pub const RCC_APB2ENR_TIM15EN_Msk: u32 = 65536;
pub const RCC_APB2ENR_TIM15EN: u32 = 65536;
pub const RCC_APB2ENR_TIM16EN_Pos: u32 = 17;
pub const RCC_APB2ENR_TIM16EN_Msk: u32 = 131072;
pub const RCC_APB2ENR_TIM16EN: u32 = 131072;
pub const RCC_APB2ENR_TIM17EN_Pos: u32 = 18;
pub const RCC_APB2ENR_TIM17EN_Msk: u32 = 262144;
pub const RCC_APB2ENR_TIM17EN: u32 = 262144;
pub const RCC_APB2ENR_SPI5EN_Pos: u32 = 20;
pub const RCC_APB2ENR_SPI5EN_Msk: u32 = 1048576;
pub const RCC_APB2ENR_SPI5EN: u32 = 1048576;
pub const RCC_APB2ENR_SAI1EN_Pos: u32 = 22;
pub const RCC_APB2ENR_SAI1EN_Msk: u32 = 4194304;
pub const RCC_APB2ENR_SAI1EN: u32 = 4194304;
pub const RCC_APB2ENR_SAI2EN_Pos: u32 = 23;
pub const RCC_APB2ENR_SAI2EN_Msk: u32 = 8388608;
pub const RCC_APB2ENR_SAI2EN: u32 = 8388608;
pub const RCC_APB2ENR_SAI3EN_Pos: u32 = 24;
pub const RCC_APB2ENR_SAI3EN_Msk: u32 = 16777216;
pub const RCC_APB2ENR_SAI3EN: u32 = 16777216;
pub const RCC_APB2ENR_DFSDM1EN_Pos: u32 = 28;
pub const RCC_APB2ENR_DFSDM1EN_Msk: u32 = 268435456;
pub const RCC_APB2ENR_DFSDM1EN: u32 = 268435456;
pub const RCC_APB2ENR_HRTIMEN_Pos: u32 = 29;
pub const RCC_APB2ENR_HRTIMEN_Msk: u32 = 536870912;
pub const RCC_APB2ENR_HRTIMEN: u32 = 536870912;
pub const RCC_APB4ENR_SYSCFGEN_Pos: u32 = 1;
pub const RCC_APB4ENR_SYSCFGEN_Msk: u32 = 2;
pub const RCC_APB4ENR_SYSCFGEN: u32 = 2;
pub const RCC_APB4ENR_LPUART1EN_Pos: u32 = 3;
pub const RCC_APB4ENR_LPUART1EN_Msk: u32 = 8;
pub const RCC_APB4ENR_LPUART1EN: u32 = 8;
pub const RCC_APB4ENR_SPI6EN_Pos: u32 = 5;
pub const RCC_APB4ENR_SPI6EN_Msk: u32 = 32;
pub const RCC_APB4ENR_SPI6EN: u32 = 32;
pub const RCC_APB4ENR_I2C4EN_Pos: u32 = 7;
pub const RCC_APB4ENR_I2C4EN_Msk: u32 = 128;
pub const RCC_APB4ENR_I2C4EN: u32 = 128;
pub const RCC_APB4ENR_LPTIM2EN_Pos: u32 = 9;
pub const RCC_APB4ENR_LPTIM2EN_Msk: u32 = 512;
pub const RCC_APB4ENR_LPTIM2EN: u32 = 512;
pub const RCC_APB4ENR_LPTIM3EN_Pos: u32 = 10;
pub const RCC_APB4ENR_LPTIM3EN_Msk: u32 = 1024;
pub const RCC_APB4ENR_LPTIM3EN: u32 = 1024;
pub const RCC_APB4ENR_LPTIM4EN_Pos: u32 = 11;
pub const RCC_APB4ENR_LPTIM4EN_Msk: u32 = 2048;
pub const RCC_APB4ENR_LPTIM4EN: u32 = 2048;
pub const RCC_APB4ENR_LPTIM5EN_Pos: u32 = 12;
pub const RCC_APB4ENR_LPTIM5EN_Msk: u32 = 4096;
pub const RCC_APB4ENR_LPTIM5EN: u32 = 4096;
pub const RCC_APB4ENR_COMP12EN_Pos: u32 = 14;
pub const RCC_APB4ENR_COMP12EN_Msk: u32 = 16384;
pub const RCC_APB4ENR_COMP12EN: u32 = 16384;
pub const RCC_APB4ENR_VREFEN_Pos: u32 = 15;
pub const RCC_APB4ENR_VREFEN_Msk: u32 = 32768;
pub const RCC_APB4ENR_VREFEN: u32 = 32768;
pub const RCC_APB4ENR_RTCAPBEN_Pos: u32 = 16;
pub const RCC_APB4ENR_RTCAPBEN_Msk: u32 = 65536;
pub const RCC_APB4ENR_RTCAPBEN: u32 = 65536;
pub const RCC_APB4ENR_SAI4EN_Pos: u32 = 21;
pub const RCC_APB4ENR_SAI4EN_Msk: u32 = 2097152;
pub const RCC_APB4ENR_SAI4EN: u32 = 2097152;
pub const RCC_AHB3RSTR_MDMARST_Pos: u32 = 0;
pub const RCC_AHB3RSTR_MDMARST_Msk: u32 = 1;
pub const RCC_AHB3RSTR_MDMARST: u32 = 1;
pub const RCC_AHB3RSTR_DMA2DRST_Pos: u32 = 4;
pub const RCC_AHB3RSTR_DMA2DRST_Msk: u32 = 16;
pub const RCC_AHB3RSTR_DMA2DRST: u32 = 16;
pub const RCC_AHB3RSTR_JPGDECRST_Pos: u32 = 5;
pub const RCC_AHB3RSTR_JPGDECRST_Msk: u32 = 32;
pub const RCC_AHB3RSTR_JPGDECRST: u32 = 32;
pub const RCC_AHB3RSTR_FMCRST_Pos: u32 = 12;
pub const RCC_AHB3RSTR_FMCRST_Msk: u32 = 4096;
pub const RCC_AHB3RSTR_FMCRST: u32 = 4096;
pub const RCC_AHB3RSTR_QSPIRST_Pos: u32 = 14;
pub const RCC_AHB3RSTR_QSPIRST_Msk: u32 = 16384;
pub const RCC_AHB3RSTR_QSPIRST: u32 = 16384;
pub const RCC_AHB3RSTR_SDMMC1RST_Pos: u32 = 16;
pub const RCC_AHB3RSTR_SDMMC1RST_Msk: u32 = 65536;
pub const RCC_AHB3RSTR_SDMMC1RST: u32 = 65536;
pub const RCC_AHB1RSTR_DMA1RST_Pos: u32 = 0;
pub const RCC_AHB1RSTR_DMA1RST_Msk: u32 = 1;
pub const RCC_AHB1RSTR_DMA1RST: u32 = 1;
pub const RCC_AHB1RSTR_DMA2RST_Pos: u32 = 1;
pub const RCC_AHB1RSTR_DMA2RST_Msk: u32 = 2;
pub const RCC_AHB1RSTR_DMA2RST: u32 = 2;
pub const RCC_AHB1RSTR_ADC12RST_Pos: u32 = 5;
pub const RCC_AHB1RSTR_ADC12RST_Msk: u32 = 32;
pub const RCC_AHB1RSTR_ADC12RST: u32 = 32;
pub const RCC_AHB1RSTR_ETH1MACRST_Pos: u32 = 15;
pub const RCC_AHB1RSTR_ETH1MACRST_Msk: u32 = 32768;
pub const RCC_AHB1RSTR_ETH1MACRST: u32 = 32768;
pub const RCC_AHB1RSTR_USB1OTGHSRST_Pos: u32 = 25;
pub const RCC_AHB1RSTR_USB1OTGHSRST_Msk: u32 = 33554432;
pub const RCC_AHB1RSTR_USB1OTGHSRST: u32 = 33554432;
pub const RCC_AHB1RSTR_USB2OTGFSRST_Pos: u32 = 27;
pub const RCC_AHB1RSTR_USB2OTGFSRST_Msk: u32 = 134217728;
pub const RCC_AHB1RSTR_USB2OTGFSRST: u32 = 134217728;
pub const RCC_AHB1RSTR_USB2OTGHSRST_Pos: u32 = 27;
pub const RCC_AHB1RSTR_USB2OTGHSRST_Msk: u32 = 134217728;
pub const RCC_AHB1RSTR_USB2OTGHSRST: u32 = 134217728;
pub const RCC_AHB2RSTR_DCMIRST_Pos: u32 = 0;
pub const RCC_AHB2RSTR_DCMIRST_Msk: u32 = 1;
pub const RCC_AHB2RSTR_DCMIRST: u32 = 1;
pub const RCC_AHB2RSTR_CRYPRST_Pos: u32 = 4;
pub const RCC_AHB2RSTR_CRYPRST_Msk: u32 = 16;
pub const RCC_AHB2RSTR_CRYPRST: u32 = 16;
pub const RCC_AHB2RSTR_HASHRST_Pos: u32 = 5;
pub const RCC_AHB2RSTR_HASHRST_Msk: u32 = 32;
pub const RCC_AHB2RSTR_HASHRST: u32 = 32;
pub const RCC_AHB2RSTR_RNGRST_Pos: u32 = 6;
pub const RCC_AHB2RSTR_RNGRST_Msk: u32 = 64;
pub const RCC_AHB2RSTR_RNGRST: u32 = 64;
pub const RCC_AHB2RSTR_SDMMC2RST_Pos: u32 = 9;
pub const RCC_AHB2RSTR_SDMMC2RST_Msk: u32 = 512;
pub const RCC_AHB2RSTR_SDMMC2RST: u32 = 512;
pub const RCC_AHB4RSTR_GPIOARST_Pos: u32 = 0;
pub const RCC_AHB4RSTR_GPIOARST_Msk: u32 = 1;
pub const RCC_AHB4RSTR_GPIOARST: u32 = 1;
pub const RCC_AHB4RSTR_GPIOBRST_Pos: u32 = 1;
pub const RCC_AHB4RSTR_GPIOBRST_Msk: u32 = 2;
pub const RCC_AHB4RSTR_GPIOBRST: u32 = 2;
pub const RCC_AHB4RSTR_GPIOCRST_Pos: u32 = 2;
pub const RCC_AHB4RSTR_GPIOCRST_Msk: u32 = 4;
pub const RCC_AHB4RSTR_GPIOCRST: u32 = 4;
pub const RCC_AHB4RSTR_GPIODRST_Pos: u32 = 3;
pub const RCC_AHB4RSTR_GPIODRST_Msk: u32 = 8;
pub const RCC_AHB4RSTR_GPIODRST: u32 = 8;
pub const RCC_AHB4RSTR_GPIOERST_Pos: u32 = 4;
pub const RCC_AHB4RSTR_GPIOERST_Msk: u32 = 16;
pub const RCC_AHB4RSTR_GPIOERST: u32 = 16;
pub const RCC_AHB4RSTR_GPIOFRST_Pos: u32 = 5;
pub const RCC_AHB4RSTR_GPIOFRST_Msk: u32 = 32;
pub const RCC_AHB4RSTR_GPIOFRST: u32 = 32;
pub const RCC_AHB4RSTR_GPIOGRST_Pos: u32 = 6;
pub const RCC_AHB4RSTR_GPIOGRST_Msk: u32 = 64;
pub const RCC_AHB4RSTR_GPIOGRST: u32 = 64;
pub const RCC_AHB4RSTR_GPIOHRST_Pos: u32 = 7;
pub const RCC_AHB4RSTR_GPIOHRST_Msk: u32 = 128;
pub const RCC_AHB4RSTR_GPIOHRST: u32 = 128;
pub const RCC_AHB4RSTR_GPIOIRST_Pos: u32 = 8;
pub const RCC_AHB4RSTR_GPIOIRST_Msk: u32 = 256;
pub const RCC_AHB4RSTR_GPIOIRST: u32 = 256;
pub const RCC_AHB4RSTR_GPIOJRST_Pos: u32 = 9;
pub const RCC_AHB4RSTR_GPIOJRST_Msk: u32 = 512;
pub const RCC_AHB4RSTR_GPIOJRST: u32 = 512;
pub const RCC_AHB4RSTR_GPIOKRST_Pos: u32 = 10;
pub const RCC_AHB4RSTR_GPIOKRST_Msk: u32 = 1024;
pub const RCC_AHB4RSTR_GPIOKRST: u32 = 1024;
pub const RCC_AHB4RSTR_CRCRST_Pos: u32 = 19;
pub const RCC_AHB4RSTR_CRCRST_Msk: u32 = 524288;
pub const RCC_AHB4RSTR_CRCRST: u32 = 524288;
pub const RCC_AHB4RSTR_BDMARST_Pos: u32 = 21;
pub const RCC_AHB4RSTR_BDMARST_Msk: u32 = 2097152;
pub const RCC_AHB4RSTR_BDMARST: u32 = 2097152;
pub const RCC_AHB4RSTR_ADC3RST_Pos: u32 = 24;
pub const RCC_AHB4RSTR_ADC3RST_Msk: u32 = 16777216;
pub const RCC_AHB4RSTR_ADC3RST: u32 = 16777216;
pub const RCC_AHB4RSTR_HSEMRST_Pos: u32 = 25;
pub const RCC_AHB4RSTR_HSEMRST_Msk: u32 = 33554432;
pub const RCC_AHB4RSTR_HSEMRST: u32 = 33554432;
pub const RCC_APB3RSTR_LTDCRST_Pos: u32 = 3;
pub const RCC_APB3RSTR_LTDCRST_Msk: u32 = 8;
pub const RCC_APB3RSTR_LTDCRST: u32 = 8;
pub const RCC_APB1LRSTR_TIM2RST_Pos: u32 = 0;
pub const RCC_APB1LRSTR_TIM2RST_Msk: u32 = 1;
pub const RCC_APB1LRSTR_TIM2RST: u32 = 1;
pub const RCC_APB1LRSTR_TIM3RST_Pos: u32 = 1;
pub const RCC_APB1LRSTR_TIM3RST_Msk: u32 = 2;
pub const RCC_APB1LRSTR_TIM3RST: u32 = 2;
pub const RCC_APB1LRSTR_TIM4RST_Pos: u32 = 2;
pub const RCC_APB1LRSTR_TIM4RST_Msk: u32 = 4;
pub const RCC_APB1LRSTR_TIM4RST: u32 = 4;
pub const RCC_APB1LRSTR_TIM5RST_Pos: u32 = 3;
pub const RCC_APB1LRSTR_TIM5RST_Msk: u32 = 8;
pub const RCC_APB1LRSTR_TIM5RST: u32 = 8;
pub const RCC_APB1LRSTR_TIM6RST_Pos: u32 = 4;
pub const RCC_APB1LRSTR_TIM6RST_Msk: u32 = 16;
pub const RCC_APB1LRSTR_TIM6RST: u32 = 16;
pub const RCC_APB1LRSTR_TIM7RST_Pos: u32 = 5;
pub const RCC_APB1LRSTR_TIM7RST_Msk: u32 = 32;
pub const RCC_APB1LRSTR_TIM7RST: u32 = 32;
pub const RCC_APB1LRSTR_TIM12RST_Pos: u32 = 6;
pub const RCC_APB1LRSTR_TIM12RST_Msk: u32 = 64;
pub const RCC_APB1LRSTR_TIM12RST: u32 = 64;
pub const RCC_APB1LRSTR_TIM13RST_Pos: u32 = 7;
pub const RCC_APB1LRSTR_TIM13RST_Msk: u32 = 128;
pub const RCC_APB1LRSTR_TIM13RST: u32 = 128;
pub const RCC_APB1LRSTR_TIM14RST_Pos: u32 = 8;
pub const RCC_APB1LRSTR_TIM14RST_Msk: u32 = 256;
pub const RCC_APB1LRSTR_TIM14RST: u32 = 256;
pub const RCC_APB1LRSTR_LPTIM1RST_Pos: u32 = 9;
pub const RCC_APB1LRSTR_LPTIM1RST_Msk: u32 = 512;
pub const RCC_APB1LRSTR_LPTIM1RST: u32 = 512;
pub const RCC_APB1LRSTR_SPI2RST_Pos: u32 = 14;
pub const RCC_APB1LRSTR_SPI2RST_Msk: u32 = 16384;
pub const RCC_APB1LRSTR_SPI2RST: u32 = 16384;
pub const RCC_APB1LRSTR_SPI3RST_Pos: u32 = 15;
pub const RCC_APB1LRSTR_SPI3RST_Msk: u32 = 32768;
pub const RCC_APB1LRSTR_SPI3RST: u32 = 32768;
pub const RCC_APB1LRSTR_SPDIFRXRST_Pos: u32 = 16;
pub const RCC_APB1LRSTR_SPDIFRXRST_Msk: u32 = 65536;
pub const RCC_APB1LRSTR_SPDIFRXRST: u32 = 65536;
pub const RCC_APB1LRSTR_USART2RST_Pos: u32 = 17;
pub const RCC_APB1LRSTR_USART2RST_Msk: u32 = 131072;
pub const RCC_APB1LRSTR_USART2RST: u32 = 131072;
pub const RCC_APB1LRSTR_USART3RST_Pos: u32 = 18;
pub const RCC_APB1LRSTR_USART3RST_Msk: u32 = 262144;
pub const RCC_APB1LRSTR_USART3RST: u32 = 262144;
pub const RCC_APB1LRSTR_UART4RST_Pos: u32 = 19;
pub const RCC_APB1LRSTR_UART4RST_Msk: u32 = 524288;
pub const RCC_APB1LRSTR_UART4RST: u32 = 524288;
pub const RCC_APB1LRSTR_UART5RST_Pos: u32 = 20;
pub const RCC_APB1LRSTR_UART5RST_Msk: u32 = 1048576;
pub const RCC_APB1LRSTR_UART5RST: u32 = 1048576;
pub const RCC_APB1LRSTR_I2C1RST_Pos: u32 = 21;
pub const RCC_APB1LRSTR_I2C1RST_Msk: u32 = 2097152;
pub const RCC_APB1LRSTR_I2C1RST: u32 = 2097152;
pub const RCC_APB1LRSTR_I2C2RST_Pos: u32 = 22;
pub const RCC_APB1LRSTR_I2C2RST_Msk: u32 = 4194304;
pub const RCC_APB1LRSTR_I2C2RST: u32 = 4194304;
pub const RCC_APB1LRSTR_I2C3RST_Pos: u32 = 23;
pub const RCC_APB1LRSTR_I2C3RST_Msk: u32 = 8388608;
pub const RCC_APB1LRSTR_I2C3RST: u32 = 8388608;
pub const RCC_APB1LRSTR_CECRST_Pos: u32 = 27;
pub const RCC_APB1LRSTR_CECRST_Msk: u32 = 134217728;
pub const RCC_APB1LRSTR_CECRST: u32 = 134217728;
pub const RCC_APB1LRSTR_DAC12RST_Pos: u32 = 29;
pub const RCC_APB1LRSTR_DAC12RST_Msk: u32 = 536870912;
pub const RCC_APB1LRSTR_DAC12RST: u32 = 536870912;
pub const RCC_APB1LRSTR_UART7RST_Pos: u32 = 30;
pub const RCC_APB1LRSTR_UART7RST_Msk: u32 = 1073741824;
pub const RCC_APB1LRSTR_UART7RST: u32 = 1073741824;
pub const RCC_APB1LRSTR_UART8RST_Pos: u32 = 31;
pub const RCC_APB1LRSTR_UART8RST_Msk: u32 = 2147483648;
pub const RCC_APB1LRSTR_UART8RST: u32 = 2147483648;
pub const RCC_APB1LRSTR_HDMICECRST_Pos: u32 = 27;
pub const RCC_APB1LRSTR_HDMICECRST_Msk: u32 = 134217728;
pub const RCC_APB1LRSTR_HDMICECRST: u32 = 134217728;
pub const RCC_APB1HRSTR_CRSRST_Pos: u32 = 1;
pub const RCC_APB1HRSTR_CRSRST_Msk: u32 = 2;
pub const RCC_APB1HRSTR_CRSRST: u32 = 2;
pub const RCC_APB1HRSTR_SWPMIRST_Pos: u32 = 2;
pub const RCC_APB1HRSTR_SWPMIRST_Msk: u32 = 4;
pub const RCC_APB1HRSTR_SWPMIRST: u32 = 4;
pub const RCC_APB1HRSTR_OPAMPRST_Pos: u32 = 4;
pub const RCC_APB1HRSTR_OPAMPRST_Msk: u32 = 16;
pub const RCC_APB1HRSTR_OPAMPRST: u32 = 16;
pub const RCC_APB1HRSTR_MDIOSRST_Pos: u32 = 5;
pub const RCC_APB1HRSTR_MDIOSRST_Msk: u32 = 32;
pub const RCC_APB1HRSTR_MDIOSRST: u32 = 32;
pub const RCC_APB1HRSTR_FDCANRST_Pos: u32 = 8;
pub const RCC_APB1HRSTR_FDCANRST_Msk: u32 = 256;
pub const RCC_APB1HRSTR_FDCANRST: u32 = 256;
pub const RCC_APB2RSTR_TIM1RST_Pos: u32 = 0;
pub const RCC_APB2RSTR_TIM1RST_Msk: u32 = 1;
pub const RCC_APB2RSTR_TIM1RST: u32 = 1;
pub const RCC_APB2RSTR_TIM8RST_Pos: u32 = 1;
pub const RCC_APB2RSTR_TIM8RST_Msk: u32 = 2;
pub const RCC_APB2RSTR_TIM8RST: u32 = 2;
pub const RCC_APB2RSTR_USART1RST_Pos: u32 = 4;
pub const RCC_APB2RSTR_USART1RST_Msk: u32 = 16;
pub const RCC_APB2RSTR_USART1RST: u32 = 16;
pub const RCC_APB2RSTR_USART6RST_Pos: u32 = 5;
pub const RCC_APB2RSTR_USART6RST_Msk: u32 = 32;
pub const RCC_APB2RSTR_USART6RST: u32 = 32;
pub const RCC_APB2RSTR_SPI1RST_Pos: u32 = 12;
pub const RCC_APB2RSTR_SPI1RST_Msk: u32 = 4096;
pub const RCC_APB2RSTR_SPI1RST: u32 = 4096;
pub const RCC_APB2RSTR_SPI4RST_Pos: u32 = 13;
pub const RCC_APB2RSTR_SPI4RST_Msk: u32 = 8192;
pub const RCC_APB2RSTR_SPI4RST: u32 = 8192;
pub const RCC_APB2RSTR_TIM15RST_Pos: u32 = 16;
pub const RCC_APB2RSTR_TIM15RST_Msk: u32 = 65536;
pub const RCC_APB2RSTR_TIM15RST: u32 = 65536;
pub const RCC_APB2RSTR_TIM16RST_Pos: u32 = 17;
pub const RCC_APB2RSTR_TIM16RST_Msk: u32 = 131072;
pub const RCC_APB2RSTR_TIM16RST: u32 = 131072;
pub const RCC_APB2RSTR_TIM17RST_Pos: u32 = 18;
pub const RCC_APB2RSTR_TIM17RST_Msk: u32 = 262144;
pub const RCC_APB2RSTR_TIM17RST: u32 = 262144;
pub const RCC_APB2RSTR_SPI5RST_Pos: u32 = 20;
pub const RCC_APB2RSTR_SPI5RST_Msk: u32 = 1048576;
pub const RCC_APB2RSTR_SPI5RST: u32 = 1048576;
pub const RCC_APB2RSTR_SAI1RST_Pos: u32 = 22;
pub const RCC_APB2RSTR_SAI1RST_Msk: u32 = 4194304;
pub const RCC_APB2RSTR_SAI1RST: u32 = 4194304;
pub const RCC_APB2RSTR_SAI2RST_Pos: u32 = 23;
pub const RCC_APB2RSTR_SAI2RST_Msk: u32 = 8388608;
pub const RCC_APB2RSTR_SAI2RST: u32 = 8388608;
pub const RCC_APB2RSTR_SAI3RST_Pos: u32 = 24;
pub const RCC_APB2RSTR_SAI3RST_Msk: u32 = 16777216;
pub const RCC_APB2RSTR_SAI3RST: u32 = 16777216;
pub const RCC_APB2RSTR_DFSDM1RST_Pos: u32 = 28;
pub const RCC_APB2RSTR_DFSDM1RST_Msk: u32 = 268435456;
pub const RCC_APB2RSTR_DFSDM1RST: u32 = 268435456;
pub const RCC_APB2RSTR_HRTIMRST_Pos: u32 = 29;
pub const RCC_APB2RSTR_HRTIMRST_Msk: u32 = 536870912;
pub const RCC_APB2RSTR_HRTIMRST: u32 = 536870912;
pub const RCC_APB4RSTR_SYSCFGRST_Pos: u32 = 1;
pub const RCC_APB4RSTR_SYSCFGRST_Msk: u32 = 2;
pub const RCC_APB4RSTR_SYSCFGRST: u32 = 2;
pub const RCC_APB4RSTR_LPUART1RST_Pos: u32 = 3;
pub const RCC_APB4RSTR_LPUART1RST_Msk: u32 = 8;
pub const RCC_APB4RSTR_LPUART1RST: u32 = 8;
pub const RCC_APB4RSTR_SPI6RST_Pos: u32 = 5;
pub const RCC_APB4RSTR_SPI6RST_Msk: u32 = 32;
pub const RCC_APB4RSTR_SPI6RST: u32 = 32;
pub const RCC_APB4RSTR_I2C4RST_Pos: u32 = 7;
pub const RCC_APB4RSTR_I2C4RST_Msk: u32 = 128;
pub const RCC_APB4RSTR_I2C4RST: u32 = 128;
pub const RCC_APB4RSTR_LPTIM2RST_Pos: u32 = 9;
pub const RCC_APB4RSTR_LPTIM2RST_Msk: u32 = 512;
pub const RCC_APB4RSTR_LPTIM2RST: u32 = 512;
pub const RCC_APB4RSTR_LPTIM3RST_Pos: u32 = 10;
pub const RCC_APB4RSTR_LPTIM3RST_Msk: u32 = 1024;
pub const RCC_APB4RSTR_LPTIM3RST: u32 = 1024;
pub const RCC_APB4RSTR_LPTIM4RST_Pos: u32 = 11;
pub const RCC_APB4RSTR_LPTIM4RST_Msk: u32 = 2048;
pub const RCC_APB4RSTR_LPTIM4RST: u32 = 2048;
pub const RCC_APB4RSTR_LPTIM5RST_Pos: u32 = 12;
pub const RCC_APB4RSTR_LPTIM5RST_Msk: u32 = 4096;
pub const RCC_APB4RSTR_LPTIM5RST: u32 = 4096;
pub const RCC_APB4RSTR_COMP12RST_Pos: u32 = 14;
pub const RCC_APB4RSTR_COMP12RST_Msk: u32 = 16384;
pub const RCC_APB4RSTR_COMP12RST: u32 = 16384;
pub const RCC_APB4RSTR_VREFRST_Pos: u32 = 15;
pub const RCC_APB4RSTR_VREFRST_Msk: u32 = 32768;
pub const RCC_APB4RSTR_VREFRST: u32 = 32768;
pub const RCC_APB4RSTR_SAI4RST_Pos: u32 = 21;
pub const RCC_APB4RSTR_SAI4RST_Msk: u32 = 2097152;
pub const RCC_APB4RSTR_SAI4RST: u32 = 2097152;
pub const RCC_GCR_WW1RSC_Pos: u32 = 0;
pub const RCC_GCR_WW1RSC_Msk: u32 = 1;
pub const RCC_GCR_WW1RSC: u32 = 1;
pub const RCC_D3AMR_BDMAAMEN_Pos: u32 = 0;
pub const RCC_D3AMR_BDMAAMEN_Msk: u32 = 1;
pub const RCC_D3AMR_BDMAAMEN: u32 = 1;
pub const RCC_D3AMR_LPUART1AMEN_Pos: u32 = 3;
pub const RCC_D3AMR_LPUART1AMEN_Msk: u32 = 8;
pub const RCC_D3AMR_LPUART1AMEN: u32 = 8;
pub const RCC_D3AMR_SPI6AMEN_Pos: u32 = 5;
pub const RCC_D3AMR_SPI6AMEN_Msk: u32 = 32;
pub const RCC_D3AMR_SPI6AMEN: u32 = 32;
pub const RCC_D3AMR_I2C4AMEN_Pos: u32 = 7;
pub const RCC_D3AMR_I2C4AMEN_Msk: u32 = 128;
pub const RCC_D3AMR_I2C4AMEN: u32 = 128;
pub const RCC_D3AMR_LPTIM2AMEN_Pos: u32 = 9;
pub const RCC_D3AMR_LPTIM2AMEN_Msk: u32 = 512;
pub const RCC_D3AMR_LPTIM2AMEN: u32 = 512;
pub const RCC_D3AMR_LPTIM3AMEN_Pos: u32 = 10;
pub const RCC_D3AMR_LPTIM3AMEN_Msk: u32 = 1024;
pub const RCC_D3AMR_LPTIM3AMEN: u32 = 1024;
pub const RCC_D3AMR_LPTIM4AMEN_Pos: u32 = 11;
pub const RCC_D3AMR_LPTIM4AMEN_Msk: u32 = 2048;
pub const RCC_D3AMR_LPTIM4AMEN: u32 = 2048;
pub const RCC_D3AMR_LPTIM5AMEN_Pos: u32 = 12;
pub const RCC_D3AMR_LPTIM5AMEN_Msk: u32 = 4096;
pub const RCC_D3AMR_LPTIM5AMEN: u32 = 4096;
pub const RCC_D3AMR_COMP12AMEN_Pos: u32 = 14;
pub const RCC_D3AMR_COMP12AMEN_Msk: u32 = 16384;
pub const RCC_D3AMR_COMP12AMEN: u32 = 16384;
pub const RCC_D3AMR_VREFAMEN_Pos: u32 = 15;
pub const RCC_D3AMR_VREFAMEN_Msk: u32 = 32768;
pub const RCC_D3AMR_VREFAMEN: u32 = 32768;
pub const RCC_D3AMR_RTCAMEN_Pos: u32 = 16;
pub const RCC_D3AMR_RTCAMEN_Msk: u32 = 65536;
pub const RCC_D3AMR_RTCAMEN: u32 = 65536;
pub const RCC_D3AMR_CRCAMEN_Pos: u32 = 19;
pub const RCC_D3AMR_CRCAMEN_Msk: u32 = 524288;
pub const RCC_D3AMR_CRCAMEN: u32 = 524288;
pub const RCC_D3AMR_SAI4AMEN_Pos: u32 = 21;
pub const RCC_D3AMR_SAI4AMEN_Msk: u32 = 2097152;
pub const RCC_D3AMR_SAI4AMEN: u32 = 2097152;
pub const RCC_D3AMR_ADC3AMEN_Pos: u32 = 24;
pub const RCC_D3AMR_ADC3AMEN_Msk: u32 = 16777216;
pub const RCC_D3AMR_ADC3AMEN: u32 = 16777216;
pub const RCC_D3AMR_BKPRAMAMEN_Pos: u32 = 28;
pub const RCC_D3AMR_BKPRAMAMEN_Msk: u32 = 268435456;
pub const RCC_D3AMR_BKPRAMAMEN: u32 = 268435456;
pub const RCC_D3AMR_SRAM4AMEN_Pos: u32 = 29;
pub const RCC_D3AMR_SRAM4AMEN_Msk: u32 = 536870912;
pub const RCC_D3AMR_SRAM4AMEN: u32 = 536870912;
pub const RCC_AHB3LPENR_MDMALPEN_Pos: u32 = 0;
pub const RCC_AHB3LPENR_MDMALPEN_Msk: u32 = 1;
pub const RCC_AHB3LPENR_MDMALPEN: u32 = 1;
pub const RCC_AHB3LPENR_DMA2DLPEN_Pos: u32 = 4;
pub const RCC_AHB3LPENR_DMA2DLPEN_Msk: u32 = 16;
pub const RCC_AHB3LPENR_DMA2DLPEN: u32 = 16;
pub const RCC_AHB3LPENR_JPGDECLPEN_Pos: u32 = 5;
pub const RCC_AHB3LPENR_JPGDECLPEN_Msk: u32 = 32;
pub const RCC_AHB3LPENR_JPGDECLPEN: u32 = 32;
pub const RCC_AHB3LPENR_FLASHLPEN_Pos: u32 = 8;
pub const RCC_AHB3LPENR_FLASHLPEN_Msk: u32 = 256;
pub const RCC_AHB3LPENR_FLASHLPEN: u32 = 256;
pub const RCC_AHB3LPENR_FMCLPEN_Pos: u32 = 12;
pub const RCC_AHB3LPENR_FMCLPEN_Msk: u32 = 4096;
pub const RCC_AHB3LPENR_FMCLPEN: u32 = 4096;
pub const RCC_AHB3LPENR_QSPILPEN_Pos: u32 = 14;
pub const RCC_AHB3LPENR_QSPILPEN_Msk: u32 = 16384;
pub const RCC_AHB3LPENR_QSPILPEN: u32 = 16384;
pub const RCC_AHB3LPENR_SDMMC1LPEN_Pos: u32 = 16;
pub const RCC_AHB3LPENR_SDMMC1LPEN_Msk: u32 = 65536;
pub const RCC_AHB3LPENR_SDMMC1LPEN: u32 = 65536;
pub const RCC_AHB3LPENR_DTCM1LPEN_Pos: u32 = 28;
pub const RCC_AHB3LPENR_DTCM1LPEN_Msk: u32 = 268435456;
pub const RCC_AHB3LPENR_DTCM1LPEN: u32 = 268435456;
pub const RCC_AHB3LPENR_DTCM2LPEN_Pos: u32 = 29;
pub const RCC_AHB3LPENR_DTCM2LPEN_Msk: u32 = 536870912;
pub const RCC_AHB3LPENR_DTCM2LPEN: u32 = 536870912;
pub const RCC_AHB3LPENR_ITCMLPEN_Pos: u32 = 30;
pub const RCC_AHB3LPENR_ITCMLPEN_Msk: u32 = 1073741824;
pub const RCC_AHB3LPENR_ITCMLPEN: u32 = 1073741824;
pub const RCC_AHB3LPENR_AXISRAMLPEN_Pos: u32 = 31;
pub const RCC_AHB3LPENR_AXISRAMLPEN_Msk: u32 = 2147483648;
pub const RCC_AHB3LPENR_AXISRAMLPEN: u32 = 2147483648;
pub const RCC_AHB1LPENR_DMA1LPEN_Pos: u32 = 0;
pub const RCC_AHB1LPENR_DMA1LPEN_Msk: u32 = 1;
pub const RCC_AHB1LPENR_DMA1LPEN: u32 = 1;
pub const RCC_AHB1LPENR_DMA2LPEN_Pos: u32 = 1;
pub const RCC_AHB1LPENR_DMA2LPEN_Msk: u32 = 2;
pub const RCC_AHB1LPENR_DMA2LPEN: u32 = 2;
pub const RCC_AHB1LPENR_ADC12LPEN_Pos: u32 = 5;
pub const RCC_AHB1LPENR_ADC12LPEN_Msk: u32 = 32;
pub const RCC_AHB1LPENR_ADC12LPEN: u32 = 32;
pub const RCC_AHB1LPENR_ETH1MACLPEN_Pos: u32 = 15;
pub const RCC_AHB1LPENR_ETH1MACLPEN_Msk: u32 = 32768;
pub const RCC_AHB1LPENR_ETH1MACLPEN: u32 = 32768;
pub const RCC_AHB1LPENR_ETH1TXLPEN_Pos: u32 = 16;
pub const RCC_AHB1LPENR_ETH1TXLPEN_Msk: u32 = 65536;
pub const RCC_AHB1LPENR_ETH1TXLPEN: u32 = 65536;
pub const RCC_AHB1LPENR_ETH1RXLPEN_Pos: u32 = 17;
pub const RCC_AHB1LPENR_ETH1RXLPEN_Msk: u32 = 131072;
pub const RCC_AHB1LPENR_ETH1RXLPEN: u32 = 131072;
pub const RCC_AHB1LPENR_USB1OTGHSLPEN_Pos: u32 = 25;
pub const RCC_AHB1LPENR_USB1OTGHSLPEN_Msk: u32 = 33554432;
pub const RCC_AHB1LPENR_USB1OTGHSLPEN: u32 = 33554432;
pub const RCC_AHB1LPENR_USB1OTGHSULPILPEN_Pos: u32 = 26;
pub const RCC_AHB1LPENR_USB1OTGHSULPILPEN_Msk: u32 = 67108864;
pub const RCC_AHB1LPENR_USB1OTGHSULPILPEN: u32 = 67108864;
pub const RCC_AHB1LPENR_USB2OTGFSLPEN_Pos: u32 = 27;
pub const RCC_AHB1LPENR_USB2OTGFSLPEN_Msk: u32 = 134217728;
pub const RCC_AHB1LPENR_USB2OTGFSLPEN: u32 = 134217728;
pub const RCC_AHB1LPENR_USB2OTGFSULPILPEN_Pos: u32 = 28;
pub const RCC_AHB1LPENR_USB2OTGFSULPILPEN_Msk: u32 = 268435456;
pub const RCC_AHB1LPENR_USB2OTGFSULPILPEN: u32 = 268435456;
pub const RCC_AHB1LPENR_USB2OTGHSLPEN_Pos: u32 = 27;
pub const RCC_AHB1LPENR_USB2OTGHSLPEN_Msk: u32 = 134217728;
pub const RCC_AHB1LPENR_USB2OTGHSLPEN: u32 = 134217728;
pub const RCC_AHB1LPENR_USB2OTGHSULPILPEN_Pos: u32 = 28;
pub const RCC_AHB1LPENR_USB2OTGHSULPILPEN_Msk: u32 = 268435456;
pub const RCC_AHB1LPENR_USB2OTGHSULPILPEN: u32 = 268435456;
pub const RCC_AHB2LPENR_DCMILPEN_Pos: u32 = 0;
pub const RCC_AHB2LPENR_DCMILPEN_Msk: u32 = 1;
pub const RCC_AHB2LPENR_DCMILPEN: u32 = 1;
pub const RCC_AHB2LPENR_CRYPLPEN_Pos: u32 = 4;
pub const RCC_AHB2LPENR_CRYPLPEN_Msk: u32 = 16;
pub const RCC_AHB2LPENR_CRYPLPEN: u32 = 16;
pub const RCC_AHB2LPENR_HASHLPEN_Pos: u32 = 5;
pub const RCC_AHB2LPENR_HASHLPEN_Msk: u32 = 32;
pub const RCC_AHB2LPENR_HASHLPEN: u32 = 32;
pub const RCC_AHB2LPENR_RNGLPEN_Pos: u32 = 6;
pub const RCC_AHB2LPENR_RNGLPEN_Msk: u32 = 64;
pub const RCC_AHB2LPENR_RNGLPEN: u32 = 64;
pub const RCC_AHB2LPENR_SDMMC2LPEN_Pos: u32 = 9;
pub const RCC_AHB2LPENR_SDMMC2LPEN_Msk: u32 = 512;
pub const RCC_AHB2LPENR_SDMMC2LPEN: u32 = 512;
pub const RCC_AHB2LPENR_SRAM1LPEN_Pos: u32 = 29;
pub const RCC_AHB2LPENR_SRAM1LPEN_Msk: u32 = 536870912;
pub const RCC_AHB2LPENR_SRAM1LPEN: u32 = 536870912;
pub const RCC_AHB2LPENR_SRAM2LPEN_Pos: u32 = 30;
pub const RCC_AHB2LPENR_SRAM2LPEN_Msk: u32 = 1073741824;
pub const RCC_AHB2LPENR_SRAM2LPEN: u32 = 1073741824;
pub const RCC_AHB2LPENR_SRAM3LPEN_Pos: u32 = 31;
pub const RCC_AHB2LPENR_SRAM3LPEN_Msk: u32 = 2147483648;
pub const RCC_AHB2LPENR_SRAM3LPEN: u32 = 2147483648;
pub const RCC_AHB2LPENR_D2SRAM1LPEN_Pos: u32 = 29;
pub const RCC_AHB2LPENR_D2SRAM1LPEN_Msk: u32 = 536870912;
pub const RCC_AHB2LPENR_D2SRAM1LPEN: u32 = 536870912;
pub const RCC_AHB2LPENR_D2SRAM2LPEN_Pos: u32 = 30;
pub const RCC_AHB2LPENR_D2SRAM2LPEN_Msk: u32 = 1073741824;
pub const RCC_AHB2LPENR_D2SRAM2LPEN: u32 = 1073741824;
pub const RCC_AHB2LPENR_D2SRAM3LPEN_Pos: u32 = 31;
pub const RCC_AHB2LPENR_D2SRAM3LPEN_Msk: u32 = 2147483648;
pub const RCC_AHB2LPENR_D2SRAM3LPEN: u32 = 2147483648;
pub const RCC_AHB4LPENR_GPIOALPEN_Pos: u32 = 0;
pub const RCC_AHB4LPENR_GPIOALPEN_Msk: u32 = 1;
pub const RCC_AHB4LPENR_GPIOALPEN: u32 = 1;
pub const RCC_AHB4LPENR_GPIOBLPEN_Pos: u32 = 1;
pub const RCC_AHB4LPENR_GPIOBLPEN_Msk: u32 = 2;
pub const RCC_AHB4LPENR_GPIOBLPEN: u32 = 2;
pub const RCC_AHB4LPENR_GPIOCLPEN_Pos: u32 = 2;
pub const RCC_AHB4LPENR_GPIOCLPEN_Msk: u32 = 4;
pub const RCC_AHB4LPENR_GPIOCLPEN: u32 = 4;
pub const RCC_AHB4LPENR_GPIODLPEN_Pos: u32 = 3;
pub const RCC_AHB4LPENR_GPIODLPEN_Msk: u32 = 8;
pub const RCC_AHB4LPENR_GPIODLPEN: u32 = 8;
pub const RCC_AHB4LPENR_GPIOELPEN_Pos: u32 = 4;
pub const RCC_AHB4LPENR_GPIOELPEN_Msk: u32 = 16;
pub const RCC_AHB4LPENR_GPIOELPEN: u32 = 16;
pub const RCC_AHB4LPENR_GPIOFLPEN_Pos: u32 = 5;
pub const RCC_AHB4LPENR_GPIOFLPEN_Msk: u32 = 32;
pub const RCC_AHB4LPENR_GPIOFLPEN: u32 = 32;
pub const RCC_AHB4LPENR_GPIOGLPEN_Pos: u32 = 6;
pub const RCC_AHB4LPENR_GPIOGLPEN_Msk: u32 = 64;
pub const RCC_AHB4LPENR_GPIOGLPEN: u32 = 64;
pub const RCC_AHB4LPENR_GPIOHLPEN_Pos: u32 = 7;
pub const RCC_AHB4LPENR_GPIOHLPEN_Msk: u32 = 128;
pub const RCC_AHB4LPENR_GPIOHLPEN: u32 = 128;
pub const RCC_AHB4LPENR_GPIOILPEN_Pos: u32 = 8;
pub const RCC_AHB4LPENR_GPIOILPEN_Msk: u32 = 256;
pub const RCC_AHB4LPENR_GPIOILPEN: u32 = 256;
pub const RCC_AHB4LPENR_GPIOJLPEN_Pos: u32 = 9;
pub const RCC_AHB4LPENR_GPIOJLPEN_Msk: u32 = 512;
pub const RCC_AHB4LPENR_GPIOJLPEN: u32 = 512;
pub const RCC_AHB4LPENR_GPIOKLPEN_Pos: u32 = 10;
pub const RCC_AHB4LPENR_GPIOKLPEN_Msk: u32 = 1024;
pub const RCC_AHB4LPENR_GPIOKLPEN: u32 = 1024;
pub const RCC_AHB4LPENR_CRCLPEN_Pos: u32 = 19;
pub const RCC_AHB4LPENR_CRCLPEN_Msk: u32 = 524288;
pub const RCC_AHB4LPENR_CRCLPEN: u32 = 524288;
pub const RCC_AHB4LPENR_BDMALPEN_Pos: u32 = 21;
pub const RCC_AHB4LPENR_BDMALPEN_Msk: u32 = 2097152;
pub const RCC_AHB4LPENR_BDMALPEN: u32 = 2097152;
pub const RCC_AHB4LPENR_ADC3LPEN_Pos: u32 = 24;
pub const RCC_AHB4LPENR_ADC3LPEN_Msk: u32 = 16777216;
pub const RCC_AHB4LPENR_ADC3LPEN: u32 = 16777216;
pub const RCC_AHB4LPENR_BKPRAMLPEN_Pos: u32 = 28;
pub const RCC_AHB4LPENR_BKPRAMLPEN_Msk: u32 = 268435456;
pub const RCC_AHB4LPENR_BKPRAMLPEN: u32 = 268435456;
pub const RCC_AHB4LPENR_SRAM4LPEN_Pos: u32 = 29;
pub const RCC_AHB4LPENR_SRAM4LPEN_Msk: u32 = 536870912;
pub const RCC_AHB4LPENR_SRAM4LPEN: u32 = 536870912;
pub const RCC_AHB4LPENR_D3SRAM1LPEN_Pos: u32 = 29;
pub const RCC_AHB4LPENR_D3SRAM1LPEN_Msk: u32 = 536870912;
pub const RCC_AHB4LPENR_D3SRAM1LPEN: u32 = 536870912;
pub const RCC_APB3LPENR_LTDCLPEN_Pos: u32 = 3;
pub const RCC_APB3LPENR_LTDCLPEN_Msk: u32 = 8;
pub const RCC_APB3LPENR_LTDCLPEN: u32 = 8;
pub const RCC_APB3LPENR_WWDG1LPEN_Pos: u32 = 6;
pub const RCC_APB3LPENR_WWDG1LPEN_Msk: u32 = 64;
pub const RCC_APB3LPENR_WWDG1LPEN: u32 = 64;
pub const RCC_APB1LLPENR_TIM2LPEN_Pos: u32 = 0;
pub const RCC_APB1LLPENR_TIM2LPEN_Msk: u32 = 1;
pub const RCC_APB1LLPENR_TIM2LPEN: u32 = 1;
pub const RCC_APB1LLPENR_TIM3LPEN_Pos: u32 = 1;
pub const RCC_APB1LLPENR_TIM3LPEN_Msk: u32 = 2;
pub const RCC_APB1LLPENR_TIM3LPEN: u32 = 2;
pub const RCC_APB1LLPENR_TIM4LPEN_Pos: u32 = 2;
pub const RCC_APB1LLPENR_TIM4LPEN_Msk: u32 = 4;
pub const RCC_APB1LLPENR_TIM4LPEN: u32 = 4;
pub const RCC_APB1LLPENR_TIM5LPEN_Pos: u32 = 3;
pub const RCC_APB1LLPENR_TIM5LPEN_Msk: u32 = 8;
pub const RCC_APB1LLPENR_TIM5LPEN: u32 = 8;
pub const RCC_APB1LLPENR_TIM6LPEN_Pos: u32 = 4;
pub const RCC_APB1LLPENR_TIM6LPEN_Msk: u32 = 16;
pub const RCC_APB1LLPENR_TIM6LPEN: u32 = 16;
pub const RCC_APB1LLPENR_TIM7LPEN_Pos: u32 = 5;
pub const RCC_APB1LLPENR_TIM7LPEN_Msk: u32 = 32;
pub const RCC_APB1LLPENR_TIM7LPEN: u32 = 32;
pub const RCC_APB1LLPENR_TIM12LPEN_Pos: u32 = 6;
pub const RCC_APB1LLPENR_TIM12LPEN_Msk: u32 = 64;
pub const RCC_APB1LLPENR_TIM12LPEN: u32 = 64;
pub const RCC_APB1LLPENR_TIM13LPEN_Pos: u32 = 7;
pub const RCC_APB1LLPENR_TIM13LPEN_Msk: u32 = 128;
pub const RCC_APB1LLPENR_TIM13LPEN: u32 = 128;
pub const RCC_APB1LLPENR_TIM14LPEN_Pos: u32 = 8;
pub const RCC_APB1LLPENR_TIM14LPEN_Msk: u32 = 256;
pub const RCC_APB1LLPENR_TIM14LPEN: u32 = 256;
pub const RCC_APB1LLPENR_LPTIM1LPEN_Pos: u32 = 9;
pub const RCC_APB1LLPENR_LPTIM1LPEN_Msk: u32 = 512;
pub const RCC_APB1LLPENR_LPTIM1LPEN: u32 = 512;
pub const RCC_APB1LLPENR_SPI2LPEN_Pos: u32 = 14;
pub const RCC_APB1LLPENR_SPI2LPEN_Msk: u32 = 16384;
pub const RCC_APB1LLPENR_SPI2LPEN: u32 = 16384;
pub const RCC_APB1LLPENR_SPI3LPEN_Pos: u32 = 15;
pub const RCC_APB1LLPENR_SPI3LPEN_Msk: u32 = 32768;
pub const RCC_APB1LLPENR_SPI3LPEN: u32 = 32768;
pub const RCC_APB1LLPENR_SPDIFRXLPEN_Pos: u32 = 16;
pub const RCC_APB1LLPENR_SPDIFRXLPEN_Msk: u32 = 65536;
pub const RCC_APB1LLPENR_SPDIFRXLPEN: u32 = 65536;
pub const RCC_APB1LLPENR_USART2LPEN_Pos: u32 = 17;
pub const RCC_APB1LLPENR_USART2LPEN_Msk: u32 = 131072;
pub const RCC_APB1LLPENR_USART2LPEN: u32 = 131072;
pub const RCC_APB1LLPENR_USART3LPEN_Pos: u32 = 18;
pub const RCC_APB1LLPENR_USART3LPEN_Msk: u32 = 262144;
pub const RCC_APB1LLPENR_USART3LPEN: u32 = 262144;
pub const RCC_APB1LLPENR_UART4LPEN_Pos: u32 = 19;
pub const RCC_APB1LLPENR_UART4LPEN_Msk: u32 = 524288;
pub const RCC_APB1LLPENR_UART4LPEN: u32 = 524288;
pub const RCC_APB1LLPENR_UART5LPEN_Pos: u32 = 20;
pub const RCC_APB1LLPENR_UART5LPEN_Msk: u32 = 1048576;
pub const RCC_APB1LLPENR_UART5LPEN: u32 = 1048576;
pub const RCC_APB1LLPENR_I2C1LPEN_Pos: u32 = 21;
pub const RCC_APB1LLPENR_I2C1LPEN_Msk: u32 = 2097152;
pub const RCC_APB1LLPENR_I2C1LPEN: u32 = 2097152;
pub const RCC_APB1LLPENR_I2C2LPEN_Pos: u32 = 22;
pub const RCC_APB1LLPENR_I2C2LPEN_Msk: u32 = 4194304;
pub const RCC_APB1LLPENR_I2C2LPEN: u32 = 4194304;
pub const RCC_APB1LLPENR_I2C3LPEN_Pos: u32 = 23;
pub const RCC_APB1LLPENR_I2C3LPEN_Msk: u32 = 8388608;
pub const RCC_APB1LLPENR_I2C3LPEN: u32 = 8388608;
pub const RCC_APB1LLPENR_CECLPEN_Pos: u32 = 27;
pub const RCC_APB1LLPENR_CECLPEN_Msk: u32 = 134217728;
pub const RCC_APB1LLPENR_CECLPEN: u32 = 134217728;
pub const RCC_APB1LLPENR_DAC12LPEN_Pos: u32 = 29;
pub const RCC_APB1LLPENR_DAC12LPEN_Msk: u32 = 536870912;
pub const RCC_APB1LLPENR_DAC12LPEN: u32 = 536870912;
pub const RCC_APB1LLPENR_UART7LPEN_Pos: u32 = 30;
pub const RCC_APB1LLPENR_UART7LPEN_Msk: u32 = 1073741824;
pub const RCC_APB1LLPENR_UART7LPEN: u32 = 1073741824;
pub const RCC_APB1LLPENR_UART8LPEN_Pos: u32 = 31;
pub const RCC_APB1LLPENR_UART8LPEN_Msk: u32 = 2147483648;
pub const RCC_APB1LLPENR_UART8LPEN: u32 = 2147483648;
pub const RCC_APB1LLPENR_HDMICECEN_Pos: u32 = 27;
pub const RCC_APB1LLPENR_HDMICECEN_Msk: u32 = 134217728;
pub const RCC_APB1LLPENR_HDMICECEN: u32 = 134217728;
pub const RCC_APB1HLPENR_CRSLPEN_Pos: u32 = 1;
pub const RCC_APB1HLPENR_CRSLPEN_Msk: u32 = 2;
pub const RCC_APB1HLPENR_CRSLPEN: u32 = 2;
pub const RCC_APB1HLPENR_SWPMILPEN_Pos: u32 = 2;
pub const RCC_APB1HLPENR_SWPMILPEN_Msk: u32 = 4;
pub const RCC_APB1HLPENR_SWPMILPEN: u32 = 4;
pub const RCC_APB1HLPENR_OPAMPLPEN_Pos: u32 = 4;
pub const RCC_APB1HLPENR_OPAMPLPEN_Msk: u32 = 16;
pub const RCC_APB1HLPENR_OPAMPLPEN: u32 = 16;
pub const RCC_APB1HLPENR_MDIOSLPEN_Pos: u32 = 5;
pub const RCC_APB1HLPENR_MDIOSLPEN_Msk: u32 = 32;
pub const RCC_APB1HLPENR_MDIOSLPEN: u32 = 32;
pub const RCC_APB1HLPENR_FDCANLPEN_Pos: u32 = 8;
pub const RCC_APB1HLPENR_FDCANLPEN_Msk: u32 = 256;
pub const RCC_APB1HLPENR_FDCANLPEN: u32 = 256;
pub const RCC_APB2LPENR_TIM1LPEN_Pos: u32 = 0;
pub const RCC_APB2LPENR_TIM1LPEN_Msk: u32 = 1;
pub const RCC_APB2LPENR_TIM1LPEN: u32 = 1;
pub const RCC_APB2LPENR_TIM8LPEN_Pos: u32 = 1;
pub const RCC_APB2LPENR_TIM8LPEN_Msk: u32 = 2;
pub const RCC_APB2LPENR_TIM8LPEN: u32 = 2;
pub const RCC_APB2LPENR_USART1LPEN_Pos: u32 = 4;
pub const RCC_APB2LPENR_USART1LPEN_Msk: u32 = 16;
pub const RCC_APB2LPENR_USART1LPEN: u32 = 16;
pub const RCC_APB2LPENR_USART6LPEN_Pos: u32 = 5;
pub const RCC_APB2LPENR_USART6LPEN_Msk: u32 = 32;
pub const RCC_APB2LPENR_USART6LPEN: u32 = 32;
pub const RCC_APB2LPENR_SPI1LPEN_Pos: u32 = 12;
pub const RCC_APB2LPENR_SPI1LPEN_Msk: u32 = 4096;
pub const RCC_APB2LPENR_SPI1LPEN: u32 = 4096;
pub const RCC_APB2LPENR_SPI4LPEN_Pos: u32 = 13;
pub const RCC_APB2LPENR_SPI4LPEN_Msk: u32 = 8192;
pub const RCC_APB2LPENR_SPI4LPEN: u32 = 8192;
pub const RCC_APB2LPENR_TIM15LPEN_Pos: u32 = 16;
pub const RCC_APB2LPENR_TIM15LPEN_Msk: u32 = 65536;
pub const RCC_APB2LPENR_TIM15LPEN: u32 = 65536;
pub const RCC_APB2LPENR_TIM16LPEN_Pos: u32 = 17;
pub const RCC_APB2LPENR_TIM16LPEN_Msk: u32 = 131072;
pub const RCC_APB2LPENR_TIM16LPEN: u32 = 131072;
pub const RCC_APB2LPENR_TIM17LPEN_Pos: u32 = 18;
pub const RCC_APB2LPENR_TIM17LPEN_Msk: u32 = 262144;
pub const RCC_APB2LPENR_TIM17LPEN: u32 = 262144;
pub const RCC_APB2LPENR_SPI5LPEN_Pos: u32 = 20;
pub const RCC_APB2LPENR_SPI5LPEN_Msk: u32 = 1048576;
pub const RCC_APB2LPENR_SPI5LPEN: u32 = 1048576;
pub const RCC_APB2LPENR_SAI1LPEN_Pos: u32 = 22;
pub const RCC_APB2LPENR_SAI1LPEN_Msk: u32 = 4194304;
pub const RCC_APB2LPENR_SAI1LPEN: u32 = 4194304;
pub const RCC_APB2LPENR_SAI2LPEN_Pos: u32 = 23;
pub const RCC_APB2LPENR_SAI2LPEN_Msk: u32 = 8388608;
pub const RCC_APB2LPENR_SAI2LPEN: u32 = 8388608;
pub const RCC_APB2LPENR_SAI3LPEN_Pos: u32 = 24;
pub const RCC_APB2LPENR_SAI3LPEN_Msk: u32 = 16777216;
pub const RCC_APB2LPENR_SAI3LPEN: u32 = 16777216;
pub const RCC_APB2LPENR_DFSDM1LPEN_Pos: u32 = 28;
pub const RCC_APB2LPENR_DFSDM1LPEN_Msk: u32 = 268435456;
pub const RCC_APB2LPENR_DFSDM1LPEN: u32 = 268435456;
pub const RCC_APB2LPENR_HRTIMLPEN_Pos: u32 = 29;
pub const RCC_APB2LPENR_HRTIMLPEN_Msk: u32 = 536870912;
pub const RCC_APB2LPENR_HRTIMLPEN: u32 = 536870912;
pub const RCC_APB4LPENR_SYSCFGLPEN_Pos: u32 = 1;
pub const RCC_APB4LPENR_SYSCFGLPEN_Msk: u32 = 2;
pub const RCC_APB4LPENR_SYSCFGLPEN: u32 = 2;
pub const RCC_APB4LPENR_LPUART1LPEN_Pos: u32 = 3;
pub const RCC_APB4LPENR_LPUART1LPEN_Msk: u32 = 8;
pub const RCC_APB4LPENR_LPUART1LPEN: u32 = 8;
pub const RCC_APB4LPENR_SPI6LPEN_Pos: u32 = 5;
pub const RCC_APB4LPENR_SPI6LPEN_Msk: u32 = 32;
pub const RCC_APB4LPENR_SPI6LPEN: u32 = 32;
pub const RCC_APB4LPENR_I2C4LPEN_Pos: u32 = 7;
pub const RCC_APB4LPENR_I2C4LPEN_Msk: u32 = 128;
pub const RCC_APB4LPENR_I2C4LPEN: u32 = 128;
pub const RCC_APB4LPENR_LPTIM2LPEN_Pos: u32 = 9;
pub const RCC_APB4LPENR_LPTIM2LPEN_Msk: u32 = 512;
pub const RCC_APB4LPENR_LPTIM2LPEN: u32 = 512;
pub const RCC_APB4LPENR_LPTIM3LPEN_Pos: u32 = 10;
pub const RCC_APB4LPENR_LPTIM3LPEN_Msk: u32 = 1024;
pub const RCC_APB4LPENR_LPTIM3LPEN: u32 = 1024;
pub const RCC_APB4LPENR_LPTIM4LPEN_Pos: u32 = 11;
pub const RCC_APB4LPENR_LPTIM4LPEN_Msk: u32 = 2048;
pub const RCC_APB4LPENR_LPTIM4LPEN: u32 = 2048;
pub const RCC_APB4LPENR_LPTIM5LPEN_Pos: u32 = 12;
pub const RCC_APB4LPENR_LPTIM5LPEN_Msk: u32 = 4096;
pub const RCC_APB4LPENR_LPTIM5LPEN: u32 = 4096;
pub const RCC_APB4LPENR_COMP12LPEN_Pos: u32 = 14;
pub const RCC_APB4LPENR_COMP12LPEN_Msk: u32 = 16384;
pub const RCC_APB4LPENR_COMP12LPEN: u32 = 16384;
pub const RCC_APB4LPENR_VREFLPEN_Pos: u32 = 15;
pub const RCC_APB4LPENR_VREFLPEN_Msk: u32 = 32768;
pub const RCC_APB4LPENR_VREFLPEN: u32 = 32768;
pub const RCC_APB4LPENR_RTCAPBLPEN_Pos: u32 = 16;
pub const RCC_APB4LPENR_RTCAPBLPEN_Msk: u32 = 65536;
pub const RCC_APB4LPENR_RTCAPBLPEN: u32 = 65536;
pub const RCC_APB4LPENR_SAI4LPEN_Pos: u32 = 21;
pub const RCC_APB4LPENR_SAI4LPEN_Msk: u32 = 2097152;
pub const RCC_APB4LPENR_SAI4LPEN: u32 = 2097152;
pub const RCC_RSR_RMVF_Pos: u32 = 16;
pub const RCC_RSR_RMVF_Msk: u32 = 65536;
pub const RCC_RSR_RMVF: u32 = 65536;
pub const RCC_RSR_CPURSTF_Pos: u32 = 17;
pub const RCC_RSR_CPURSTF_Msk: u32 = 131072;
pub const RCC_RSR_CPURSTF: u32 = 131072;
pub const RCC_RSR_D1RSTF_Pos: u32 = 19;
pub const RCC_RSR_D1RSTF_Msk: u32 = 524288;
pub const RCC_RSR_D1RSTF: u32 = 524288;
pub const RCC_RSR_D2RSTF_Pos: u32 = 20;
pub const RCC_RSR_D2RSTF_Msk: u32 = 1048576;
pub const RCC_RSR_D2RSTF: u32 = 1048576;
pub const RCC_RSR_BORRSTF_Pos: u32 = 21;
pub const RCC_RSR_BORRSTF_Msk: u32 = 2097152;
pub const RCC_RSR_BORRSTF: u32 = 2097152;
pub const RCC_RSR_PINRSTF_Pos: u32 = 22;
pub const RCC_RSR_PINRSTF_Msk: u32 = 4194304;
pub const RCC_RSR_PINRSTF: u32 = 4194304;
pub const RCC_RSR_PORRSTF_Pos: u32 = 23;
pub const RCC_RSR_PORRSTF_Msk: u32 = 8388608;
pub const RCC_RSR_PORRSTF: u32 = 8388608;
pub const RCC_RSR_SFTRSTF_Pos: u32 = 24;
pub const RCC_RSR_SFTRSTF_Msk: u32 = 16777216;
pub const RCC_RSR_SFTRSTF: u32 = 16777216;
pub const RCC_RSR_IWDG1RSTF_Pos: u32 = 26;
pub const RCC_RSR_IWDG1RSTF_Msk: u32 = 67108864;
pub const RCC_RSR_IWDG1RSTF: u32 = 67108864;
pub const RCC_RSR_WWDG1RSTF_Pos: u32 = 28;
pub const RCC_RSR_WWDG1RSTF_Msk: u32 = 268435456;
pub const RCC_RSR_WWDG1RSTF: u32 = 268435456;
pub const RCC_RSR_LPWRRSTF_Pos: u32 = 30;
pub const RCC_RSR_LPWRRSTF_Msk: u32 = 1073741824;
pub const RCC_RSR_LPWRRSTF: u32 = 1073741824;
#[test]
fn bindgen_test_layout_ADC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_TypeDef>(),
        204usize,
        concat!("Size of: ", stringify!(ADC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CFGR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SMPR1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SMPR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SMPR2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SMPR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCSEL) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(PCSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LTR1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(LTR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HTR1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(HTR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SQR1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SQR2) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SQR3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SQR4) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JSQR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JSQR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OFR1) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(OFR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OFR2) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(OFR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OFR3) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(OFR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OFR4) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(OFR4)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JDR1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JDR2) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JDR3) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JDR4) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR4)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AWD2CR) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(AWD2CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AWD3CR) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(AWD3CR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LTR2) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(LTR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HTR2) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(HTR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LTR3) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(LTR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HTR3) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(HTR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIFSEL) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(DIFSEL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CALFACT) as usize - ptr as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CALFACT)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CALFACT2) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CALFACT2)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_Common_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_Common_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_Common_TypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(ADC_Common_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_Common_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_Common_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CDR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CDR2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CDR2)
        )
    );
}
#[test]
fn bindgen_test_layout_VREFBUF_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<VREFBUF_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<VREFBUF_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(VREFBUF_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<VREFBUF_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(VREFBUF_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREFBUF_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VREFBUF_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
}
#[test]
fn bindgen_test_layout_TTCAN_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TTCAN_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TTCAN_TypeDef>(),
        516usize,
        concat!("Size of: ", stringify!(TTCAN_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TTCAN_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TTCAN_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTTMC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTTMC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTRMC) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTRMC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTOCF) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTOCF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTMLM) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTMLM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TURCF) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TURCF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTOCN) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTOCN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTGTP) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTGTP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTTMK) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTTMK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTIR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTIE) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTIE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTILS) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTILS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTOST) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTOST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TURNA) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TURNA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTLGT) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTLGT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTCTC) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTCTC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTCPT) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTCPT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTCSM) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTCSM)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TTTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(TTCAN_TypeDef),
            "::",
            stringify!(TTTS)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_ClockCalibrationUnit_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_ClockCalibrationUnit_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_ClockCalibrationUnit_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(FDCAN_ClockCalibrationUnit_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_ClockCalibrationUnit_TypeDef>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FDCAN_ClockCalibrationUnit_TypeDef)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CREL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClockCalibrationUnit_TypeDef),
            "::",
            stringify!(CREL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCFG) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClockCalibrationUnit_TypeDef),
            "::",
            stringify!(CCFG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSTAT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClockCalibrationUnit_TypeDef),
            "::",
            stringify!(CSTAT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CWD) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClockCalibrationUnit_TypeDef),
            "::",
            stringify!(CWD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClockCalibrationUnit_TypeDef),
            "::",
            stringify!(IR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IE) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClockCalibrationUnit_TypeDef),
            "::",
            stringify!(IE)
        )
    );
}
#[test]
fn bindgen_test_layout_CEC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CEC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CEC_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(CEC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CEC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CEC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXDR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(TXDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXDR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(RXDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(IER)
        )
    );
}
#[test]
fn bindgen_test_layout_CRC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CRC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CRC_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(CRC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CRC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IDR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INIT) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(INIT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).POL) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(POL)
        )
    );
}
#[test]
fn bindgen_test_layout_CRS_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CRS_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CRS_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(CRS_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CRS_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CRS_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRS_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRS_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRS_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CRS_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
}
#[test]
fn bindgen_test_layout_DAC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DAC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DAC_TypeDef>(),
        80usize,
        concat!("Size of: ", stringify!(DAC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DAC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DAC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SWTRIGR) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SWTRIGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DHR12R1) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12R1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DHR12L1) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12L1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR8R1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8R1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DHR12R2) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12R2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DHR12L2) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12L2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR8R2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8R2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DHR12RD) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12RD)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DHR12LD) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12LD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR8RD) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8RD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOR1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DOR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOR2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DOR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHSR1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SHSR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHSR2) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SHSR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHHR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SHHR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHRR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SHRR)
        )
    );
}
#[test]
fn bindgen_test_layout_DFSDM_Filter_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DFSDM_Filter_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DFSDM_Filter_TypeDef>(),
        60usize,
        concat!("Size of: ", stringify!(DFSDM_Filter_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DFSDM_Filter_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DFSDM_Filter_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FLTCR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTCR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FLTCR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTCR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FLTISR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FLTICR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTICR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTJCHGR) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTJCHGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FLTFCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTFCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTJDATAR) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTJDATAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTRDATAR) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTRDATAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTAWHTR) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTAWHTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTAWLTR) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTAWLTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTAWSR) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTAWSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTAWCFR) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTAWCFR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTEXMAX) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTEXMAX)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTEXMIN) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTEXMIN)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTCNVTIMR) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Filter_TypeDef),
            "::",
            stringify!(FLTCNVTIMR)
        )
    );
}
#[test]
fn bindgen_test_layout_DFSDM_Channel_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DFSDM_Channel_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DFSDM_Channel_TypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(DFSDM_Channel_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DFSDM_Channel_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DFSDM_Channel_TypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CHCFGR1) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Channel_TypeDef),
            "::",
            stringify!(CHCFGR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CHCFGR2) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Channel_TypeDef),
            "::",
            stringify!(CHCFGR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CHAWSCDR) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Channel_TypeDef),
            "::",
            stringify!(CHAWSCDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CHWDATAR) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Channel_TypeDef),
            "::",
            stringify!(CHWDATAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CHDATINR) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DFSDM_Channel_TypeDef),
            "::",
            stringify!(CHDATINR)
        )
    );
}
#[test]
fn bindgen_test_layout_DBGMCU_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DBGMCU_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DBGMCU_TypeDef>(),
        88usize,
        concat!("Size of: ", stringify!(DBGMCU_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DBGMCU_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DBGMCU_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IDCODE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(IDCODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB3FZ1) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB3FZ1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1LFZ1) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB1LFZ1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1HFZ1) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB1HFZ1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB2FZ1) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB2FZ1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB4FZ1) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB4FZ1)
        )
    );
}
#[test]
fn bindgen_test_layout_DCMI_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DCMI_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DCMI_TypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(DCMI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DCMI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DCMI_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RISR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(RISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MISR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(MISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ESCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(ESCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ESUR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(ESUR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CWSTRTR) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(CWSTRTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CWSIZER) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(CWSIZER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_TypeDef),
            "::",
            stringify!(DR)
        )
    );
}
#[test]
fn bindgen_test_layout_DMA_Stream_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMA_Stream_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMA_Stream_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(DMA_Stream_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_Stream_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_Stream_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(NDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(PAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).M0AR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(M0AR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).M1AR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(M1AR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(FCR)
        )
    );
}
#[test]
fn bindgen_test_layout_DMA_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMA_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMA_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(DMA_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LISR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(LISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HISR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(HISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIFCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(LIFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HIFCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(HIFCR)
        )
    );
}
#[test]
fn bindgen_test_layout_BDMA_Channel_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<BDMA_Channel_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<BDMA_Channel_TypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(BDMA_Channel_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<BDMA_Channel_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(BDMA_Channel_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BDMA_Channel_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BDMA_Channel_TypeDef),
            "::",
            stringify!(CNDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BDMA_Channel_TypeDef),
            "::",
            stringify!(CPAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CM0AR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BDMA_Channel_TypeDef),
            "::",
            stringify!(CM0AR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CM1AR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BDMA_Channel_TypeDef),
            "::",
            stringify!(CM1AR)
        )
    );
}
#[test]
fn bindgen_test_layout_BDMA_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<BDMA_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<BDMA_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(BDMA_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<BDMA_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(BDMA_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BDMA_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BDMA_TypeDef),
            "::",
            stringify!(IFCR)
        )
    );
}
#[test]
fn bindgen_test_layout_DMAMUX_Channel_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMAMUX_Channel_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMAMUX_Channel_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(DMAMUX_Channel_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMAMUX_Channel_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMAMUX_Channel_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMAMUX_Channel_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
}
#[test]
fn bindgen_test_layout_DMAMUX_ChannelStatus_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMAMUX_ChannelStatus_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMAMUX_ChannelStatus_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(DMAMUX_ChannelStatus_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMAMUX_ChannelStatus_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMAMUX_ChannelStatus_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMAMUX_ChannelStatus_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMAMUX_ChannelStatus_TypeDef),
            "::",
            stringify!(CFR)
        )
    );
}
#[test]
fn bindgen_test_layout_DMAMUX_RequestGen_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMAMUX_RequestGen_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMAMUX_RequestGen_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(DMAMUX_RequestGen_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMAMUX_RequestGen_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMAMUX_RequestGen_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RGCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMAMUX_RequestGen_TypeDef),
            "::",
            stringify!(RGCR)
        )
    );
}
#[test]
fn bindgen_test_layout_DMAMUX_RequestGenStatus_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMAMUX_RequestGenStatus_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMAMUX_RequestGenStatus_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(DMAMUX_RequestGenStatus_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMAMUX_RequestGenStatus_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMAMUX_RequestGenStatus_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RGSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMAMUX_RequestGenStatus_TypeDef),
            "::",
            stringify!(RGSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RGCFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMAMUX_RequestGenStatus_TypeDef),
            "::",
            stringify!(RGCFR)
        )
    );
}
#[test]
fn bindgen_test_layout_MDMA_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<MDMA_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MDMA_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(MDMA_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<MDMA_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(MDMA_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GISR0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_TypeDef),
            "::",
            stringify!(GISR0)
        )
    );
}
#[test]
fn bindgen_test_layout_MDMA_Channel_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<MDMA_Channel_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MDMA_Channel_TypeDef>(),
        56usize,
        concat!("Size of: ", stringify!(MDMA_Channel_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<MDMA_Channel_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(MDMA_Channel_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CISR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CIFCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CIFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CESR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CESR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CTCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CBNDTR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CBNDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSAR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CSAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CDAR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CDAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CBRUR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CBRUR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLAR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CLAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTBR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CTBR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMAR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMDR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_Channel_TypeDef),
            "::",
            stringify!(CMDR)
        )
    );
}
#[test]
fn bindgen_test_layout_DMA2D_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMA2D_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMA2D_TypeDef>(),
        3072usize,
        concat!("Size of: ", stringify!(DMA2D_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA2D_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA2D_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(IFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FGMAR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(FGMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FGOR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(FGOR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BGMAR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(BGMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BGOR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(BGOR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FGPFCCR) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(FGPFCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FGCOLR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(FGCOLR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BGPFCCR) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(BGPFCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BGCOLR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(BGCOLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FGCMAR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(FGCMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BGCMAR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(BGCMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OPFCCR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(OPFCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OCOLR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(OCOLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OMAR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(OMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OOR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(OOR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NLR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(NLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LWR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(LWR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMTCR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(AMTCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FGCLUT) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(FGCLUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BGCLUT) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA2D_TypeDef),
            "::",
            stringify!(BGCLUT)
        )
    );
}
#[test]
fn bindgen_test_layout_ETH_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ETH_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ETH_TypeDef>(),
        4464usize,
        concat!("Size of: ", stringify!(ETH_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ETH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ETH_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACECR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACECR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACPFR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACWTR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACWTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACHT0R) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACHT0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACHT1R) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACHT1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACVTR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACVTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACVHTR) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACVHTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACVIR) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACVIR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACIVIR) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACIVIR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTFCR) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTFCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACRFCR) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACRFCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACISR) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACIER) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACIER)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACRXTXSR) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACRXTXSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACPCSR) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPCSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACRWKPFR) as usize - ptr as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACRWKPFR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACLCSR) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACLCSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACLTCR) as usize - ptr as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACLTCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACLETR) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACLETR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MAC1USTCR) as usize - ptr as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MAC1USTCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACVR) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACVR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACDR) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACHWF0R) as usize - ptr as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACHWF0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACHWF1R) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACHWF1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACHWF2R) as usize - ptr as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACHWF2R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACMDIOAR) as usize - ptr as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACMDIOAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACMDIODR) as usize - ptr as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACMDIODR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACARPAR) as usize - ptr as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACARPAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACA0HR) as usize - ptr as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA0HR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACA0LR) as usize - ptr as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA0LR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACA1HR) as usize - ptr as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA1HR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACA1LR) as usize - ptr as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA1LR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACA2HR) as usize - ptr as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA2HR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACA2LR) as usize - ptr as usize
        },
        788usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA2LR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACA3HR) as usize - ptr as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA3HR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACA3LR) as usize - ptr as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA3LR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCCR) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCRIR) as usize - ptr as usize },
        1796usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCTIR) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTIR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCRIMR) as usize - ptr as usize
        },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRIMR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCTIMR) as usize - ptr as usize
        },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTIMR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize
        },
        1812usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCTSCGPR) as usize - ptr as usize
        },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTSCGPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCTMCGPR) as usize - ptr as usize
        },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTMCGPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED16) as usize - ptr as usize
        },
        1876usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED16)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCTPCGR) as usize - ptr as usize
        },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTPCGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED17) as usize - ptr as usize
        },
        1900usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED17)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCRCRCEPR) as usize - ptr as usize
        },
        1940usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRCRCEPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCRAEPR) as usize - ptr as usize
        },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRAEPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED18) as usize - ptr as usize
        },
        1948usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED18)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCRUPGR) as usize - ptr as usize
        },
        1988usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRUPGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED19) as usize - ptr as usize
        },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED19)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCTLPIMSTR) as usize - ptr as usize
        },
        2028usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTLPIMSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCTLPITCR) as usize - ptr as usize
        },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTLPITCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCRLPIMSTR) as usize - ptr as usize
        },
        2036usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRLPIMSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MMCRLPITCR) as usize - ptr as usize
        },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRLPITCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED20) as usize - ptr as usize
        },
        2044usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED20)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3L4C0R) as usize - ptr as usize
        },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3L4C0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL4A0R) as usize - ptr as usize
        },
        2308usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL4A0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED21) as usize - ptr as usize
        },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED21)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3A0R0R) as usize - ptr as usize
        },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3A0R0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3A1R0R) as usize - ptr as usize
        },
        2324usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3A1R0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3A2R0R) as usize - ptr as usize
        },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3A2R0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3A3R0R) as usize - ptr as usize
        },
        2332usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3A3R0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED22) as usize - ptr as usize
        },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED22)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3L4C1R) as usize - ptr as usize
        },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3L4C1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL4A1R) as usize - ptr as usize
        },
        2356usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL4A1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED23) as usize - ptr as usize
        },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED23)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3A0R1R) as usize - ptr as usize
        },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3A0R1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3A1R1R) as usize - ptr as usize
        },
        2372usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3A1R1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3A2R1R) as usize - ptr as usize
        },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3A2R1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACL3A3R1R) as usize - ptr as usize
        },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACL3A3R1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED24) as usize - ptr as usize
        },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED24)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTSCR) as usize - ptr as usize
        },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTSCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACSSIR) as usize - ptr as usize
        },
        2820usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSSIR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACSTSR) as usize - ptr as usize
        },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSTSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACSTNR) as usize - ptr as usize
        },
        2828usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSTNR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACSTSUR) as usize - ptr as usize
        },
        2832usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSTSUR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACSTNUR) as usize - ptr as usize
        },
        2836usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSTNUR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTSAR) as usize - ptr as usize
        },
        2840usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTSAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED25) as usize - ptr as usize
        },
        2844usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED25)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTSSR) as usize - ptr as usize
        },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTSSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED26) as usize - ptr as usize
        },
        2852usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED26)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTTSSNR) as usize - ptr as usize
        },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTTSSNR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTTSSSR) as usize - ptr as usize
        },
        2868usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTTSSSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED27) as usize - ptr as usize
        },
        2872usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED27)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACACR) as usize - ptr as usize },
        2880usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACACR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED28) as usize - ptr as usize
        },
        2884usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED28)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACATSNR) as usize - ptr as usize
        },
        2888usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACATSNR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACATSSR) as usize - ptr as usize
        },
        2892usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACATSSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTSIACR) as usize - ptr as usize
        },
        2896usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTSIACR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTSEACR) as usize - ptr as usize
        },
        2900usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTSEACR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTSICNR) as usize - ptr as usize
        },
        2904usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTSICNR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACTSECNR) as usize - ptr as usize
        },
        2908usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACTSECNR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED29) as usize - ptr as usize
        },
        2912usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED29)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACPPSCR) as usize - ptr as usize
        },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPPSCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED30) as usize - ptr as usize
        },
        2932usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED30)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACPPSTTSR) as usize - ptr as usize
        },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPPSTTSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACPPSTTNR) as usize - ptr as usize
        },
        2948usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPPSTTNR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACPPSIR) as usize - ptr as usize
        },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPPSIR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACPPSWR) as usize - ptr as usize
        },
        2956usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPPSWR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED31) as usize - ptr as usize
        },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED31)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACPOCR) as usize - ptr as usize
        },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPOCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACSPI0R) as usize - ptr as usize
        },
        3012usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSPI0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACSPI1R) as usize - ptr as usize
        },
        3016usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSPI1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACSPI2R) as usize - ptr as usize
        },
        3020usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSPI2R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MACLMIR) as usize - ptr as usize
        },
        3024usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACLMIR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED32) as usize - ptr as usize
        },
        3028usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED32)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MTLOMR) as usize - ptr as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLOMR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED33) as usize - ptr as usize
        },
        3076usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED33)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MTLISR) as usize - ptr as usize },
        3104usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLISR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED34) as usize - ptr as usize
        },
        3108usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED34)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MTLTQOMR) as usize - ptr as usize
        },
        3328usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLTQOMR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MTLTQUR) as usize - ptr as usize
        },
        3332usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLTQUR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MTLTQDR) as usize - ptr as usize
        },
        3336usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLTQDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED35) as usize - ptr as usize
        },
        3340usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED35)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MTLQICSR) as usize - ptr as usize
        },
        3372usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLQICSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MTLRQOMR) as usize - ptr as usize
        },
        3376usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLRQOMR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MTLRQMPOCR) as usize - ptr as usize
        },
        3380usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLRQMPOCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MTLRQDR) as usize - ptr as usize
        },
        3384usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MTLRQDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED36) as usize - ptr as usize
        },
        3388usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED36)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMAMR) as usize - ptr as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMAMR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMASBMR) as usize - ptr as usize
        },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMASBMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMAISR) as usize - ptr as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMAISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMADSR) as usize - ptr as usize },
        4108usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMADSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED37) as usize - ptr as usize
        },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED37)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMACCR) as usize - ptr as usize },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACTCR) as usize - ptr as usize
        },
        4356usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACTCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACRCR) as usize - ptr as usize
        },
        4360usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACRCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED38) as usize - ptr as usize
        },
        4364usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED38)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACTDLAR) as usize - ptr as usize
        },
        4372usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACTDLAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED39) as usize - ptr as usize
        },
        4376usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED39)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACRDLAR) as usize - ptr as usize
        },
        4380usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACRDLAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACTDTPR) as usize - ptr as usize
        },
        4384usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACTDTPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED40) as usize - ptr as usize
        },
        4388usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED40)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACRDTPR) as usize - ptr as usize
        },
        4392usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACRDTPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACTDRLR) as usize - ptr as usize
        },
        4396usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACTDRLR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACRDRLR) as usize - ptr as usize
        },
        4400usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACRDRLR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACIER) as usize - ptr as usize
        },
        4404usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACIER)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACRIWTR) as usize - ptr as usize
        },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACRIWTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACSFCSR) as usize - ptr as usize
        },
        4412usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACSFCSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED41) as usize - ptr as usize
        },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED41)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACCATDR) as usize - ptr as usize
        },
        4420usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACCATDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED42) as usize - ptr as usize
        },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED42)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACCARDR) as usize - ptr as usize
        },
        4428usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACCARDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED43) as usize - ptr as usize
        },
        4432usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED43)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACCATBR) as usize - ptr as usize
        },
        4436usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACCATBR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED44) as usize - ptr as usize
        },
        4440usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED44)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACCARBR) as usize - ptr as usize
        },
        4444usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACCARBR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMACSR) as usize - ptr as usize },
        4448usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED45) as usize - ptr as usize
        },
        4452usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED45)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMACMFCR) as usize - ptr as usize
        },
        4460usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACMFCR)
        )
    );
}
#[test]
fn bindgen_test_layout_EXTI_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<EXTI_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<EXTI_TypeDef>(),
        172usize,
        concat!("Size of: ", stringify!(EXTI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<EXTI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(EXTI_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTSR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RTSR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FTSR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(FTSR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SWIER1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(SWIER1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).D3PMR1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PMR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D3PCR1L) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PCR1L)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D3PCR1H) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PCR1H)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTSR2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RTSR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FTSR2) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(FTSR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SWIER2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(SWIER2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).D3PMR2) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PMR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D3PCR2L) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PCR2L)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D3PCR2H) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PCR2H)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTSR3) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RTSR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FTSR3) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(FTSR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SWIER3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(SWIER3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).D3PMR3) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PMR3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D3PCR3L) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PCR3L)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D3PCR3H) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(D3PCR3H)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(IMR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EMR1) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(EMR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR1) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(PR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(IMR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EMR2) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(EMR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR2) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(PR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(IMR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EMR3) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(EMR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR3) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(PR3)
        )
    );
}
#[test]
fn bindgen_test_layout_EXTI_Core_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<EXTI_Core_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<EXTI_Core_TypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(EXTI_Core_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<EXTI_Core_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(EXTI_Core_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(IMR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EMR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(EMR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(PR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(IMR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EMR2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(EMR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(PR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(IMR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EMR3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(EMR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR3) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_Core_TypeDef),
            "::",
            stringify!(PR3)
        )
    );
}
#[test]
fn bindgen_test_layout_FLASH_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FLASH_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FLASH_TypeDef>(),
        356usize,
        concat!("Size of: ", stringify!(FLASH_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FLASH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FLASH_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(ACR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).KEYR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(KEYR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OPTKEYR) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTKEYR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CCR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OPTCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OPTSR_CUR) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTSR_CUR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OPTSR_PRG) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTSR_PRG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OPTCCR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTCCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PRAR_CUR1) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(PRAR_CUR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PRAR_PRG1) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(PRAR_PRG1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SCAR_CUR1) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SCAR_CUR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SCAR_PRG1) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SCAR_PRG1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WPSN_CUR1) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(WPSN_CUR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WPSN_PRG1) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(WPSN_PRG1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BOOT_CUR) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(BOOT_CUR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BOOT_PRG) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(BOOT_PRG)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRCCR1) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CRCCR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCSADD1) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CRCSADD1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCEADD1) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CRCEADD1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCDATA) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CRCDATA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ECC_FA1) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(ECC_FA1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).KEYR2) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(KEYR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR2) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR2) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CCR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PRAR_CUR2) as usize - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(PRAR_CUR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PRAR_PRG2) as usize - ptr as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(PRAR_PRG2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SCAR_CUR2) as usize - ptr as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SCAR_CUR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SCAR_PRG2) as usize - ptr as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SCAR_PRG2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WPSN_CUR2) as usize - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(WPSN_CUR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WPSN_PRG2) as usize - ptr as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(WPSN_PRG2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRCCR2) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CRCCR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCSADD2) as usize - ptr as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CRCSADD2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCEADD2) as usize - ptr as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CRCEADD2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCDATA2) as usize - ptr as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CRCDATA2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ECC_FA2) as usize - ptr as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(ECC_FA2)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_Bank1_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_Bank1_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_Bank1_TypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(FMC_Bank1_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_Bank1_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_Bank1_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BTCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank1_TypeDef),
            "::",
            stringify!(BTCR)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_Bank1E_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_Bank1E_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_Bank1E_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(FMC_Bank1E_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_Bank1E_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_Bank1E_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BWTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank1E_TypeDef),
            "::",
            stringify!(BWTR)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_Bank2_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_Bank2_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_Bank2_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(FMC_Bank2_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_Bank2_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_Bank2_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCR2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank2_TypeDef),
            "::",
            stringify!(PCR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank2_TypeDef),
            "::",
            stringify!(SR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PMEM2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank2_TypeDef),
            "::",
            stringify!(PMEM2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PATT2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank2_TypeDef),
            "::",
            stringify!(PATT2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank2_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECCR2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank2_TypeDef),
            "::",
            stringify!(ECCR2)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_Bank3_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_Bank3_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_Bank3_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(FMC_Bank3_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_Bank3_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_Bank3_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank3_TypeDef),
            "::",
            stringify!(PCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank3_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PMEM) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank3_TypeDef),
            "::",
            stringify!(PMEM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PATT) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank3_TypeDef),
            "::",
            stringify!(PATT)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank3_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank3_TypeDef),
            "::",
            stringify!(ECCR)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_Bank5_6_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_Bank5_6_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_Bank5_6_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(FMC_Bank5_6_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_Bank5_6_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_Bank5_6_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank5_6_TypeDef),
            "::",
            stringify!(SDCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDTR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank5_6_TypeDef),
            "::",
            stringify!(SDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDCMR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank5_6_TypeDef),
            "::",
            stringify!(SDCMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDRTR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank5_6_TypeDef),
            "::",
            stringify!(SDRTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDSR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Bank5_6_TypeDef),
            "::",
            stringify!(SDSR)
        )
    );
}
#[test]
fn bindgen_test_layout_GPIO_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<GPIO_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<GPIO_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(GPIO_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<GPIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(GPIO_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(MODER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OTYPER) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(OTYPER)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OSPEEDR) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(OSPEEDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PUPDR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(PUPDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IDR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ODR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(ODR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BSRR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(BSRR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LCKR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(LCKR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(AFR)
        )
    );
}
#[test]
fn bindgen_test_layout_OPAMP_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<OPAMP_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<OPAMP_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(OPAMP_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<OPAMP_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(OPAMP_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OPAMP_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OPAMP_TypeDef),
            "::",
            stringify!(OTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HSOTR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OPAMP_TypeDef),
            "::",
            stringify!(HSOTR)
        )
    );
}
#[test]
fn bindgen_test_layout_SYSCFG_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SYSCFG_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SYSCFG_TypeDef>(),
        840usize,
        concat!("Size of: ", stringify!(SYSCFG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SYSCFG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SYSCFG_TypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PMCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(PMCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXTICR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(EXTICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCCSR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(CCCSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCVR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(CCVR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCCR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(CCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PWRCR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(PWRCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PKGR) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(PKGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR0) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR1) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR2) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR4) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR5) as usize - ptr as usize },
        788usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR6) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR7) as usize - ptr as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR8) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR9) as usize - ptr as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR10) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR11) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR12) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR13) as usize - ptr as usize },
        820usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR14) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR15) as usize - ptr as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR16) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UR17) as usize - ptr as usize },
        836usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(UR17)
        )
    );
}
#[test]
fn bindgen_test_layout_I2C_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<I2C_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2C_TypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(I2C_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<I2C_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(I2C_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OAR1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(OAR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OAR2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(OAR2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TIMINGR) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(TIMINGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TIMEOUTR) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(TIMEOUTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PECR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(PECR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXDR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RXDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXDR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(TXDR)
        )
    );
}
#[test]
fn bindgen_test_layout_IWDG_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<IWDG_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<IWDG_TypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(IWDG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<IWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(IWDG_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).KR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(KR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(PR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(RLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WINR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(WINR)
        )
    );
}
#[test]
fn bindgen_test_layout_JPEG_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<JPEG_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<JPEG_TypeDef>(),
        2048usize,
        concat!("Size of: ", stringify!(JPEG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<JPEG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(JPEG_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFR0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CONFR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CONFR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFR2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CONFR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFR3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CONFR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFR4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CONFR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFR5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CONFR5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFR6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CONFR6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFR7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CONFR7)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved20) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(Reserved20)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(CFR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved3c) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(Reserved3c)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(DIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(DOR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved48) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(Reserved48)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).QMEM0) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(QMEM0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).QMEM1) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(QMEM1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).QMEM2) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(QMEM2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).QMEM3) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(QMEM3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HUFFMIN) as usize - ptr as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(HUFFMIN)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HUFFBASE) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(HUFFBASE)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HUFFSYMB) as usize - ptr as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(HUFFSYMB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHTMEM) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(DHTMEM)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved4FC) as usize - ptr as usize
        },
        1276usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(Reserved4FC)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HUFFENC_AC0) as usize - ptr as usize
        },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(HUFFENC_AC0)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HUFFENC_AC1) as usize - ptr as usize
        },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(HUFFENC_AC1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HUFFENC_DC0) as usize - ptr as usize
        },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(HUFFENC_DC0)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HUFFENC_DC1) as usize - ptr as usize
        },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(JPEG_TypeDef),
            "::",
            stringify!(HUFFENC_DC1)
        )
    );
}
#[test]
fn bindgen_test_layout_LTDC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<LTDC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<LTDC_TypeDef>(),
        76usize,
        concat!("Size of: ", stringify!(LTDC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<LTDC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(LTDC_TypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SSCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(SSCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BPCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(BPCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AWCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(AWCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TWCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(TWCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(GCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SRCR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(SRCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BCCR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(BCCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIPCR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(LIPCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPSR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(CPSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CDSR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_TypeDef),
            "::",
            stringify!(CDSR)
        )
    );
}
#[test]
fn bindgen_test_layout_LTDC_Layer_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<LTDC_Layer_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<LTDC_Layer_TypeDef>(),
        68usize,
        concat!("Size of: ", stringify!(LTDC_Layer_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<LTDC_Layer_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(LTDC_Layer_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WHPCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(WHPCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WVPCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(WVPCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CKCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(CKCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PFCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(PFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CACR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(CACR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(DCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BFCR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(BFCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFBAR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(CFBAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFBLR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(CFBLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFBLNR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(CFBLNR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLUTWR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(LTDC_Layer_TypeDef),
            "::",
            stringify!(CLUTWR)
        )
    );
}
#[test]
fn bindgen_test_layout_PWR_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PWR_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PWR_TypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(PWR_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PWR_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PWR_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CSR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPUCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CPUCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).D3CR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(D3CR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WKUPCR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(WKUPCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WKUPFR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(WKUPFR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WKUPEPR) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(WKUPEPR)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_TypeDef>(),
        304usize,
        concat!("Size of: ", stringify!(RCC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HSICFGR) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(HSICFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRRCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CRRCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSICFGR) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CSICFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).D1CFGR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(D1CFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).D2CFGR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(D2CFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).D3CFGR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(D3CFGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLLCKSELR) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLLCKSELR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLLCFGR) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLLCFGR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL1DIVR) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLL1DIVR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL1FRACR) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLL1FRACR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL2DIVR) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLL2DIVR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL2FRACR) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLL2FRACR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL3DIVR) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLL3DIVR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL3FRACR) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLL3FRACR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D1CCIPR) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(D1CCIPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D2CCIP1R) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(D2CCIP1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D2CCIP2R) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(D2CCIP2R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).D3CCIPR) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(D3CCIPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CIER) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CIER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CIFR) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CIFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CICR) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CICR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BDCR) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(BDCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB3RSTR) as usize - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB3RSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB1RSTR) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB1RSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB2RSTR) as usize - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB2RSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB4RSTR) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB4RSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB3RSTR) as usize - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB3RSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1LRSTR) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1LRSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1HRSTR) as usize - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1HRSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB2RSTR) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2RSTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB4RSTR) as usize - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB4RSTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GCR) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(GCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).D3AMR) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(D3AMR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RSR) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB3ENR) as usize - ptr as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB3ENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB1ENR) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB1ENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB2ENR) as usize - ptr as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB2ENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB4ENR) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB4ENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB3ENR) as usize - ptr as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB3ENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1LENR) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1LENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1HENR) as usize - ptr as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1HENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB2ENR) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2ENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB4ENR) as usize - ptr as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB4ENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB3LPENR) as usize - ptr as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB3LPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB1LPENR) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB1LPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB2LPENR) as usize - ptr as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB2LPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHB4LPENR) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB4LPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB3LPENR) as usize - ptr as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB3LPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1LLPENR) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1LLPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1HLPENR) as usize - ptr as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1HLPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB2LPENR) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2LPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB4LPENR) as usize - ptr as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB4LPENR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED13)
        )
    );
}
#[test]
fn bindgen_test_layout_RTC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RTC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RTC_TypeDef>(),
        208usize,
        concat!("Size of: ", stringify!(RTC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRER) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(PRER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WUTR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(WUTR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ALRMAR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ALRMBR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMBR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WPR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(WPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SSR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(SSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHIFTR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(SHIFTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TSTR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TSDR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TSSSR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSSSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CALR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CALR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TAMPCR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TAMPCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ALRMASSR) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMASSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ALRMBSSR) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMBSSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(OR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP0R) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP0R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP1R) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP2R) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP2R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP3R) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP3R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP4R) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP4R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP5R) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP5R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP6R) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP6R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP7R) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP7R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP8R) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP8R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP9R) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP9R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP10R) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP10R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP11R) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP11R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP12R) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP12R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP13R) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP13R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP14R) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP14R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP15R) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP15R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP16R) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP16R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP17R) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP17R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP18R) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP18R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP19R) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP19R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP20R) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP20R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP21R) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP21R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP22R) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP22R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP23R) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP23R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP24R) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP24R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP25R) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP25R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP26R) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP26R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP27R) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP27R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP28R) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP28R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP29R) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP29R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP30R) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP30R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BKP31R) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP31R)
        )
    );
}
#[test]
fn bindgen_test_layout_SAI_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SAI_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SAI_TypeDef>(),
        76usize,
        concat!("Size of: ", stringify!(SAI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SAI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SAI_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_TypeDef),
            "::",
            stringify!(GCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PDMCR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_TypeDef),
            "::",
            stringify!(PDMCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PDMDLY) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_TypeDef),
            "::",
            stringify!(PDMDLY)
        )
    );
}
#[test]
fn bindgen_test_layout_SAI_Block_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SAI_Block_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SAI_Block_TypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(SAI_Block_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SAI_Block_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SAI_Block_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_Block_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_Block_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FRCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_Block_TypeDef),
            "::",
            stringify!(FRCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SLOTR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_Block_TypeDef),
            "::",
            stringify!(SLOTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_Block_TypeDef),
            "::",
            stringify!(IMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_Block_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLRFR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_Block_TypeDef),
            "::",
            stringify!(CLRFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SAI_Block_TypeDef),
            "::",
            stringify!(DR)
        )
    );
}
#[test]
fn bindgen_test_layout_SPDIFRX_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SPDIFRX_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPDIFRX_TypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(SPDIFRX_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SPDIFRX_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SPDIFRX_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPDIFRX_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPDIFRX_TypeDef),
            "::",
            stringify!(IMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPDIFRX_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPDIFRX_TypeDef),
            "::",
            stringify!(IFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPDIFRX_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SPDIFRX_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPDIFRX_TypeDef),
            "::",
            stringify!(DIR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SPDIFRX_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
}
#[test]
fn bindgen_test_layout_SDMMC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDMMC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDMMC_TypeDef>(),
        1024usize,
        concat!("Size of: ", stringify!(SDMMC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDMMC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDMMC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).POWER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(POWER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLKCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(CLKCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ARG) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(ARG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMD) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(CMD)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESPCMD) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(RESPCMD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESP1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(RESP1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESP2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(RESP2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESP3) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(RESP3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESP4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(RESP4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DTIMER) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(DTIMER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DLEN) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(DLEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCTRL) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(DCTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCOUNT) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(DCOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STA) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(STA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MASK) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(MASK)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ACKTIME) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(ACKTIME)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IDMACTRL) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(IDMACTRL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IDMABSIZE) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(IDMABSIZE)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IDMABASE0) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(IDMABASE0)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IDMABASE1) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(IDMABASE1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FIFO) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(FIFO)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IPVR) as usize - ptr as usize },
        1020usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_TypeDef),
            "::",
            stringify!(IPVR)
        )
    );
}
#[test]
fn bindgen_test_layout_DLYB_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DLYB_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DLYB_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(DLYB_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DLYB_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DLYB_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DLYB_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DLYB_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
}
#[test]
fn bindgen_test_layout_HSEM_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HSEM_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HSEM_TypeDef>(),
        328usize,
        concat!("Size of: ", stringify!(HSEM_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HSEM_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HSEM_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).R) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RLR) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(RLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).C1IER) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(C1IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).C1ICR) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(C1ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).C1ISR) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(C1ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).C1MISR) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(C1MISR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).KEYR) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_TypeDef),
            "::",
            stringify!(KEYR)
        )
    );
}
#[test]
fn bindgen_test_layout_HSEM_Common_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HSEM_Common_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HSEM_Common_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(HSEM_Common_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HSEM_Common_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HSEM_Common_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_Common_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_Common_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_Common_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MISR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HSEM_Common_TypeDef),
            "::",
            stringify!(MISR)
        )
    );
}
#[test]
fn bindgen_test_layout_SPI_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SPI_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPI_TypeDef>(),
        84usize,
        concat!("Size of: ", stringify!(SPI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SPI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SPI_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFG1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CFG1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFG2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CFG2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(IFCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXDR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(TXDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXDR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RXDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCPOLY) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CRCPOLY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXCRC) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(TXCRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXCRC) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RXCRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UDRDR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(UDRDR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).I2SCFGR) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(I2SCFGR)
        )
    );
}
#[test]
fn bindgen_test_layout_QUADSPI_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<QUADSPI_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<QUADSPI_TypeDef>(),
        52usize,
        concat!("Size of: ", stringify!(QUADSPI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<QUADSPI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(QUADSPI_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(DCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(FCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DLR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(DLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(AR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ABR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(ABR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSMKR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(PSMKR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSMAR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(PSMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PIR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(PIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LPTR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(QUADSPI_TypeDef),
            "::",
            stringify!(LPTR)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_TypeDef>(),
        108usize,
        concat!("Size of: ", stringify!(TIM_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SMCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(SMCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIER) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DIER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EGR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(EGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCMR1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCMR2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCER) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSC) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(PSC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ARR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(ARR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RCR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR1) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR3) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR4) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BDTR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(BDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMAR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DMAR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCMR3) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR5) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR6) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AF1) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(AF1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AF2) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(AF2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TISEL) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(TISEL)
        )
    );
}
#[test]
fn bindgen_test_layout_LPTIM_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<LPTIM_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<LPTIM_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(LPTIM_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<LPTIM_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(LPTIM_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMP) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(CMP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ARR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(ARR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR2) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTIM_TypeDef),
            "::",
            stringify!(CFGR2)
        )
    );
}
#[test]
fn bindgen_test_layout_COMPOPT_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<COMPOPT_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<COMPOPT_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(COMPOPT_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<COMPOPT_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(COMPOPT_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COMPOPT_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(COMPOPT_TypeDef),
            "::",
            stringify!(ICFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(COMPOPT_TypeDef),
            "::",
            stringify!(OR)
        )
    );
}
#[test]
fn bindgen_test_layout_COMP_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<COMP_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<COMP_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(COMP_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<COMP_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(COMP_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COMP_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
}
#[test]
fn bindgen_test_layout_COMP_Common_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<COMP_Common_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<COMP_Common_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(COMP_Common_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<COMP_Common_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(COMP_Common_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COMP_Common_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
}
#[test]
fn bindgen_test_layout_USART_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USART_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USART_TypeDef>(),
        48usize,
        concat!("Size of: ", stringify!(USART_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USART_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USART_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BRR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GTPR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(GTPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTOR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RTOR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RQR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RQR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RDR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TDR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(TDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRESC) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(PRESC)
        )
    );
}
#[test]
fn bindgen_test_layout_SWPMI_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SWPMI_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SWPMI_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(SWPMI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SWPMI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SWPMI_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BRR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RFL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(RFL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TDR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(TDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RDR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(RDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SWPMI_TypeDef),
            "::",
            stringify!(OR)
        )
    );
}
#[test]
fn bindgen_test_layout_WWDG_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<WWDG_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<WWDG_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(WWDG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<WWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(WWDG_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(CFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
#[test]
fn bindgen_test_layout_RAMECC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RAMECC_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RAMECC_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(RAMECC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RAMECC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RAMECC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RAMECC_TypeDef),
            "::",
            stringify!(IER)
        )
    );
}
#[test]
fn bindgen_test_layout_CRYP_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CRYP_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CRYP_TypeDef>(),
        144usize,
        concat!("Size of: ", stringify!(CRYP_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CRYP_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CRYP_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIN) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(DIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUT) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(DOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMACR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(DMACR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMSCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(IMSCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RISR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(RISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MISR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(MISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).K0LR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(K0LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).K0RR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(K0RR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).K1LR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(K1LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).K1RR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(K1RR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).K2LR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(K2LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).K2RR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(K2RR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).K3LR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(K3LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).K3RR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(K3RR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IV0LR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(IV0LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IV0RR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(IV0RR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IV1LR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(IV1LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IV1RR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(IV1RR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCMCCM0R) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCMCCM0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCMCCM1R) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCMCCM1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCMCCM2R) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCMCCM2R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCMCCM3R) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCMCCM3R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCMCCM4R) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCMCCM4R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCMCCM5R) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCMCCM5R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCMCCM6R) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCMCCM6R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCMCCM7R) as usize - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCMCCM7R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCM0R) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCM0R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCM1R) as usize - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCM1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCM2R) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCM2R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCM3R) as usize - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCM3R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCM4R) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCM4R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCM5R) as usize - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCM5R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCM6R) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCM6R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSGCM7R) as usize - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYP_TypeDef),
            "::",
            stringify!(CSGCM7R)
        )
    );
}
#[test]
fn bindgen_test_layout_HASH_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HASH_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HASH_TypeDef>(),
        464usize,
        concat!("Size of: ", stringify!(HASH_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HASH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HASH_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_TypeDef),
            "::",
            stringify!(DIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_TypeDef),
            "::",
            stringify!(STR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_TypeDef),
            "::",
            stringify!(HR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_TypeDef),
            "::",
            stringify!(IMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[test]
fn bindgen_test_layout_HASH_DIGEST_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HASH_DIGEST_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HASH_DIGEST_TypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(HASH_DIGEST_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HASH_DIGEST_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HASH_DIGEST_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_DIGEST_TypeDef),
            "::",
            stringify!(HR)
        )
    );
}
#[test]
fn bindgen_test_layout_HRTIM_Master_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HRTIM_Master_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HRTIM_Master_TypeDef>(),
        128usize,
        concat!("Size of: ", stringify!(HRTIM_Master_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HRTIM_Master_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HRTIM_Master_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MISR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MICR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MDIER) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MDIER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCNTR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MCNTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MPER) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MPER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MREP) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MREP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCMP1R) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MCMP1R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCMP2R) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MCMP2R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCMP3R) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MCMP3R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCMP4R) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(MCMP4R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Master_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
}
#[test]
fn bindgen_test_layout_HRTIM_Timerx_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HRTIM_Timerx_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HRTIM_Timerx_TypeDef>(),
        128usize,
        concat!("Size of: ", stringify!(HRTIM_Timerx_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HRTIM_Timerx_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HRTIM_Timerx_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIMxCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(TIMxCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TIMxISR) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(TIMxISR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TIMxICR) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(TIMxICR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TIMxDIER) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(TIMxDIER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNTxR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CNTxR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PERxR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(PERxR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REPxR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(REPxR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMP1xR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CMP1xR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CMP1CxR) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CMP1CxR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMP2xR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CMP2xR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMP3xR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CMP3xR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMP4xR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CMP4xR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPT1xR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CPT1xR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPT2xR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CPT2xR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DTxR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(DTxR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SETx1R) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(SETx1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RSTx1R) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(RSTx1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SETx2R) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(SETx2R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RSTx2R) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(RSTx2R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EEFxR1) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(EEFxR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EEFxR2) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(EEFxR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RSTxR) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(RSTxR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CHPxR) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CHPxR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CPT1xCR) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CPT1xCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CPT2xCR) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(CPT2xCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OUTxR) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(OUTxR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FLTxR) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(FLTxR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Timerx_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
}
#[test]
fn bindgen_test_layout_HRTIM_Common_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HRTIM_Common_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HRTIM_Common_TypeDef>(),
        116usize,
        concat!("Size of: ", stringify!(HRTIM_Common_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HRTIM_Common_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HRTIM_Common_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OENR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(OENR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ODISR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(ODISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ODSR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(ODSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BMCR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BMCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BMTRGR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BMTRGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BMCMPR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BMCMPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BMPER) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BMPER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EECR1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(EECR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EECR2) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(EECR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EECR3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(EECR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC1R) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(ADC1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC2R) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(ADC2R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC3R) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(ADC3R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC4R) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(ADC4R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTINR1) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(FLTINR1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FLTINR2) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(FLTINR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BDMUPR) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BDMUPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BDTAUPR) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BDTAUPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BDTBUPR) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BDTBUPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BDTCUPR) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BDTCUPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BDTDUPR) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BDTDUPR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BDTEUPR) as usize - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BDTEUPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BDMADR) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_Common_TypeDef),
            "::",
            stringify!(BDMADR)
        )
    );
}
#[test]
fn bindgen_test_layout_HRTIM_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HRTIM_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HRTIM_TypeDef>(),
        1012usize,
        concat!("Size of: ", stringify!(HRTIM_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HRTIM_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HRTIM_TypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).sMasterRegs) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_TypeDef),
            "::",
            stringify!(sMasterRegs)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).sTimerxRegs) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_TypeDef),
            "::",
            stringify!(sTimerxRegs)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).sCommonRegs) as usize - ptr as usize
        },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(HRTIM_TypeDef),
            "::",
            stringify!(sCommonRegs)
        )
    );
}
#[test]
fn bindgen_test_layout_RNG_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RNG_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RNG_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(RNG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RNG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RNG_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNG_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RNG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RNG_TypeDef),
            "::",
            stringify!(DR)
        )
    );
}
#[test]
fn bindgen_test_layout_MDIOS_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<MDIOS_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MDIOS_TypeDef>(),
        512usize,
        concat!("Size of: ", stringify!(MDIOS_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<MDIOS_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(MDIOS_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WRFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(WRFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CWRFR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(CWRFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RDFR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(RDFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRDFR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(CRDFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLRFR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(CLRFR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR0) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR1) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR2) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR3) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR4) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR5) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR6) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR7) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR8) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR9) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR10) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR11) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR12) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR13) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR14) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR15) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR16) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR17) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR17)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR18) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR18)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR19) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR19)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR20) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR20)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR21) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR21)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR22) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR22)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR23) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR23)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR24) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR24)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR25) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR25)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR26) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR26)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR27) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR27)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR28) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR28)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR29) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR29)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR30) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR30)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DINR31) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DINR31)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR0) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR1) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR2) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR3) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR4) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR5) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR6) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR7) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR8) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOUTR9) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR9)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR10) as usize - ptr as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR10)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR11) as usize - ptr as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR11)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR12) as usize - ptr as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR12)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR13) as usize - ptr as usize
        },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR13)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR14) as usize - ptr as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR14)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR15) as usize - ptr as usize
        },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR15)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR16) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR16)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR17) as usize - ptr as usize
        },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR17)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR18) as usize - ptr as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR18)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR19) as usize - ptr as usize
        },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR19)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR20) as usize - ptr as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR20)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR21) as usize - ptr as usize
        },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR21)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR22) as usize - ptr as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR22)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR23) as usize - ptr as usize
        },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR23)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR24) as usize - ptr as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR24)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR25) as usize - ptr as usize
        },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR25)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR26) as usize - ptr as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR26)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR27) as usize - ptr as usize
        },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR27)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR28) as usize - ptr as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR28)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR29) as usize - ptr as usize
        },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR29)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR30) as usize - ptr as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR30)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DOUTR31) as usize - ptr as usize
        },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(MDIOS_TypeDef),
            "::",
            stringify!(DOUTR31)
        )
    );
}
pub mod IRQn_Type {
    pub type Type = ::core::ffi::c_int;
    pub const NonMaskableInt_IRQn: Type = -14;
    pub const HardFault_IRQn: Type = -13;
    pub const MemoryManagement_IRQn: Type = -12;
    pub const BusFault_IRQn: Type = -11;
    pub const UsageFault_IRQn: Type = -10;
    pub const SVCall_IRQn: Type = -5;
    pub const DebugMonitor_IRQn: Type = -4;
    pub const PendSV_IRQn: Type = -2;
    pub const SysTick_IRQn: Type = -1;
    pub const WWDG_IRQn: Type = 0;
    pub const PVD_AVD_IRQn: Type = 1;
    pub const TAMP_STAMP_IRQn: Type = 2;
    pub const RTC_WKUP_IRQn: Type = 3;
    pub const FLASH_IRQn: Type = 4;
    pub const RCC_IRQn: Type = 5;
    pub const EXTI0_IRQn: Type = 6;
    pub const EXTI1_IRQn: Type = 7;
    pub const EXTI2_IRQn: Type = 8;
    pub const EXTI3_IRQn: Type = 9;
    pub const EXTI4_IRQn: Type = 10;
    pub const DMA1_Stream0_IRQn: Type = 11;
    pub const DMA1_Stream1_IRQn: Type = 12;
    pub const DMA1_Stream2_IRQn: Type = 13;
    pub const DMA1_Stream3_IRQn: Type = 14;
    pub const DMA1_Stream4_IRQn: Type = 15;
    pub const DMA1_Stream5_IRQn: Type = 16;
    pub const DMA1_Stream6_IRQn: Type = 17;
    pub const ADC_IRQn: Type = 18;
    pub const FDCAN1_IT0_IRQn: Type = 19;
    pub const FDCAN2_IT0_IRQn: Type = 20;
    pub const FDCAN1_IT1_IRQn: Type = 21;
    pub const FDCAN2_IT1_IRQn: Type = 22;
    pub const EXTI9_5_IRQn: Type = 23;
    pub const TIM1_BRK_IRQn: Type = 24;
    pub const TIM1_UP_IRQn: Type = 25;
    pub const TIM1_TRG_COM_IRQn: Type = 26;
    pub const TIM1_CC_IRQn: Type = 27;
    pub const TIM2_IRQn: Type = 28;
    pub const TIM3_IRQn: Type = 29;
    pub const TIM4_IRQn: Type = 30;
    pub const I2C1_EV_IRQn: Type = 31;
    pub const I2C1_ER_IRQn: Type = 32;
    pub const I2C2_EV_IRQn: Type = 33;
    pub const I2C2_ER_IRQn: Type = 34;
    pub const SPI1_IRQn: Type = 35;
    pub const SPI2_IRQn: Type = 36;
    pub const USART1_IRQn: Type = 37;
    pub const USART2_IRQn: Type = 38;
    pub const USART3_IRQn: Type = 39;
    pub const EXTI15_10_IRQn: Type = 40;
    pub const RTC_Alarm_IRQn: Type = 41;
    pub const TIM8_BRK_TIM12_IRQn: Type = 43;
    pub const TIM8_UP_TIM13_IRQn: Type = 44;
    pub const TIM8_TRG_COM_TIM14_IRQn: Type = 45;
    pub const TIM8_CC_IRQn: Type = 46;
    pub const DMA1_Stream7_IRQn: Type = 47;
    pub const FMC_IRQn: Type = 48;
    pub const SDMMC1_IRQn: Type = 49;
    pub const TIM5_IRQn: Type = 50;
    pub const SPI3_IRQn: Type = 51;
    pub const UART4_IRQn: Type = 52;
    pub const UART5_IRQn: Type = 53;
    pub const TIM6_DAC_IRQn: Type = 54;
    pub const TIM7_IRQn: Type = 55;
    pub const DMA2_Stream0_IRQn: Type = 56;
    pub const DMA2_Stream1_IRQn: Type = 57;
    pub const DMA2_Stream2_IRQn: Type = 58;
    pub const DMA2_Stream3_IRQn: Type = 59;
    pub const DMA2_Stream4_IRQn: Type = 60;
    pub const ETH_IRQn: Type = 61;
    pub const ETH_WKUP_IRQn: Type = 62;
    pub const FDCAN_CAL_IRQn: Type = 63;
    pub const DMA2_Stream5_IRQn: Type = 68;
    pub const DMA2_Stream6_IRQn: Type = 69;
    pub const DMA2_Stream7_IRQn: Type = 70;
    pub const USART6_IRQn: Type = 71;
    pub const I2C3_EV_IRQn: Type = 72;
    pub const I2C3_ER_IRQn: Type = 73;
    pub const OTG_HS_EP1_OUT_IRQn: Type = 74;
    pub const OTG_HS_EP1_IN_IRQn: Type = 75;
    pub const OTG_HS_WKUP_IRQn: Type = 76;
    pub const OTG_HS_IRQn: Type = 77;
    pub const DCMI_IRQn: Type = 78;
    pub const CRYP_IRQn: Type = 79;
    pub const HASH_RNG_IRQn: Type = 80;
    pub const FPU_IRQn: Type = 81;
    pub const UART7_IRQn: Type = 82;
    pub const UART8_IRQn: Type = 83;
    pub const SPI4_IRQn: Type = 84;
    pub const SPI5_IRQn: Type = 85;
    pub const SPI6_IRQn: Type = 86;
    pub const SAI1_IRQn: Type = 87;
    pub const LTDC_IRQn: Type = 88;
    pub const LTDC_ER_IRQn: Type = 89;
    pub const DMA2D_IRQn: Type = 90;
    pub const SAI2_IRQn: Type = 91;
    pub const QUADSPI_IRQn: Type = 92;
    pub const LPTIM1_IRQn: Type = 93;
    pub const CEC_IRQn: Type = 94;
    pub const I2C4_EV_IRQn: Type = 95;
    pub const I2C4_ER_IRQn: Type = 96;
    pub const SPDIF_RX_IRQn: Type = 97;
    pub const OTG_FS_EP1_OUT_IRQn: Type = 98;
    pub const OTG_FS_EP1_IN_IRQn: Type = 99;
    pub const OTG_FS_WKUP_IRQn: Type = 100;
    pub const OTG_FS_IRQn: Type = 101;
    pub const DMAMUX1_OVR_IRQn: Type = 102;
    pub const HRTIM1_Master_IRQn: Type = 103;
    pub const HRTIM1_TIMA_IRQn: Type = 104;
    pub const HRTIM1_TIMB_IRQn: Type = 105;
    pub const HRTIM1_TIMC_IRQn: Type = 106;
    pub const HRTIM1_TIMD_IRQn: Type = 107;
    pub const HRTIM1_TIME_IRQn: Type = 108;
    pub const HRTIM1_FLT_IRQn: Type = 109;
    pub const DFSDM1_FLT0_IRQn: Type = 110;
    pub const DFSDM1_FLT1_IRQn: Type = 111;
    pub const DFSDM1_FLT2_IRQn: Type = 112;
    pub const DFSDM1_FLT3_IRQn: Type = 113;
    pub const SAI3_IRQn: Type = 114;
    pub const SWPMI1_IRQn: Type = 115;
    pub const TIM15_IRQn: Type = 116;
    pub const TIM16_IRQn: Type = 117;
    pub const TIM17_IRQn: Type = 118;
    pub const MDIOS_WKUP_IRQn: Type = 119;
    pub const MDIOS_IRQn: Type = 120;
    pub const JPEG_IRQn: Type = 121;
    pub const MDMA_IRQn: Type = 122;
    pub const SDMMC2_IRQn: Type = 124;
    pub const HSEM1_IRQn: Type = 125;
    pub const ADC3_IRQn: Type = 127;
    pub const DMAMUX2_OVR_IRQn: Type = 128;
    pub const BDMA_Channel0_IRQn: Type = 129;
    pub const BDMA_Channel1_IRQn: Type = 130;
    pub const BDMA_Channel2_IRQn: Type = 131;
    pub const BDMA_Channel3_IRQn: Type = 132;
    pub const BDMA_Channel4_IRQn: Type = 133;
    pub const BDMA_Channel5_IRQn: Type = 134;
    pub const BDMA_Channel6_IRQn: Type = 135;
    pub const BDMA_Channel7_IRQn: Type = 136;
    pub const COMP_IRQn: Type = 137;
    pub const LPTIM2_IRQn: Type = 138;
    pub const LPTIM3_IRQn: Type = 139;
    pub const LPTIM4_IRQn: Type = 140;
    pub const LPTIM5_IRQn: Type = 141;
    pub const LPUART1_IRQn: Type = 142;
    pub const CRS_IRQn: Type = 144;
    pub const ECC_IRQn: Type = 145;
    pub const SAI4_IRQn: Type = 146;
    pub const WAKEUP_PIN_IRQn: Type = 149;
}
