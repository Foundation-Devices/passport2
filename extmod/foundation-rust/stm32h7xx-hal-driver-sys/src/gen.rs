/* automatically generated by rust-bindgen 0.69.5 */

use cmsis_device_h7_sys::*;

pub type DMA_HandleTypeDef = __DMA_HandleTypeDef;
pub type MDMA_HandleTypeDef = __MDMA_HandleTypeDef;
pub type HCD_TypeDef = USB_OTG_GlobalTypeDef;
pub type HCD_InitTypeDef = USB_OTG_CfgTypeDef;
pub type HCD_HCTypeDef = USB_OTG_HCTypeDef;
pub type I2C_HandleTypeDef = __I2C_HandleTypeDef;
pub type I2S_HandleTypeDef = __I2S_HandleTypeDef;
pub type PCD_TypeDef = USB_OTG_GlobalTypeDef;
pub type PCD_InitTypeDef = USB_OTG_CfgTypeDef;
pub type PCD_EPTypeDef = USB_OTG_EPTypeDef;
pub type HAL_SD_CardStateTypeDef = u32;
pub type SPI_HandleTypeDef = __SPI_HandleTypeDef;
pub type HAL_UART_StateTypeDef = u32;
pub type UART_HandleTypeDef = __UART_HandleTypeDef;
pub type USART_HandleTypeDef = __USART_HandleTypeDef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_GlobalTypeDef {
    pub CREL: u32,
    pub ENDN: u32,
    pub RESERVED1: u32,
    pub DBTP: u32,
    pub TEST: u32,
    pub RWD: u32,
    pub CCCR: u32,
    pub NBTP: u32,
    pub TSCC: u32,
    pub TSCV: u32,
    pub TOCC: u32,
    pub TOCV: u32,
    pub RESERVED2: [u32; 4usize],
    pub ECR: u32,
    pub PSR: u32,
    pub TDCR: u32,
    pub RESERVED3: u32,
    pub IR: u32,
    pub IE: u32,
    pub ILS: u32,
    pub ILE: u32,
    pub RESERVED4: [u32; 8usize],
    pub GFC: u32,
    pub SIDFC: u32,
    pub XIDFC: u32,
    pub RESERVED5: u32,
    pub XIDAM: u32,
    pub HPMS: u32,
    pub NDAT1: u32,
    pub NDAT2: u32,
    pub RXF0C: u32,
    pub RXF0S: u32,
    pub RXF0A: u32,
    pub RXBC: u32,
    pub RXF1C: u32,
    pub RXF1S: u32,
    pub RXF1A: u32,
    pub RXESC: u32,
    pub TXBC: u32,
    pub TXFQS: u32,
    pub TXESC: u32,
    pub TXBRP: u32,
    pub TXBAR: u32,
    pub TXBCR: u32,
    pub TXBTO: u32,
    pub TXBCF: u32,
    pub TXBTIE: u32,
    pub TXBCIE: u32,
    pub RESERVED6: [u32; 2usize],
    pub TXEFC: u32,
    pub TXEFS: u32,
    pub TXEFA: u32,
    pub RESERVED7: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USB_OTG_GlobalTypeDef {
    pub GOTGCTL: u32,
    pub GOTGINT: u32,
    pub GAHBCFG: u32,
    pub GUSBCFG: u32,
    pub GRSTCTL: u32,
    pub GINTSTS: u32,
    pub GINTMSK: u32,
    pub GRXSTSR: u32,
    pub GRXSTSP: u32,
    pub GRXFSIZ: u32,
    pub DIEPTXF0_HNPTXFSIZ: u32,
    pub HNPTXSTS: u32,
    pub Reserved30: [u32; 2usize],
    pub GCCFG: u32,
    pub CID: u32,
    pub GSNPSID: u32,
    pub GHWCFG1: u32,
    pub GHWCFG2: u32,
    pub GHWCFG3: u32,
    pub Reserved6: u32,
    pub GLPMCFG: u32,
    pub GPWRDN: u32,
    pub GDFIFOCFG: u32,
    pub GADPCTL: u32,
    pub Reserved43: [u32; 39usize],
    pub HPTXFSIZ: u32,
    pub DIEPTXF: [u32; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_InitTypeDef {
    pub Request: u32,
    pub Direction: u32,
    pub PeriphInc: u32,
    pub MemInc: u32,
    pub PeriphDataAlignment: u32,
    pub MemDataAlignment: u32,
    pub Mode: u32,
    pub Priority: u32,
    pub FIFOMode: u32,
    pub FIFOThreshold: u32,
    pub MemBurst: u32,
    pub PeriphBurst: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DMA_HandleTypeDef {
    pub Instance: *mut ::core::ffi::c_void,
    pub Init: DMA_InitTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_DMA_StateTypeDef::Type,
    pub Parent: *mut ::core::ffi::c_void,
    pub XferCpltCallback: ::core::option::Option<
        unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef),
    >,
    pub XferHalfCpltCallback: ::core::option::Option<
        unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef),
    >,
    pub XferM1CpltCallback: ::core::option::Option<
        unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef),
    >,
    pub XferM1HalfCpltCallback: ::core::option::Option<
        unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef),
    >,
    pub XferErrorCallback: ::core::option::Option<
        unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef),
    >,
    pub XferAbortCallback: ::core::option::Option<
        unsafe extern "C" fn(hdma: *mut __DMA_HandleTypeDef),
    >,
    pub ErrorCode: u32,
    pub StreamBaseAddress: u32,
    pub StreamIndex: u32,
    pub DMAmuxChannel: *mut DMAMUX_Channel_TypeDef,
    pub DMAmuxChannelStatus: *mut DMAMUX_ChannelStatus_TypeDef,
    pub DMAmuxChannelStatusMask: u32,
    pub DMAmuxRequestGen: *mut DMAMUX_RequestGen_TypeDef,
    pub DMAmuxRequestGenStatus: *mut DMAMUX_RequestGenStatus_TypeDef,
    pub DMAmuxRequestGenStatusMask: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAL_DMA_MuxSyncConfigTypeDef {
    pub SyncSignalID: u32,
    pub SyncPolarity: u32,
    pub SyncEnable: FunctionalState::Type,
    pub EventEnable: FunctionalState::Type,
    pub RequestNumber: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAL_DMA_MuxRequestGeneratorConfigTypeDef {
    pub SignalID: u32,
    pub Polarity: u32,
    pub RequestNumber: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDMA_InitTypeDef {
    pub Request: u32,
    pub TransferTriggerMode: u32,
    pub Priority: u32,
    pub Endianness: u32,
    pub SourceInc: u32,
    pub DestinationInc: u32,
    pub SourceDataSize: u32,
    pub DestDataSize: u32,
    pub DataAlignment: u32,
    pub BufferTransferLength: u32,
    pub SourceBurst: u32,
    pub DestBurst: u32,
    pub SourceBlockAddressOffset: i32,
    pub DestBlockAddressOffset: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDMA_LinkNodeTypeDef {
    pub CTCR: u32,
    pub CBNDTR: u32,
    pub CSAR: u32,
    pub CDAR: u32,
    pub CBRUR: u32,
    pub CLAR: u32,
    pub CTBR: u32,
    pub Reserved: u32,
    pub CMAR: u32,
    pub CMDR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDMA_LinkNodeConfTypeDef {
    pub Init: MDMA_InitTypeDef,
    pub SrcAddress: u32,
    pub DstAddress: u32,
    pub BlockDataLength: u32,
    pub BlockCount: u32,
    pub PostRequestMaskAddress: u32,
    pub PostRequestMaskData: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __MDMA_HandleTypeDef {
    pub Instance: *mut MDMA_Channel_TypeDef,
    pub Init: MDMA_InitTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_MDMA_StateTypeDef::Type,
    pub Parent: *mut ::core::ffi::c_void,
    pub XferCpltCallback: ::core::option::Option<
        unsafe extern "C" fn(hmdma: *mut __MDMA_HandleTypeDef),
    >,
    pub XferBufferCpltCallback: ::core::option::Option<
        unsafe extern "C" fn(hmdma: *mut __MDMA_HandleTypeDef),
    >,
    pub XferBlockCpltCallback: ::core::option::Option<
        unsafe extern "C" fn(hmdma: *mut __MDMA_HandleTypeDef),
    >,
    pub XferRepeatBlockCpltCallback: ::core::option::Option<
        unsafe extern "C" fn(hmdma: *mut __MDMA_HandleTypeDef),
    >,
    pub XferErrorCallback: ::core::option::Option<
        unsafe extern "C" fn(hmdma: *mut __MDMA_HandleTypeDef),
    >,
    pub XferAbortCallback: ::core::option::Option<
        unsafe extern "C" fn(hmdma: *mut __MDMA_HandleTypeDef),
    >,
    pub FirstLinkedListNodeAddress: *mut MDMA_LinkNodeTypeDef,
    pub LastLinkedListNodeAddress: *mut MDMA_LinkNodeTypeDef,
    pub LinkedListNodeCounter: u32,
    pub ErrorCode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_OversamplingTypeDef {
    pub Ratio: u32,
    pub RightBitShift: u32,
    pub TriggeredMode: u32,
    pub OversamplingStopReset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InitTypeDef {
    pub ClockPrescaler: u32,
    pub Resolution: u32,
    pub ScanConvMode: u32,
    pub EOCSelection: u32,
    pub LowPowerAutoWait: FunctionalState::Type,
    pub ContinuousConvMode: FunctionalState::Type,
    pub NbrOfConversion: u32,
    pub DiscontinuousConvMode: FunctionalState::Type,
    pub NbrOfDiscConversion: u32,
    pub ExternalTrigConv: u32,
    pub ExternalTrigConvEdge: u32,
    pub ConversionDataManagement: u32,
    pub Overrun: u32,
    pub LeftBitShift: u32,
    pub OversamplingMode: FunctionalState::Type,
    pub Oversampling: ADC_OversamplingTypeDef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_ChannelConfTypeDef {
    pub Channel: u32,
    pub Rank: u32,
    pub SamplingTime: u32,
    pub SingleDiff: u32,
    pub OffsetNumber: u32,
    pub Offset: u32,
    pub OffsetRightShift: FunctionalState::Type,
    pub OffsetSignedSaturation: FunctionalState::Type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_AnalogWDGConfTypeDef {
    pub WatchdogNumber: u32,
    pub WatchdogMode: u32,
    pub Channel: u32,
    pub ITMode: FunctionalState::Type,
    pub HighThreshold: u32,
    pub LowThreshold: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InjectionConfigTypeDef {
    pub ContextQueue: u32,
    pub ChannelCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_HandleTypeDef {
    pub Instance: *mut ADC_TypeDef,
    pub Init: ADC_InitTypeDef,
    pub DMA_Handle: *mut DMA_HandleTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: u32,
    pub ErrorCode: u32,
    pub InjectionConfig: ADC_InjectionConfigTypeDef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InjOversamplingTypeDef {
    pub Ratio: u32,
    pub RightBitShift: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InjectionConfTypeDef {
    pub InjectedChannel: u32,
    pub InjectedRank: u32,
    pub InjectedSamplingTime: u32,
    pub InjectedSingleDiff: u32,
    pub InjectedOffsetNumber: u32,
    pub InjectedOffset: u32,
    pub InjectedOffsetRightShift: u32,
    pub InjectedOffsetSignedSaturation: FunctionalState::Type,
    pub InjectedLeftBitShift: u32,
    pub InjectedNbrOfConversion: u32,
    pub InjectedDiscontinuousConvMode: FunctionalState::Type,
    pub AutoInjectedConv: FunctionalState::Type,
    pub QueueInjectedContext: FunctionalState::Type,
    pub ExternalTrigInjecConv: u32,
    pub ExternalTrigInjecConvEdge: u32,
    pub InjecOversamplingMode: FunctionalState::Type,
    pub InjecOversampling: ADC_InjOversamplingTypeDef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_MultiModeTypeDef {
    pub Mode: u32,
    pub DualModeData: u32,
    pub TwoSamplingDelay: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPU_Region_InitTypeDef {
    pub Enable: u8,
    pub Number: u8,
    pub BaseAddress: u32,
    pub Size: u8,
    pub SubRegionDisable: u8,
    pub TypeExtField: u8,
    pub AccessPermission: u8,
    pub DisableExec: u8,
    pub IsShareable: u8,
    pub IsCacheable: u8,
    pub IsBufferable: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_InitTypeDef {
    pub DefaultPolynomialUse: u8,
    pub DefaultInitValueUse: u8,
    pub GeneratingPolynomial: u32,
    pub CRCLength: u32,
    pub InitValue: u32,
    pub InputDataInversionMode: u32,
    pub OutputDataInversionMode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_HandleTypeDef {
    pub Instance: *mut CRC_TypeDef,
    pub Init: CRC_InitTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_CRC_StateTypeDef::Type,
    pub InputDataFormat: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_HandleTypeDef {
    pub Instance: *mut DAC_TypeDef,
    pub State: HAL_DAC_StateTypeDef::Type,
    pub Lock: HAL_LockTypeDef::Type,
    pub DMA_Handle1: *mut DMA_HandleTypeDef,
    pub DMA_Handle2: *mut DMA_HandleTypeDef,
    pub ErrorCode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_SampleAndHoldConfTypeDef {
    pub DAC_SampleTime: u32,
    pub DAC_HoldTime: u32,
    pub DAC_RefreshTime: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_ChannelConfTypeDef {
    pub DAC_SampleAndHold: u32,
    pub DAC_Trigger: u32,
    pub DAC_OutputBuffer: u32,
    pub DAC_ConnectOnChipPeripheral: u32,
    pub DAC_UserTrimming: u32,
    pub DAC_TrimmingValue: u32,
    pub DAC_SampleAndHoldConfig: DAC_SampleAndHoldConfTypeDef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCMI_CodesInitTypeDef {
    pub FrameStartCode: u8,
    pub LineStartCode: u8,
    pub LineEndCode: u8,
    pub FrameEndCode: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCMI_SyncUnmaskTypeDef {
    pub FrameStartUnmask: u8,
    pub LineStartUnmask: u8,
    pub LineEndUnmask: u8,
    pub FrameEndUnmask: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCMI_InitTypeDef {
    pub SynchroMode: u32,
    pub PCKPolarity: u32,
    pub VSPolarity: u32,
    pub HSPolarity: u32,
    pub CaptureRate: u32,
    pub ExtendedDataMode: u32,
    pub SyncroCode: DCMI_CodesInitTypeDef,
    pub JPEGMode: u32,
    pub ByteSelectMode: u32,
    pub ByteSelectStart: u32,
    pub LineSelectMode: u32,
    pub LineSelectStart: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCMI_HandleTypeDef {
    pub Instance: *mut DCMI_TypeDef,
    pub Init: DCMI_InitTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_DCMI_StateTypeDef::Type,
    pub XferCount: u32,
    pub XferSize: u32,
    pub XferTransferNumber: u32,
    pub pBuffPtr: u32,
    pub DMA_Handle: *mut DMA_HandleTypeDef,
    pub ErrorCode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_InitTypeDef {
    pub FrameFormat: u32,
    pub Mode: u32,
    pub AutoRetransmission: FunctionalState::Type,
    pub TransmitPause: FunctionalState::Type,
    pub ProtocolException: FunctionalState::Type,
    pub NominalPrescaler: u32,
    pub NominalSyncJumpWidth: u32,
    pub NominalTimeSeg1: u32,
    pub NominalTimeSeg2: u32,
    pub DataPrescaler: u32,
    pub DataSyncJumpWidth: u32,
    pub DataTimeSeg1: u32,
    pub DataTimeSeg2: u32,
    pub MessageRAMOffset: u32,
    pub StdFiltersNbr: u32,
    pub ExtFiltersNbr: u32,
    pub RxFifo0ElmtsNbr: u32,
    pub RxFifo0ElmtSize: u32,
    pub RxFifo1ElmtsNbr: u32,
    pub RxFifo1ElmtSize: u32,
    pub RxBuffersNbr: u32,
    pub RxBufferSize: u32,
    pub TxEventsNbr: u32,
    pub TxBuffersNbr: u32,
    pub TxFifoQueueElmtsNbr: u32,
    pub TxFifoQueueMode: u32,
    pub TxElmtSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_ClkCalUnitTypeDef {
    pub ClockCalibration: u32,
    pub ClockDivider: u32,
    pub MinOscClkPeriods: u32,
    pub CalFieldLength: u32,
    pub TimeQuantaPerBitTime: u32,
    pub WatchdogStartValue: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_FilterTypeDef {
    pub IdType: u32,
    pub FilterIndex: u32,
    pub FilterType: u32,
    pub FilterConfig: u32,
    pub FilterID1: u32,
    pub FilterID2: u32,
    pub RxBufferIndex: u32,
    pub IsCalibrationMsg: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_TxHeaderTypeDef {
    pub Identifier: u32,
    pub IdType: u32,
    pub TxFrameType: u32,
    pub DataLength: u32,
    pub ErrorStateIndicator: u32,
    pub BitRateSwitch: u32,
    pub FDFormat: u32,
    pub TxEventFifoControl: u32,
    pub MessageMarker: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_RxHeaderTypeDef {
    pub Identifier: u32,
    pub IdType: u32,
    pub RxFrameType: u32,
    pub DataLength: u32,
    pub ErrorStateIndicator: u32,
    pub BitRateSwitch: u32,
    pub FDFormat: u32,
    pub RxTimestamp: u32,
    pub FilterIndex: u32,
    pub IsFilterMatchingFrame: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_TxEventFifoTypeDef {
    pub Identifier: u32,
    pub IdType: u32,
    pub TxFrameType: u32,
    pub DataLength: u32,
    pub ErrorStateIndicator: u32,
    pub BitRateSwitch: u32,
    pub FDFormat: u32,
    pub TxTimestamp: u32,
    pub MessageMarker: u32,
    pub EventType: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_HpMsgStatusTypeDef {
    pub FilterList: u32,
    pub FilterIndex: u32,
    pub MessageStorage: u32,
    pub MessageIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_ProtocolStatusTypeDef {
    pub LastErrorCode: u32,
    pub DataLastErrorCode: u32,
    pub Activity: u32,
    pub ErrorPassive: u32,
    pub Warning: u32,
    pub BusOff: u32,
    pub RxESIflag: u32,
    pub RxBRSflag: u32,
    pub RxFDFflag: u32,
    pub ProtocolException: u32,
    pub TDCvalue: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_ErrorCountersTypeDef {
    pub TxErrorCnt: u32,
    pub RxErrorCnt: u32,
    pub RxErrorPassive: u32,
    pub ErrorLogging: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_TT_ConfigTypeDef {
    pub OperationMode: u32,
    pub GapEnable: u32,
    pub TimeMaster: u32,
    pub SyncDevLimit: u32,
    pub InitRefTrigOffset: u32,
    pub ExternalClkSync: u32,
    pub AppWdgLimit: u32,
    pub GlobalTimeFilter: u32,
    pub ClockCalibration: u32,
    pub EvtTrigPolarity: u32,
    pub BasicCyclesNbr: u32,
    pub CycleStartSync: u32,
    pub TxEnableWindow: u32,
    pub ExpTxTrigNbr: u32,
    pub TURNumerator: u32,
    pub TURDenominator: u32,
    pub TriggerMemoryNbr: u32,
    pub StopWatchTrigSel: u32,
    pub EventTrigSel: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_TriggerTypeDef {
    pub TriggerIndex: u32,
    pub TimeMark: u32,
    pub RepeatFactor: u32,
    pub StartCycle: u32,
    pub TmEventInt: u32,
    pub TmEventExt: u32,
    pub TriggerType: u32,
    pub FilterType: u32,
    pub TxBufferIndex: u32,
    pub FilterIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_TTOperationStatusTypeDef {
    pub ErrorLevel: u32,
    pub MasterState: u32,
    pub SyncState: u32,
    pub GTimeQuality: u32,
    pub ClockQuality: u32,
    pub RefTrigOffset: u32,
    pub GTimeDiscPending: u32,
    pub GapFinished: u32,
    pub MasterPriority: u32,
    pub GapStarted: u32,
    pub WaitForEvt: u32,
    pub AppWdgEvt: u32,
    pub ECSPending: u32,
    pub PhaseLock: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_MsgRamAddressTypeDef {
    pub StandardFilterSA: u32,
    pub ExtendedFilterSA: u32,
    pub RxFIFO0SA: u32,
    pub RxFIFO1SA: u32,
    pub RxBufferSA: u32,
    pub TxEventFIFOSA: u32,
    pub TxBufferSA: u32,
    pub TxFIFOQSA: u32,
    pub TTMemorySA: u32,
    pub EndAddress: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDCAN_HandleTypeDef {
    pub Instance: *mut FDCAN_GlobalTypeDef,
    pub ttcan: *mut TTCAN_TypeDef,
    pub Init: FDCAN_InitTypeDef,
    pub msgRam: FDCAN_MsgRamAddressTypeDef,
    pub LatestTxFifoQRequest: u32,
    pub State: HAL_FDCAN_StateTypeDef::Type,
    pub Lock: HAL_LockTypeDef::Type,
    pub ErrorCode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_EraseInitTypeDef {
    pub TypeErase: u32,
    pub Banks: u32,
    pub Sector: u32,
    pub NbSectors: u32,
    pub VoltageRange: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_OBProgramInitTypeDef {
    pub OptionType: u32,
    pub WRPState: u32,
    pub WRPSector: u32,
    pub RDPLevel: u32,
    pub BORLevel: u32,
    pub USERType: u32,
    pub USERConfig: u32,
    pub Banks: u32,
    pub PCROPConfig: u32,
    pub PCROPStartAddr: u32,
    pub PCROPEndAddr: u32,
    pub BootConfig: u32,
    pub BootAddr0: u32,
    pub BootAddr1: u32,
    pub SecureAreaConfig: u32,
    pub SecureAreaStartAddr: u32,
    pub SecureAreaEndAddr: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_CRCInitTypeDef {
    pub TypeCRC: u32,
    pub BurstSize: u32,
    pub Bank: u32,
    pub Sector: u32,
    pub NbSectors: u32,
    pub CRCStartAddr: u32,
    pub CRCEndAddr: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_InitTypeDef {
    pub Pin: u32,
    pub Mode: u32,
    pub Pull: u32,
    pub Speed: u32,
    pub Alternate: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HASH_InitTypeDef {
    pub DataType: u32,
    pub KeySize: u32,
    pub pKey: *mut u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HASH_HandleTypeDef {
    pub Init: HASH_InitTypeDef,
    pub pHashInBuffPtr: *mut u8,
    pub pHashOutBuffPtr: *mut u8,
    pub pHashKeyBuffPtr: *mut u8,
    pub pHashMsgBuffPtr: *mut u8,
    pub HashBuffSize: u32,
    pub HashInCount: u32,
    pub HashITCounter: u32,
    pub HashKeyCount: u32,
    pub Status: HAL_StatusTypeDef::Type,
    pub Phase: HAL_HASH_PhaseTypeDef::Type,
    pub hdmain: *mut DMA_HandleTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_HASH_StateTypeDef::Type,
    pub SuspendRequest: HAL_HASH_SuspendTypeDef::Type,
    pub DigestCalculationDisable: FlagStatus::Type,
    pub NbWordsAlreadyPushed: u32,
    pub ErrorCode: u32,
    pub Accumulation: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USB_OTG_CfgTypeDef {
    pub dev_endpoints: u32,
    pub Host_channels: u32,
    pub speed: u32,
    pub dma_enable: u32,
    pub ep0_mps: u32,
    pub phy_itface: u32,
    pub Sof_enable: u32,
    pub low_power_enable: u32,
    pub lpm_enable: u32,
    pub battery_charging_enable: u32,
    pub vbus_sensing_enable: u32,
    pub use_dedicated_ep1: u32,
    pub use_external_vbus: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USB_OTG_EPTypeDef {
    pub num: u8,
    pub is_in: u8,
    pub is_stall: u8,
    pub type_: u8,
    pub data_pid_start: u8,
    pub even_odd_frame: u8,
    pub tx_fifo_num: u16,
    pub maxpacket: u32,
    pub xfer_buff: *mut u8,
    pub dma_addr: u32,
    pub xfer_len: u32,
    pub xfer_count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USB_OTG_HCTypeDef {
    pub dev_addr: u8,
    pub ch_num: u8,
    pub ep_num: u8,
    pub ep_is_in: u8,
    pub speed: u8,
    pub do_ping: u8,
    pub process_ping: u8,
    pub ep_type: u8,
    pub max_packet: u16,
    pub data_pid: u8,
    pub xfer_buff: *mut u8,
    pub xfer_len: u32,
    pub xfer_count: u32,
    pub toggle_in: u8,
    pub toggle_out: u8,
    pub dma_addr: u32,
    pub ErrCnt: u32,
    pub urb_state: USB_OTG_URBStateTypeDef::Type,
    pub state: USB_OTG_HCStateTypeDef::Type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HCD_HandleTypeDef {
    pub Instance: *mut HCD_TypeDef,
    pub Init: HCD_InitTypeDef,
    pub hc: [HCD_HCTypeDef; 16usize],
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HCD_StateTypeDef::Type,
    pub ErrorCode: u32,
    pub pData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2C_InitTypeDef {
    pub Timing: u32,
    pub OwnAddress1: u32,
    pub AddressingMode: u32,
    pub DualAddressMode: u32,
    pub OwnAddress2: u32,
    pub OwnAddress2Masks: u32,
    pub GeneralCallMode: u32,
    pub NoStretchMode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __I2C_HandleTypeDef {
    pub Instance: *mut I2C_TypeDef,
    pub Init: I2C_InitTypeDef,
    pub pBuffPtr: *mut u8,
    pub XferSize: u16,
    pub XferCount: u16,
    pub XferOptions: u32,
    pub PreviousState: u32,
    pub XferISR: ::core::option::Option<
        unsafe extern "C" fn(
            hi2c: *mut __I2C_HandleTypeDef,
            ITFlags: u32,
            ITSources: u32,
        ) -> HAL_StatusTypeDef::Type,
    >,
    pub hdmatx: *mut DMA_HandleTypeDef,
    pub hdmarx: *mut DMA_HandleTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_I2C_StateTypeDef::Type,
    pub Mode: HAL_I2C_ModeTypeDef::Type,
    pub ErrorCode: u32,
    pub AddrEventCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2S_InitTypeDef {
    pub Mode: u32,
    pub Standard: u32,
    pub DataFormat: u32,
    pub MCLKOutput: u32,
    pub AudioFreq: u32,
    pub CPOL: u32,
    pub FirstBit: u32,
    pub WSInversion: u32,
    pub Data24BitAlignment: u32,
    pub MasterKeepIOState: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __I2S_HandleTypeDef {
    pub Instance: *mut SPI_TypeDef,
    pub Init: I2S_InitTypeDef,
    pub pTxBuffPtr: *mut u16,
    pub TxXferSize: u16,
    pub TxXferCount: u16,
    pub pRxBuffPtr: *mut u16,
    pub RxXferSize: u16,
    pub RxXferCount: u16,
    pub RxISR: ::core::option::Option<
        unsafe extern "C" fn(hi2s: *mut __I2S_HandleTypeDef),
    >,
    pub TxISR: ::core::option::Option<
        unsafe extern "C" fn(hi2s: *mut __I2S_HandleTypeDef),
    >,
    pub hdmatx: *mut DMA_HandleTypeDef,
    pub hdmarx: *mut DMA_HandleTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_I2S_StateTypeDef::Type,
    pub ErrorCode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWDG_InitTypeDef {
    pub Prescaler: u32,
    pub Reload: u32,
    pub Window: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWDG_HandleTypeDef {
    pub Instance: *mut IWDG_TypeDef,
    pub Init: IWDG_InitTypeDef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PCD_HandleTypeDef {
    pub Instance: *mut PCD_TypeDef,
    pub Init: PCD_InitTypeDef,
    pub USB_Address: u8,
    pub IN_ep: [PCD_EPTypeDef; 16usize],
    pub OUT_ep: [PCD_EPTypeDef; 16usize],
    pub Lock: HAL_LockTypeDef::Type,
    pub State: PCD_StateTypeDef::Type,
    pub ErrorCode: u32,
    pub Setup: [u32; 12usize],
    pub LPM_State: PCD_LPM_StateTypeDef::Type,
    pub BESL: u32,
    pub lpm_active: u32,
    pub battery_charging_active: u32,
    pub pData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWR_PVDTypeDef {
    pub PVDLevel: u32,
    pub Mode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWREx_AVDTypeDef {
    pub AVDLevel: u32,
    pub Mode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWREx_WakeupPinTypeDef {
    pub WakeUpPin: u32,
    pub PinPolarity: u32,
    pub PinPull: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_PLLInitTypeDef {
    pub PLLState: u32,
    pub PLLSource: u32,
    pub PLLM: u32,
    pub PLLN: u32,
    pub PLLP: u32,
    pub PLLQ: u32,
    pub PLLR: u32,
    pub PLLRGE: u32,
    pub PLLVCOSEL: u32,
    pub PLLFRACN: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_OscInitTypeDef {
    pub OscillatorType: u32,
    pub HSEState: u32,
    pub LSEState: u32,
    pub HSIState: u32,
    pub HSICalibrationValue: u32,
    pub LSIState: u32,
    pub HSI48State: u32,
    pub CSIState: u32,
    pub CSICalibrationValue: u32,
    pub PLL: RCC_PLLInitTypeDef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_ClkInitTypeDef {
    pub ClockType: u32,
    pub SYSCLKSource: u32,
    pub SYSCLKDivider: u32,
    pub AHBCLKDivider: u32,
    pub APB3CLKDivider: u32,
    pub APB1CLKDivider: u32,
    pub APB2CLKDivider: u32,
    pub APB4CLKDivider: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_PLL2InitTypeDef {
    pub PLL2M: u32,
    pub PLL2N: u32,
    pub PLL2P: u32,
    pub PLL2Q: u32,
    pub PLL2R: u32,
    pub PLL2RGE: u32,
    pub PLL2VCOSEL: u32,
    pub PLL2FRACN: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_PLL3InitTypeDef {
    pub PLL3M: u32,
    pub PLL3N: u32,
    pub PLL3P: u32,
    pub PLL3Q: u32,
    pub PLL3R: u32,
    pub PLL3RGE: u32,
    pub PLL3VCOSEL: u32,
    pub PLL3FRACN: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PLL1_ClocksTypeDef {
    pub PLL1_P_Frequency: u32,
    pub PLL1_Q_Frequency: u32,
    pub PLL1_R_Frequency: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PLL2_ClocksTypeDef {
    pub PLL2_P_Frequency: u32,
    pub PLL2_Q_Frequency: u32,
    pub PLL2_R_Frequency: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PLL3_ClocksTypeDef {
    pub PLL3_P_Frequency: u32,
    pub PLL3_Q_Frequency: u32,
    pub PLL3_R_Frequency: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_PeriphCLKInitTypeDef {
    pub PeriphClockSelection: u32,
    pub PLL2: RCC_PLL2InitTypeDef,
    pub PLL3: RCC_PLL3InitTypeDef,
    pub FmcClockSelection: u32,
    pub QspiClockSelection: u32,
    pub SdmmcClockSelection: u32,
    pub CkperClockSelection: u32,
    pub Sai1ClockSelection: u32,
    pub Sai23ClockSelection: u32,
    pub Spi123ClockSelection: u32,
    pub Spi45ClockSelection: u32,
    pub SpdifrxClockSelection: u32,
    pub Dfsdm1ClockSelection: u32,
    pub FdcanClockSelection: u32,
    pub Swpmi1ClockSelection: u32,
    pub Usart234578ClockSelection: u32,
    pub Usart16ClockSelection: u32,
    pub RngClockSelection: u32,
    pub I2c123ClockSelection: u32,
    pub UsbClockSelection: u32,
    pub CecClockSelection: u32,
    pub Lptim1ClockSelection: u32,
    pub Lpuart1ClockSelection: u32,
    pub I2c4ClockSelection: u32,
    pub Lptim2ClockSelection: u32,
    pub Lptim345ClockSelection: u32,
    pub AdcClockSelection: u32,
    pub Sai4AClockSelection: u32,
    pub Sai4BClockSelection: u32,
    pub Spi6ClockSelection: u32,
    pub RTCClockSelection: u32,
    pub Hrtim1ClockSelection: u32,
    pub TIMPresSelection: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_CRSInitTypeDef {
    pub Prescaler: u32,
    pub Source: u32,
    pub Polarity: u32,
    pub ReloadValue: u32,
    pub ErrorLimitValue: u32,
    pub HSI48CalibrationValue: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_CRSSynchroInfoTypeDef {
    pub ReloadValue: u32,
    pub HSI48CalibrationValue: u32,
    pub FreqErrorCapture: u32,
    pub FreqErrorDirection: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_InitTypeDef {
    pub HourFormat: u32,
    pub AsynchPrediv: u32,
    pub SynchPrediv: u32,
    pub OutPut: u32,
    pub OutPutRemap: u32,
    pub OutPutPolarity: u32,
    pub OutPutType: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_TimeTypeDef {
    pub Hours: u8,
    pub Minutes: u8,
    pub Seconds: u8,
    pub TimeFormat: u8,
    pub SubSeconds: u32,
    pub SecondFraction: u32,
    pub DayLightSaving: u32,
    pub StoreOperation: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_DateTypeDef {
    pub WeekDay: u8,
    pub Month: u8,
    pub Date: u8,
    pub Year: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_AlarmTypeDef {
    pub AlarmTime: RTC_TimeTypeDef,
    pub AlarmMask: u32,
    pub AlarmSubSecondMask: u32,
    pub AlarmDateWeekDaySel: u32,
    pub AlarmDateWeekDay: u8,
    pub Alarm: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_HandleTypeDef {
    pub Instance: *mut RTC_TypeDef,
    pub Init: RTC_InitTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_RTCStateTypeDef::Type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_TamperTypeDef {
    pub Tamper: u32,
    pub Interrupt: u32,
    pub Trigger: u32,
    pub NoErase: u32,
    pub MaskFlag: u32,
    pub Filter: u32,
    pub SamplingFrequency: u32,
    pub PrechargeDuration: u32,
    pub TamperPullUp: u32,
    pub TimeStampOnTamperDetection: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDMMC_InitTypeDef {
    pub ClockEdge: u32,
    pub ClockPowerSave: u32,
    pub BusWide: u32,
    pub HardwareFlowControl: u32,
    pub ClockDiv: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDMMC_CmdInitTypeDef {
    pub Argument: u32,
    pub CmdIndex: u32,
    pub Response: u32,
    pub WaitForInterrupt: u32,
    pub CPSM: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDMMC_DataInitTypeDef {
    pub DataTimeOut: u32,
    pub DataLength: u32,
    pub DataBlockSize: u32,
    pub TransferDir: u32,
    pub TransferMode: u32,
    pub DPSM: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAL_SD_CardInfoTypeDef {
    pub CardType: u32,
    pub CardVersion: u32,
    pub Class: u32,
    pub RelCardAdd: u32,
    pub BlockNbr: u32,
    pub BlockSize: u32,
    pub LogBlockNbr: u32,
    pub LogBlockSize: u32,
    pub CardSpeed: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SD_HandleTypeDef {
    pub Instance: *mut SDMMC_TypeDef,
    pub Init: SDMMC_InitTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub pTxBuffPtr: *mut u8,
    pub TxXferSize: u32,
    pub pRxBuffPtr: *mut u8,
    pub RxXferSize: u32,
    pub Context: u32,
    pub State: HAL_SD_StateTypeDef::Type,
    pub ErrorCode: u32,
    pub SdCard: HAL_SD_CardInfoTypeDef,
    pub CSD: [u32; 4usize],
    pub CID: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAL_SD_CardCSDTypeDef {
    pub CSDStruct: u8,
    pub SysSpecVersion: u8,
    pub Reserved1: u8,
    pub TAAC: u8,
    pub NSAC: u8,
    pub MaxBusClkFrec: u8,
    pub CardComdClasses: u16,
    pub RdBlockLen: u8,
    pub PartBlockRead: u8,
    pub WrBlockMisalign: u8,
    pub RdBlockMisalign: u8,
    pub DSRImpl: u8,
    pub Reserved2: u8,
    pub DeviceSize: u32,
    pub MaxRdCurrentVDDMin: u8,
    pub MaxRdCurrentVDDMax: u8,
    pub MaxWrCurrentVDDMin: u8,
    pub MaxWrCurrentVDDMax: u8,
    pub DeviceSizeMul: u8,
    pub EraseGrSize: u8,
    pub EraseGrMul: u8,
    pub WrProtectGrSize: u8,
    pub WrProtectGrEnable: u8,
    pub ManDeflECC: u8,
    pub WrSpeedFact: u8,
    pub MaxWrBlockLen: u8,
    pub WriteBlockPaPartial: u8,
    pub Reserved3: u8,
    pub ContentProtectAppli: u8,
    pub FileFormatGroup: u8,
    pub CopyFlag: u8,
    pub PermWrProtect: u8,
    pub TempWrProtect: u8,
    pub FileFormat: u8,
    pub ECC: u8,
    pub CSD_CRC: u8,
    pub Reserved4: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAL_SD_CardCIDTypeDef {
    pub ManufacturerID: u8,
    pub OEM_AppliID: u16,
    pub ProdName1: u32,
    pub ProdName2: u8,
    pub ProdRev: u8,
    pub ProdSN: u32,
    pub Reserved1: u8,
    pub ManufactDate: u16,
    pub CID_CRC: u8,
    pub Reserved2: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HAL_SD_CardStatusTypeDef {
    pub DataBusWidth: u8,
    pub SecuredMode: u8,
    pub CardType: u16,
    pub ProtectedAreaSize: u32,
    pub SpeedClass: u8,
    pub PerformanceMove: u8,
    pub AllocationUnitSize: u8,
    pub EraseSize: u16,
    pub EraseTimeout: u8,
    pub EraseOffset: u8,
    pub UhsSpeedGrade: u8,
    pub UhsAllocationUnitSize: u8,
    pub VideoSpeedClass: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_NORSRAM_InitTypeDef {
    pub NSBank: u32,
    pub DataAddressMux: u32,
    pub MemoryType: u32,
    pub MemoryDataWidth: u32,
    pub BurstAccessMode: u32,
    pub WaitSignalPolarity: u32,
    pub WaitSignalActive: u32,
    pub WriteOperation: u32,
    pub WaitSignal: u32,
    pub ExtendedMode: u32,
    pub AsynchronousWait: u32,
    pub WriteBurst: u32,
    pub ContinuousClock: u32,
    pub WriteFifo: u32,
    pub PageSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_NAND_InitTypeDef {
    pub NandBank: u32,
    pub Waitfeature: u32,
    pub MemoryDataWidth: u32,
    pub EccComputation: u32,
    pub ECCPageSize: u32,
    pub TCLRSetupTime: u32,
    pub TARSetupTime: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_SDRAM_InitTypeDef {
    pub SDBank: u32,
    pub ColumnBitsNumber: u32,
    pub RowBitsNumber: u32,
    pub MemoryDataWidth: u32,
    pub InternalBankNumber: u32,
    pub CASLatency: u32,
    pub WriteProtection: u32,
    pub SDClockPeriod: u32,
    pub ReadBurst: u32,
    pub ReadPipeDelay: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_SDRAM_TimingTypeDef {
    pub LoadToActiveDelay: u32,
    pub ExitSelfRefreshDelay: u32,
    pub SelfRefreshTime: u32,
    pub RowCycleDelay: u32,
    pub WriteRecoveryTime: u32,
    pub RPDelay: u32,
    pub RCDDelay: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_SDRAM_CommandTypeDef {
    pub CommandMode: u32,
    pub CommandTarget: u32,
    pub AutoRefreshNumber: u32,
    pub ModeRegisterDefinition: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDRAM_HandleTypeDef {
    pub Instance: *mut FMC_Bank5_6_TypeDef,
    pub Init: FMC_SDRAM_InitTypeDef,
    pub State: HAL_SDRAM_StateTypeDef::Type,
    pub Lock: HAL_LockTypeDef::Type,
    pub hmdma: *mut MDMA_HandleTypeDef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPI_InitTypeDef {
    pub Mode: u32,
    pub Direction: u32,
    pub DataSize: u32,
    pub CLKPolarity: u32,
    pub CLKPhase: u32,
    pub NSS: u32,
    pub BaudRatePrescaler: u32,
    pub FirstBit: u32,
    pub TIMode: u32,
    pub CRCCalculation: u32,
    pub CRCPolynomial: u32,
    pub CRCLength: u32,
    pub NSSPMode: u32,
    pub NSSPolarity: u32,
    pub FifoThreshold: u32,
    pub TxCRCInitializationPattern: u32,
    pub RxCRCInitializationPattern: u32,
    pub MasterSSIdleness: u32,
    pub MasterInterDataIdleness: u32,
    pub MasterReceiverAutoSusp: u32,
    pub MasterKeepIOState: u32,
    pub IOSwap: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SPI_HandleTypeDef {
    pub Instance: *mut SPI_TypeDef,
    pub Init: SPI_InitTypeDef,
    pub pTxBuffPtr: *mut u8,
    pub TxXferSize: u16,
    pub TxXferCount: u16,
    pub pRxBuffPtr: *mut u8,
    pub RxXferSize: u16,
    pub RxXferCount: u16,
    pub CRCSize: u32,
    pub RxISR: ::core::option::Option<
        unsafe extern "C" fn(hspi: *mut __SPI_HandleTypeDef),
    >,
    pub TxISR: ::core::option::Option<
        unsafe extern "C" fn(hspi: *mut __SPI_HandleTypeDef),
    >,
    pub hdmatx: *mut DMA_HandleTypeDef,
    pub hdmarx: *mut DMA_HandleTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_SPI_StateTypeDef::Type,
    pub ErrorCode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_Base_InitTypeDef {
    pub Prescaler: u32,
    pub CounterMode: u32,
    pub Period: u32,
    pub ClockDivision: u32,
    pub RepetitionCounter: u32,
    pub AutoReloadPreload: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_OC_InitTypeDef {
    pub OCMode: u32,
    pub Pulse: u32,
    pub OCPolarity: u32,
    pub OCNPolarity: u32,
    pub OCFastMode: u32,
    pub OCIdleState: u32,
    pub OCNIdleState: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_OnePulse_InitTypeDef {
    pub OCMode: u32,
    pub Pulse: u32,
    pub OCPolarity: u32,
    pub OCNPolarity: u32,
    pub OCIdleState: u32,
    pub OCNIdleState: u32,
    pub ICPolarity: u32,
    pub ICSelection: u32,
    pub ICFilter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_IC_InitTypeDef {
    pub ICPolarity: u32,
    pub ICSelection: u32,
    pub ICPrescaler: u32,
    pub ICFilter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_Encoder_InitTypeDef {
    pub EncoderMode: u32,
    pub IC1Polarity: u32,
    pub IC1Selection: u32,
    pub IC1Prescaler: u32,
    pub IC1Filter: u32,
    pub IC2Polarity: u32,
    pub IC2Selection: u32,
    pub IC2Prescaler: u32,
    pub IC2Filter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_ClockConfigTypeDef {
    pub ClockSource: u32,
    pub ClockPolarity: u32,
    pub ClockPrescaler: u32,
    pub ClockFilter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_ClearInputConfigTypeDef {
    pub ClearInputState: u32,
    pub ClearInputSource: u32,
    pub ClearInputPolarity: u32,
    pub ClearInputPrescaler: u32,
    pub ClearInputFilter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_MasterConfigTypeDef {
    pub MasterOutputTrigger: u32,
    pub MasterOutputTrigger2: u32,
    pub MasterSlaveMode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_SlaveConfigTypeDef {
    pub SlaveMode: u32,
    pub InputTrigger: u32,
    pub TriggerPolarity: u32,
    pub TriggerPrescaler: u32,
    pub TriggerFilter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_BreakDeadTimeConfigTypeDef {
    pub OffStateRunMode: u32,
    pub OffStateIDLEMode: u32,
    pub LockLevel: u32,
    pub DeadTime: u32,
    pub BreakState: u32,
    pub BreakPolarity: u32,
    pub BreakFilter: u32,
    pub Break2State: u32,
    pub Break2Polarity: u32,
    pub Break2Filter: u32,
    pub AutomaticOutput: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_HandleTypeDef {
    pub Instance: *mut TIM_TypeDef,
    pub Init: TIM_Base_InitTypeDef,
    pub Channel: HAL_TIM_ActiveChannel::Type,
    pub hdma: [*mut DMA_HandleTypeDef; 7usize],
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_TIM_StateTypeDef::Type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_HallSensor_InitTypeDef {
    pub IC1Polarity: u32,
    pub IC1Prescaler: u32,
    pub IC1Filter: u32,
    pub Commutation_Delay: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIMEx_BreakInputConfigTypeDef {
    pub Source: u32,
    pub Enable: u32,
    pub Polarity: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UART_InitTypeDef {
    pub BaudRate: u32,
    pub WordLength: u32,
    pub StopBits: u32,
    pub Parity: u32,
    pub Mode: u32,
    pub HwFlowCtl: u32,
    pub OverSampling: u32,
    pub OneBitSampling: u32,
    pub ClockPrescaler: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UART_AdvFeatureInitTypeDef {
    pub AdvFeatureInit: u32,
    pub TxPinLevelInvert: u32,
    pub RxPinLevelInvert: u32,
    pub DataInvert: u32,
    pub Swap: u32,
    pub OverrunDisable: u32,
    pub DMADisableonRxError: u32,
    pub AutoBaudRateEnable: u32,
    pub AutoBaudRateMode: u32,
    pub MSBFirst: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __UART_HandleTypeDef {
    pub Instance: *mut USART_TypeDef,
    pub Init: UART_InitTypeDef,
    pub AdvancedInit: UART_AdvFeatureInitTypeDef,
    pub pTxBuffPtr: *mut u8,
    pub TxXferSize: u16,
    pub TxXferCount: u16,
    pub pRxBuffPtr: *mut u8,
    pub RxXferSize: u16,
    pub RxXferCount: u16,
    pub Mask: u16,
    pub FifoMode: u32,
    pub NbRxDataToProcess: u16,
    pub NbTxDataToProcess: u16,
    pub RxISR: ::core::option::Option<
        unsafe extern "C" fn(huart: *mut __UART_HandleTypeDef),
    >,
    pub TxISR: ::core::option::Option<
        unsafe extern "C" fn(huart: *mut __UART_HandleTypeDef),
    >,
    pub hdmatx: *mut DMA_HandleTypeDef,
    pub hdmarx: *mut DMA_HandleTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub gState: HAL_UART_StateTypeDef,
    pub RxState: HAL_UART_StateTypeDef,
    pub ErrorCode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UART_WakeUpTypeDef {
    pub WakeUpEvent: u32,
    pub AddressLength: u16,
    pub Address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USART_InitTypeDef {
    pub BaudRate: u32,
    pub WordLength: u32,
    pub StopBits: u32,
    pub Parity: u32,
    pub Mode: u32,
    pub CLKPolarity: u32,
    pub CLKPhase: u32,
    pub CLKLastBit: u32,
    pub ClockPrescaler: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __USART_HandleTypeDef {
    pub Instance: *mut USART_TypeDef,
    pub Init: USART_InitTypeDef,
    pub pTxBuffPtr: *mut u8,
    pub TxXferSize: u16,
    pub TxXferCount: u16,
    pub pRxBuffPtr: *mut u8,
    pub RxXferSize: u16,
    pub RxXferCount: u16,
    pub Mask: u16,
    pub NbRxDataToProcess: u16,
    pub NbTxDataToProcess: u16,
    pub SlaveMode: u32,
    pub FifoMode: u32,
    pub RxISR: ::core::option::Option<
        unsafe extern "C" fn(husart: *mut __USART_HandleTypeDef),
    >,
    pub TxISR: ::core::option::Option<
        unsafe extern "C" fn(husart: *mut __USART_HandleTypeDef),
    >,
    pub hdmatx: *mut DMA_HandleTypeDef,
    pub hdmarx: *mut DMA_HandleTypeDef,
    pub Lock: HAL_LockTypeDef::Type,
    pub State: HAL_USART_StateTypeDef::Type,
    pub ErrorCode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WWDG_InitTypeDef {
    pub Prescaler: u32,
    pub Window: u32,
    pub Counter: u32,
    pub EWIMode: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WWDG_HandleTypeDef {
    pub Instance: *mut WWDG_TypeDef,
    pub Init: WWDG_InitTypeDef,
}
pub const HAL_MAX_DELAY: u32 = 4294967295;
pub const HAL_DMA_ERROR_NONE: u32 = 0;
pub const HAL_DMA_ERROR_TE: u32 = 1;
pub const HAL_DMA_ERROR_FE: u32 = 2;
pub const HAL_DMA_ERROR_DME: u32 = 4;
pub const HAL_DMA_ERROR_TIMEOUT: u32 = 32;
pub const HAL_DMA_ERROR_PARAM: u32 = 64;
pub const HAL_DMA_ERROR_NO_XFER: u32 = 128;
pub const HAL_DMA_ERROR_NOT_SUPPORTED: u32 = 256;
pub const HAL_DMA_ERROR_SYNC: u32 = 512;
pub const HAL_DMA_ERROR_REQGEN: u32 = 1024;
pub const HAL_DMA_ERROR_BUSY: u32 = 2048;
pub const HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT: u32 = 0;
pub const HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT: u32 = 1;
pub const HAL_DMAMUX1_SYNC_DMAMUX1_CH2_EVT: u32 = 2;
pub const HAL_DMAMUX1_SYNC_LPTIM1_OUT: u32 = 3;
pub const HAL_DMAMUX1_SYNC_LPTIM2_OUT: u32 = 4;
pub const HAL_DMAMUX1_SYNC_LPTIM3_OUT: u32 = 5;
pub const HAL_DMAMUX1_SYNC_EXTI0: u32 = 6;
pub const HAL_DMAMUX1_SYNC_TIM12_TRGO: u32 = 7;
pub const HAL_DMAMUX2_SYNC_DMAMUX2_CH0_EVT: u32 = 0;
pub const HAL_DMAMUX2_SYNC_DMAMUX2_CH1_EVT: u32 = 1;
pub const HAL_DMAMUX2_SYNC_DMAMUX2_CH2_EVT: u32 = 2;
pub const HAL_DMAMUX2_SYNC_DMAMUX2_CH3_EVT: u32 = 3;
pub const HAL_DMAMUX2_SYNC_DMAMUX2_CH4_EVT: u32 = 4;
pub const HAL_DMAMUX2_SYNC_DMAMUX2_CH5_EVT: u32 = 5;
pub const HAL_DMAMUX2_SYNC_LPUART1_RX_WKUP: u32 = 6;
pub const HAL_DMAMUX2_SYNC_LPUART1_TX_WKUP: u32 = 7;
pub const HAL_DMAMUX2_SYNC_LPTIM2_OUT: u32 = 8;
pub const HAL_DMAMUX2_SYNC_LPTIM3_OUT: u32 = 9;
pub const HAL_DMAMUX2_SYNC_I2C4_WKUP: u32 = 10;
pub const HAL_DMAMUX2_SYNC_SPI6_WKUP: u32 = 11;
pub const HAL_DMAMUX2_SYNC_COMP1_OUT: u32 = 12;
pub const HAL_DMAMUX2_SYNC_RTC_WKUP: u32 = 13;
pub const HAL_DMAMUX2_SYNC_EXTI0: u32 = 14;
pub const HAL_DMAMUX2_SYNC_EXTI2: u32 = 15;
pub const HAL_DMAMUX_SYNC_NO_EVENT: u32 = 0;
pub const HAL_DMAMUX_SYNC_RISING: u32 = 131072;
pub const HAL_DMAMUX_SYNC_FALLING: u32 = 262144;
pub const HAL_DMAMUX_SYNC_RISING_FALLING: u32 = 393216;
pub const HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT: u32 = 0;
pub const HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT: u32 = 1;
pub const HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT: u32 = 2;
pub const HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT: u32 = 3;
pub const HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT: u32 = 4;
pub const HAL_DMAMUX1_REQ_GEN_LPTIM3_OUT: u32 = 5;
pub const HAL_DMAMUX1_REQ_GEN_EXTI0: u32 = 6;
pub const HAL_DMAMUX1_REQ_GEN_TIM12_TRGO: u32 = 7;
pub const HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH0_EVT: u32 = 0;
pub const HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH1_EVT: u32 = 1;
pub const HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH2_EVT: u32 = 2;
pub const HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH3_EVT: u32 = 3;
pub const HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH4_EVT: u32 = 4;
pub const HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH5_EVT: u32 = 5;
pub const HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH6_EVT: u32 = 6;
pub const HAL_DMAMUX2_REQ_GEN_LPUART1_RX_WKUP: u32 = 7;
pub const HAL_DMAMUX2_REQ_GEN_LPUART1_TX_WKUP: u32 = 8;
pub const HAL_DMAMUX2_REQ_GEN_LPTIM2_WKUP: u32 = 9;
pub const HAL_DMAMUX2_REQ_GEN_LPTIM2_OUT: u32 = 10;
pub const HAL_DMAMUX2_REQ_GEN_LPTIM3_WKUP: u32 = 11;
pub const HAL_DMAMUX2_REQ_GEN_LPTIM3_OUT: u32 = 12;
pub const HAL_DMAMUX2_REQ_GEN_LPTIM4_WKUP: u32 = 13;
pub const HAL_DMAMUX2_REQ_GEN_LPTIM5_WKUP: u32 = 14;
pub const HAL_DMAMUX2_REQ_GEN_I2C4_WKUP: u32 = 15;
pub const HAL_DMAMUX2_REQ_GEN_SPI6_WKUP: u32 = 16;
pub const HAL_DMAMUX2_REQ_GEN_COMP1_OUT: u32 = 17;
pub const HAL_DMAMUX2_REQ_GEN_COMP2_OUT: u32 = 18;
pub const HAL_DMAMUX2_REQ_GEN_RTC_WKUP: u32 = 19;
pub const HAL_DMAMUX2_REQ_GEN_EXTI0: u32 = 20;
pub const HAL_DMAMUX2_REQ_GEN_EXTI2: u32 = 21;
pub const HAL_DMAMUX2_REQ_GEN_I2C4_IT_EVT: u32 = 22;
pub const HAL_DMAMUX2_REQ_GEN_SPI6_IT: u32 = 23;
pub const HAL_DMAMUX2_REQ_GEN_LPUART1_TX_IT: u32 = 24;
pub const HAL_DMAMUX2_REQ_GEN_LPUART1_RX_IT: u32 = 25;
pub const HAL_DMAMUX2_REQ_GEN_ADC3_IT: u32 = 26;
pub const HAL_DMAMUX2_REQ_GEN_ADC3_AWD1_OUT: u32 = 27;
pub const HAL_DMAMUX2_REQ_GEN_BDMA_CH0_IT: u32 = 28;
pub const HAL_DMAMUX2_REQ_GEN_BDMA_CH1_IT: u32 = 29;
pub const HAL_DMAMUX_REQ_GEN_NO_EVENT: u32 = 0;
pub const HAL_DMAMUX_REQ_GEN_RISING: u32 = 131072;
pub const HAL_DMAMUX_REQ_GEN_FALLING: u32 = 262144;
pub const HAL_DMAMUX_REQ_GEN_RISING_FALLING: u32 = 393216;
pub const HAL_ADC_STATE_RESET: u32 = 0;
pub const HAL_ADC_STATE_READY: u32 = 1;
pub const HAL_ADC_STATE_BUSY_INTERNAL: u32 = 2;
pub const HAL_ADC_STATE_TIMEOUT: u32 = 4;
pub const HAL_ADC_STATE_ERROR_INTERNAL: u32 = 16;
pub const HAL_ADC_STATE_ERROR_CONFIG: u32 = 32;
pub const HAL_ADC_STATE_ERROR_DMA: u32 = 64;
pub const HAL_ADC_STATE_REG_BUSY: u32 = 256;
pub const HAL_ADC_STATE_REG_EOC: u32 = 512;
pub const HAL_ADC_STATE_REG_OVR: u32 = 1024;
pub const HAL_ADC_STATE_REG_EOSMP: u32 = 2048;
pub const HAL_ADC_STATE_INJ_BUSY: u32 = 4096;
pub const HAL_ADC_STATE_INJ_EOC: u32 = 8192;
pub const HAL_ADC_STATE_INJ_JQOVF: u32 = 16384;
pub const HAL_ADC_STATE_AWD1: u32 = 65536;
pub const HAL_ADC_STATE_AWD2: u32 = 131072;
pub const HAL_ADC_STATE_AWD3: u32 = 262144;
pub const HAL_ADC_STATE_MULTIMODE_SLAVE: u32 = 1048576;
pub const HAL_ADC_ERROR_NONE: u32 = 0;
pub const HAL_ADC_ERROR_INTERNAL: u32 = 1;
pub const HAL_ADC_ERROR_OVR: u32 = 2;
pub const HAL_ADC_ERROR_DMA: u32 = 4;
pub const HAL_ADC_ERROR_JQOVF: u32 = 8;
pub const HAL_CRC_LENGTH_32B: u32 = 32;
pub const HAL_CRC_LENGTH_16B: u32 = 16;
pub const HAL_CRC_LENGTH_8B: u32 = 8;
pub const HAL_CRC_LENGTH_7B: u32 = 7;
pub const HAL_DAC_ERROR_NONE: u32 = 0;
pub const HAL_DAC_ERROR_DMAUNDERRUNCH1: u32 = 1;
pub const HAL_DAC_ERROR_DMAUNDERRUNCH2: u32 = 2;
pub const HAL_DAC_ERROR_DMA: u32 = 4;
pub const HAL_DAC_ERROR_TIMEOUT: u32 = 8;
pub const HAL_DCMI_ERROR_NONE: u32 = 0;
pub const HAL_DCMI_ERROR_OVR: u32 = 1;
pub const HAL_DCMI_ERROR_SYNC: u32 = 2;
pub const HAL_DCMI_ERROR_TIMEOUT: u32 = 32;
pub const HAL_DCMI_ERROR_DMA: u32 = 64;
pub const HAL_FDCAN_ERROR_LOG_OVERFLOW: u32 = 4194304;
pub const HAL_FDCAN_ERROR_RAM_WDG: u32 = 67108864;
pub const HAL_FDCAN_ERROR_PROTOCOL_ARBT: u32 = 134217728;
pub const HAL_FDCAN_ERROR_PROTOCOL_DATA: u32 = 268435456;
pub const HAL_FDCAN_ERROR_RESERVED_AREA: u32 = 536870912;
pub const HAL_FDCAN_ERROR_TT_GLOBAL_TIME: u32 = 512;
pub const HAL_FDCAN_ERROR_TT_TX_UNDERFLOW: u32 = 1024;
pub const HAL_FDCAN_ERROR_TT_TX_OVERFLOW: u32 = 2048;
pub const HAL_FDCAN_ERROR_TT_SCHEDULE1: u32 = 4096;
pub const HAL_FDCAN_ERROR_TT_SCHEDULE2: u32 = 8192;
pub const HAL_FDCAN_ERROR_TT_NO_INIT_REF: u32 = 32768;
pub const HAL_FDCAN_ERROR_TT_NO_REF: u32 = 65536;
pub const HAL_FDCAN_ERROR_TT_APPL_WDG: u32 = 131072;
pub const HAL_FDCAN_ERROR_TT_CONFIG: u32 = 262144;
pub const HAL_FLASH_ERROR_NONE: u32 = 0;
pub const HAL_FLASH_ERROR_OB_CHANGE: u32 = 1073741824;
pub const HAL_HASH_ERROR_NONE: u32 = 0;
pub const HAL_HASH_ERROR_IT: u32 = 1;
pub const HAL_HASH_ERROR_DMA: u32 = 2;
pub const HAL_I2C_ERROR_NONE: u32 = 0;
pub const HAL_I2C_ERROR_BERR: u32 = 1;
pub const HAL_I2C_ERROR_ARLO: u32 = 2;
pub const HAL_I2C_ERROR_AF: u32 = 4;
pub const HAL_I2C_ERROR_OVR: u32 = 8;
pub const HAL_I2C_ERROR_DMA: u32 = 16;
pub const HAL_I2C_ERROR_TIMEOUT: u32 = 32;
pub const HAL_I2C_ERROR_SIZE: u32 = 64;
pub const HAL_I2C_ERROR_DMA_PARAM: u32 = 128;
pub const HAL_I2C_ERROR_INVALID_PARAM: u32 = 512;
pub const HAL_I2S_ERROR_NONE: u32 = 0;
pub const HAL_I2S_ERROR_TIMEOUT: u32 = 1;
pub const HAL_I2S_ERROR_OVR: u32 = 2;
pub const HAL_I2S_ERROR_UDR: u32 = 4;
pub const HAL_I2S_ERROR_DMA: u32 = 8;
pub const HAL_I2S_ERROR_PRESCALER: u32 = 16;
pub const HAL_I2S_ERROR_FRE: u32 = 32;
pub const HAL_I2S_ERROR_NO_OGT: u32 = 64;
pub const HAL_I2S_ERROR_NOT_SUPPORTED: u32 = 128;
pub const HAL_RCC_REV_Y_HSITRIM_Pos: u32 = 12;
pub const HAL_RCC_REV_Y_HSITRIM_Msk: u32 = 258048;
pub const HAL_RCC_REV_Y_CSITRIM_Pos: u32 = 26;
pub const HAL_RCC_REV_Y_CSITRIM_Msk: u32 = 2080374784;
pub const HAL_SD_CARD_READY: u32 = 1;
pub const HAL_SD_CARD_IDENTIFICATION: u32 = 2;
pub const HAL_SD_CARD_STANDBY: u32 = 3;
pub const HAL_SD_CARD_TRANSFER: u32 = 4;
pub const HAL_SD_CARD_SENDING: u32 = 5;
pub const HAL_SD_CARD_RECEIVING: u32 = 6;
pub const HAL_SD_CARD_PROGRAMMING: u32 = 7;
pub const HAL_SD_CARD_DISCONNECTED: u32 = 8;
pub const HAL_SD_CARD_ERROR: u32 = 255;
pub const HAL_SPI_ERROR_NONE: u32 = 0;
pub const HAL_SPI_ERROR_MODF: u32 = 1;
pub const HAL_SPI_ERROR_CRC: u32 = 2;
pub const HAL_SPI_ERROR_OVR: u32 = 4;
pub const HAL_SPI_ERROR_FRE: u32 = 8;
pub const HAL_SPI_ERROR_DMA: u32 = 16;
pub const HAL_SPI_ERROR_FLAG: u32 = 32;
pub const HAL_SPI_ERROR_ABORT: u32 = 64;
pub const HAL_SPI_ERROR_UDR: u32 = 128;
pub const HAL_SPI_ERROR_TIMEOUT: u32 = 256;
pub const HAL_SPI_ERROR_UNKNOW: u32 = 512;
pub const HAL_SPI_ERROR_NOT_SUPPORTED: u32 = 1024;
pub const HAL_UART_STATE_RESET: u32 = 0;
pub const HAL_UART_STATE_READY: u32 = 32;
pub const HAL_UART_STATE_BUSY: u32 = 36;
pub const HAL_UART_STATE_BUSY_TX: u32 = 33;
pub const HAL_UART_STATE_BUSY_RX: u32 = 34;
pub const HAL_UART_STATE_BUSY_TX_RX: u32 = 35;
pub const HAL_UART_STATE_TIMEOUT: u32 = 160;
pub const HAL_UART_STATE_ERROR: u32 = 224;
pub const HAL_UART_TIMEOUT_VALUE: u32 = 33554431;
#[test]
fn bindgen_test_layout_FDCAN_GlobalTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_GlobalTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_GlobalTypeDef>(),
        256usize,
        concat!("Size of: ", stringify!(FDCAN_GlobalTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_GlobalTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_GlobalTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CREL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(CREL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENDN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(ENDN)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DBTP) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(DBTP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TEST) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TEST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RWD) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RWD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(CCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NBTP) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(NBTP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TSCC) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TSCC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TSCV) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TSCV)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TOCC) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TOCC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TOCV) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TOCV)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(ECR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(PSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TDCR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TDCR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(IR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IE) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(IE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ILS) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(ILS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ILE) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(ILE)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GFC) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(GFC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SIDFC) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(SIDFC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).XIDFC) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(XIDFC)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).XIDAM) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(XIDAM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HPMS) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(HPMS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NDAT1) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(NDAT1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NDAT2) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(NDAT2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXF0C) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RXF0C)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXF0S) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RXF0S)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXF0A) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RXF0A)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXBC) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RXBC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXF1C) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RXF1C)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXF1S) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RXF1S)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXF1A) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RXF1A)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXESC) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RXESC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXBC) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXBC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXFQS) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXFQS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXESC) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXESC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXBRP) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXBRP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXBAR) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXBAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXBCR) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXBCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXBTO) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXBTO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXBCF) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXBCF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXBTIE) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXBTIE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXBCIE) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXBCIE)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXEFC) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXEFC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXEFS) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXEFS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXEFA) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(TXEFA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_GlobalTypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
}
#[test]
fn bindgen_test_layout_USB_OTG_GlobalTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USB_OTG_GlobalTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_GlobalTypeDef>(),
        320usize,
        concat!("Size of: ", stringify!(USB_OTG_GlobalTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_GlobalTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_GlobalTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GOTGCTL) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GOTGCTL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GOTGINT) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GOTGINT)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GAHBCFG) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GAHBCFG)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GUSBCFG) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GUSBCFG)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GRSTCTL) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GRSTCTL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GINTSTS) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GINTSTS)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GINTMSK) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GINTMSK)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GRXSTSR) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GRXSTSR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GRXSTSP) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GRXSTSP)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GRXFSIZ) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GRXFSIZ)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DIEPTXF0_HNPTXFSIZ) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(DIEPTXF0_HNPTXFSIZ)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HNPTXSTS) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(HNPTXSTS)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved30) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(Reserved30)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GCCFG) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GCCFG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(CID)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GSNPSID) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GSNPSID)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GHWCFG1) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GHWCFG1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GHWCFG2) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GHWCFG2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GHWCFG3) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GHWCFG3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved6) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(Reserved6)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GLPMCFG) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GLPMCFG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GPWRDN) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GPWRDN)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GDFIFOCFG) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GDFIFOCFG)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GADPCTL) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GADPCTL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved43) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(Reserved43)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HPTXFSIZ) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(HPTXFSIZ)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DIEPTXF) as usize - ptr as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(DIEPTXF)
        )
    );
}
#[test]
fn bindgen_test_layout_DMA_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMA_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMA_InitTypeDef>(),
        48usize,
        concat!("Size of: ", stringify!(DMA_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Request) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(Request)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Direction) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PeriphInc) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(PeriphInc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MemInc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(MemInc)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PeriphDataAlignment) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(PeriphDataAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MemDataAlignment) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(MemDataAlignment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Priority) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(Priority)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FIFOMode) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(FIFOMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FIFOThreshold) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(FIFOThreshold)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MemBurst) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(MemBurst)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PeriphBurst) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(PeriphBurst)
        )
    );
}
#[test]
fn bindgen_test_layout___DMA_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<__DMA_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__DMA_HandleTypeDef>(),
        124usize,
        concat!("Size of: ", stringify!(__DMA_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<__DMA_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(__DMA_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Parent) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(Parent)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferCpltCallback) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(XferCpltCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferHalfCpltCallback) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(XferHalfCpltCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferM1CpltCallback) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(XferM1CpltCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferM1HalfCpltCallback) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(XferM1HalfCpltCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferErrorCallback) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(XferErrorCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferAbortCallback) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(XferAbortCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StreamBaseAddress) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(StreamBaseAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StreamIndex) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(StreamIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMAmuxChannel) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(DMAmuxChannel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMAmuxChannelStatus) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(DMAmuxChannelStatus)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMAmuxChannelStatusMask) as usize
                - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(DMAmuxChannelStatusMask)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMAmuxRequestGen) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(DMAmuxRequestGen)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMAmuxRequestGenStatus) as usize
                - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(DMAmuxRequestGenStatus)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMAmuxRequestGenStatusMask) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__DMA_HandleTypeDef),
            "::",
            stringify!(DMAmuxRequestGenStatusMask)
        )
    );
}
#[test]
fn bindgen_test_layout_HAL_DMA_MuxSyncConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HAL_DMA_MuxSyncConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HAL_DMA_MuxSyncConfigTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(HAL_DMA_MuxSyncConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HAL_DMA_MuxSyncConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HAL_DMA_MuxSyncConfigTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SyncSignalID) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_DMA_MuxSyncConfigTypeDef),
            "::",
            stringify!(SyncSignalID)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SyncPolarity) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_DMA_MuxSyncConfigTypeDef),
            "::",
            stringify!(SyncPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SyncEnable) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_DMA_MuxSyncConfigTypeDef),
            "::",
            stringify!(SyncEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EventEnable) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_DMA_MuxSyncConfigTypeDef),
            "::",
            stringify!(EventEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RequestNumber) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_DMA_MuxSyncConfigTypeDef),
            "::",
            stringify!(RequestNumber)
        )
    );
}
#[test]
fn bindgen_test_layout_HAL_DMA_MuxRequestGeneratorConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<
        HAL_DMA_MuxRequestGeneratorConfigTypeDef,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HAL_DMA_MuxRequestGeneratorConfigTypeDef>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(HAL_DMA_MuxRequestGeneratorConfigTypeDef)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<HAL_DMA_MuxRequestGeneratorConfigTypeDef>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(HAL_DMA_MuxRequestGeneratorConfigTypeDef)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SignalID) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_DMA_MuxRequestGeneratorConfigTypeDef),
            "::",
            stringify!(SignalID)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Polarity) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_DMA_MuxRequestGeneratorConfigTypeDef),
            "::",
            stringify!(Polarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RequestNumber) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_DMA_MuxRequestGeneratorConfigTypeDef),
            "::",
            stringify!(RequestNumber)
        )
    );
}
#[test]
fn bindgen_test_layout_MDMA_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<MDMA_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MDMA_InitTypeDef>(),
        56usize,
        concat!("Size of: ", stringify!(MDMA_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<MDMA_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(MDMA_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Request) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(Request)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TransferTriggerMode) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(TransferTriggerMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Priority) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(Priority)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Endianness) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(Endianness)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SourceInc) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(SourceInc)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DestinationInc) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(DestinationInc)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SourceDataSize) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(SourceDataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DestDataSize) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(DestDataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataAlignment) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(DataAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BufferTransferLength) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(BufferTransferLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SourceBurst) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(SourceBurst)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DestBurst) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(DestBurst)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SourceBlockAddressOffset) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(SourceBlockAddressOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DestBlockAddressOffset) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_InitTypeDef),
            "::",
            stringify!(DestBlockAddressOffset)
        )
    );
}
#[test]
fn bindgen_test_layout_MDMA_LinkNodeTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<MDMA_LinkNodeTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MDMA_LinkNodeTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(MDMA_LinkNodeTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<MDMA_LinkNodeTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(MDMA_LinkNodeTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CTCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CBNDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CBNDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CSAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CDAR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CDAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CBRUR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CBRUR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLAR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CLAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTBR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CTBR)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMAR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMDR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeTypeDef),
            "::",
            stringify!(CMDR)
        )
    );
}
#[test]
fn bindgen_test_layout_MDMA_LinkNodeConfTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<MDMA_LinkNodeConfTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MDMA_LinkNodeConfTypeDef>(),
        80usize,
        concat!("Size of: ", stringify!(MDMA_LinkNodeConfTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<MDMA_LinkNodeConfTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(MDMA_LinkNodeConfTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeConfTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SrcAddress) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeConfTypeDef),
            "::",
            stringify!(SrcAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DstAddress) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeConfTypeDef),
            "::",
            stringify!(DstAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BlockDataLength) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeConfTypeDef),
            "::",
            stringify!(BlockDataLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BlockCount) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeConfTypeDef),
            "::",
            stringify!(BlockCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PostRequestMaskAddress) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeConfTypeDef),
            "::",
            stringify!(PostRequestMaskAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PostRequestMaskData) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(MDMA_LinkNodeConfTypeDef),
            "::",
            stringify!(PostRequestMaskData)
        )
    );
}
#[test]
fn bindgen_test_layout___MDMA_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<__MDMA_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__MDMA_HandleTypeDef>(),
        112usize,
        concat!("Size of: ", stringify!(__MDMA_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<__MDMA_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(__MDMA_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Parent) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(Parent)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferCpltCallback) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(XferCpltCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferBufferCpltCallback) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(XferBufferCpltCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferBlockCpltCallback) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(XferBlockCpltCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferRepeatBlockCpltCallback) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(XferRepeatBlockCpltCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferErrorCallback) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(XferErrorCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferAbortCallback) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(XferAbortCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FirstLinkedListNodeAddress) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(FirstLinkedListNodeAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LastLinkedListNodeAddress) as usize
                - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(LastLinkedListNodeAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LinkedListNodeCounter) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(LinkedListNodeCounter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(__MDMA_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_OversamplingTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_OversamplingTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_OversamplingTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(ADC_OversamplingTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_OversamplingTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_OversamplingTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Ratio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_OversamplingTypeDef),
            "::",
            stringify!(Ratio)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RightBitShift) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_OversamplingTypeDef),
            "::",
            stringify!(RightBitShift)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TriggeredMode) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_OversamplingTypeDef),
            "::",
            stringify!(TriggeredMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OversamplingStopReset) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_OversamplingTypeDef),
            "::",
            stringify!(OversamplingStopReset)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_InitTypeDef>(),
        76usize,
        concat!("Size of: ", stringify!(ADC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockPrescaler) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ClockPrescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Resolution) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(Resolution)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ScanConvMode) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ScanConvMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EOCSelection) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(EOCSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LowPowerAutoWait) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(LowPowerAutoWait)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ContinuousConvMode) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ContinuousConvMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbrOfConversion) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(NbrOfConversion)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DiscontinuousConvMode) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(DiscontinuousConvMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbrOfDiscConversion) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(NbrOfDiscConversion)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExternalTrigConv) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ExternalTrigConv)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExternalTrigConvEdge) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ExternalTrigConvEdge)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ConversionDataManagement) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ConversionDataManagement)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Overrun) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(Overrun)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LeftBitShift) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(LeftBitShift)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OversamplingMode) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(OversamplingMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Oversampling) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(Oversampling)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_ChannelConfTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_ChannelConfTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_ChannelConfTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(ADC_ChannelConfTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_ChannelConfTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_ChannelConfTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Channel) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_ChannelConfTypeDef),
            "::",
            stringify!(Channel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Rank) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_ChannelConfTypeDef),
            "::",
            stringify!(Rank)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SamplingTime) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_ChannelConfTypeDef),
            "::",
            stringify!(SamplingTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SingleDiff) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_ChannelConfTypeDef),
            "::",
            stringify!(SingleDiff)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OffsetNumber) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_ChannelConfTypeDef),
            "::",
            stringify!(OffsetNumber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_ChannelConfTypeDef),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OffsetRightShift) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_ChannelConfTypeDef),
            "::",
            stringify!(OffsetRightShift)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OffsetSignedSaturation) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_ChannelConfTypeDef),
            "::",
            stringify!(OffsetSignedSaturation)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_AnalogWDGConfTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_AnalogWDGConfTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_AnalogWDGConfTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(ADC_AnalogWDGConfTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_AnalogWDGConfTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_AnalogWDGConfTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WatchdogNumber) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_AnalogWDGConfTypeDef),
            "::",
            stringify!(WatchdogNumber)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WatchdogMode) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_AnalogWDGConfTypeDef),
            "::",
            stringify!(WatchdogMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Channel) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_AnalogWDGConfTypeDef),
            "::",
            stringify!(Channel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ITMode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_AnalogWDGConfTypeDef),
            "::",
            stringify!(ITMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HighThreshold) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_AnalogWDGConfTypeDef),
            "::",
            stringify!(HighThreshold)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LowThreshold) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_AnalogWDGConfTypeDef),
            "::",
            stringify!(LowThreshold)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_InjectionConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_InjectionConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_InjectionConfigTypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(ADC_InjectionConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_InjectionConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_InjectionConfigTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ContextQueue) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfigTypeDef),
            "::",
            stringify!(ContextQueue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ChannelCount) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfigTypeDef),
            "::",
            stringify!(ChannelCount)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_HandleTypeDef>(),
        104usize,
        concat!("Size of: ", stringify!(ADC_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMA_Handle) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_HandleTypeDef),
            "::",
            stringify!(DMA_Handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectionConfig) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_HandleTypeDef),
            "::",
            stringify!(InjectionConfig)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_InjOversamplingTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_InjOversamplingTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_InjOversamplingTypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(ADC_InjOversamplingTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_InjOversamplingTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_InjOversamplingTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Ratio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjOversamplingTypeDef),
            "::",
            stringify!(Ratio)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RightBitShift) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjOversamplingTypeDef),
            "::",
            stringify!(RightBitShift)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_InjectionConfTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_InjectionConfTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_InjectionConfTypeDef>(),
        72usize,
        concat!("Size of: ", stringify!(ADC_InjectionConfTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_InjectionConfTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_InjectionConfTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedChannel) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedChannel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedRank) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedRank)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedSamplingTime) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedSamplingTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedSingleDiff) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedSingleDiff)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedOffsetNumber) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedOffsetNumber)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedOffset) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedOffsetRightShift) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedOffsetRightShift)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedOffsetSignedSaturation)
                as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedOffsetSignedSaturation)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedLeftBitShift) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedLeftBitShift)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedNbrOfConversion) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedNbrOfConversion)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjectedDiscontinuousConvMode) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjectedDiscontinuousConvMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AutoInjectedConv) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(AutoInjectedConv)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).QueueInjectedContext) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(QueueInjectedContext)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExternalTrigInjecConv) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(ExternalTrigInjecConv)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExternalTrigInjecConvEdge) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(ExternalTrigInjecConvEdge)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjecOversamplingMode) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjecOversamplingMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InjecOversampling) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InjectionConfTypeDef),
            "::",
            stringify!(InjecOversampling)
        )
    );
}
#[test]
fn bindgen_test_layout_ADC_MultiModeTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_MultiModeTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_MultiModeTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(ADC_MultiModeTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_MultiModeTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_MultiModeTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_MultiModeTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DualModeData) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_MultiModeTypeDef),
            "::",
            stringify!(DualModeData)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TwoSamplingDelay) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_MultiModeTypeDef),
            "::",
            stringify!(TwoSamplingDelay)
        )
    );
}
#[test]
fn bindgen_test_layout_MPU_Region_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<MPU_Region_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MPU_Region_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(MPU_Region_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<MPU_Region_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(MPU_Region_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Number) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(Number)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BaseAddress) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(BaseAddress)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SubRegionDisable) as usize
                - ptr as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(SubRegionDisable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TypeExtField) as usize - ptr as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(TypeExtField)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AccessPermission) as usize
                - ptr as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(AccessPermission)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DisableExec) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(DisableExec)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IsShareable) as usize - ptr as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(IsShareable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IsCacheable) as usize - ptr as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(IsCacheable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IsBufferable) as usize - ptr as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Region_InitTypeDef),
            "::",
            stringify!(IsBufferable)
        )
    );
}
#[test]
fn bindgen_test_layout_CRC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CRC_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CRC_InitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(CRC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CRC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DefaultPolynomialUse) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_InitTypeDef),
            "::",
            stringify!(DefaultPolynomialUse)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DefaultInitValueUse) as usize
                - ptr as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_InitTypeDef),
            "::",
            stringify!(DefaultInitValueUse)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GeneratingPolynomial) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_InitTypeDef),
            "::",
            stringify!(GeneratingPolynomial)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCLength) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_InitTypeDef),
            "::",
            stringify!(CRCLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InitValue) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_InitTypeDef),
            "::",
            stringify!(InitValue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InputDataInversionMode) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_InitTypeDef),
            "::",
            stringify!(InputDataInversionMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OutputDataInversionMode) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_InitTypeDef),
            "::",
            stringify!(OutputDataInversionMode)
        )
    );
}
#[test]
fn bindgen_test_layout_CRC_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CRC_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CRC_HandleTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(CRC_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CRC_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InputDataFormat) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_HandleTypeDef),
            "::",
            stringify!(InputDataFormat)
        )
    );
}
#[test]
fn bindgen_test_layout_DAC_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DAC_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DAC_HandleTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(DAC_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DAC_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DAC_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMA_Handle1) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_HandleTypeDef),
            "::",
            stringify!(DMA_Handle1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMA_Handle2) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_HandleTypeDef),
            "::",
            stringify!(DMA_Handle2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
}
#[test]
fn bindgen_test_layout_DAC_SampleAndHoldConfTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DAC_SampleAndHoldConfTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DAC_SampleAndHoldConfTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(DAC_SampleAndHoldConfTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DAC_SampleAndHoldConfTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DAC_SampleAndHoldConfTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_SampleTime) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_SampleAndHoldConfTypeDef),
            "::",
            stringify!(DAC_SampleTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_HoldTime) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_SampleAndHoldConfTypeDef),
            "::",
            stringify!(DAC_HoldTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_RefreshTime) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_SampleAndHoldConfTypeDef),
            "::",
            stringify!(DAC_RefreshTime)
        )
    );
}
#[test]
fn bindgen_test_layout_DAC_ChannelConfTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DAC_ChannelConfTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DAC_ChannelConfTypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(DAC_ChannelConfTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DAC_ChannelConfTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DAC_ChannelConfTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_SampleAndHold) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_ChannelConfTypeDef),
            "::",
            stringify!(DAC_SampleAndHold)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_Trigger) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_ChannelConfTypeDef),
            "::",
            stringify!(DAC_Trigger)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_OutputBuffer) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_ChannelConfTypeDef),
            "::",
            stringify!(DAC_OutputBuffer)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_ConnectOnChipPeripheral) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_ChannelConfTypeDef),
            "::",
            stringify!(DAC_ConnectOnChipPeripheral)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_UserTrimming) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_ChannelConfTypeDef),
            "::",
            stringify!(DAC_UserTrimming)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_TrimmingValue) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_ChannelConfTypeDef),
            "::",
            stringify!(DAC_TrimmingValue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_SampleAndHoldConfig) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_ChannelConfTypeDef),
            "::",
            stringify!(DAC_SampleAndHoldConfig)
        )
    );
}
#[test]
fn bindgen_test_layout_DCMI_CodesInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DCMI_CodesInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DCMI_CodesInitTypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(DCMI_CodesInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DCMI_CodesInitTypeDef>(),
        1usize,
        concat!("Alignment of ", stringify!(DCMI_CodesInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FrameStartCode) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_CodesInitTypeDef),
            "::",
            stringify!(FrameStartCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LineStartCode) as usize - ptr as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_CodesInitTypeDef),
            "::",
            stringify!(LineStartCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LineEndCode) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_CodesInitTypeDef),
            "::",
            stringify!(LineEndCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FrameEndCode) as usize - ptr as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_CodesInitTypeDef),
            "::",
            stringify!(FrameEndCode)
        )
    );
}
#[test]
fn bindgen_test_layout_DCMI_SyncUnmaskTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DCMI_SyncUnmaskTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DCMI_SyncUnmaskTypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(DCMI_SyncUnmaskTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DCMI_SyncUnmaskTypeDef>(),
        1usize,
        concat!("Alignment of ", stringify!(DCMI_SyncUnmaskTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FrameStartUnmask) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_SyncUnmaskTypeDef),
            "::",
            stringify!(FrameStartUnmask)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LineStartUnmask) as usize
                - ptr as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_SyncUnmaskTypeDef),
            "::",
            stringify!(LineStartUnmask)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LineEndUnmask) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_SyncUnmaskTypeDef),
            "::",
            stringify!(LineEndUnmask)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FrameEndUnmask) as usize - ptr as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_SyncUnmaskTypeDef),
            "::",
            stringify!(FrameEndUnmask)
        )
    );
}
#[test]
fn bindgen_test_layout_DCMI_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DCMI_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DCMI_InitTypeDef>(),
        48usize,
        concat!("Size of: ", stringify!(DCMI_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DCMI_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DCMI_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SynchroMode) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(SynchroMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PCKPolarity) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(PCKPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).VSPolarity) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(VSPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HSPolarity) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(HSPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CaptureRate) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(CaptureRate)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExtendedDataMode) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(ExtendedDataMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SyncroCode) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(SyncroCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).JPEGMode) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(JPEGMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ByteSelectMode) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(ByteSelectMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ByteSelectStart) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(ByteSelectStart)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LineSelectMode) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(LineSelectMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LineSelectStart) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_InitTypeDef),
            "::",
            stringify!(LineSelectStart)
        )
    );
}
#[test]
fn bindgen_test_layout_DCMI_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DCMI_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DCMI_HandleTypeDef>(),
        84usize,
        concat!("Size of: ", stringify!(DCMI_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DCMI_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DCMI_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferCount) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(XferCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferSize) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(XferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferTransferNumber) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(XferTransferNumber)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pBuffPtr) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(pBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMA_Handle) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(DMA_Handle)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DCMI_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_InitTypeDef>(),
        108usize,
        concat!("Size of: ", stringify!(FDCAN_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FrameFormat) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(FrameFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AutoRetransmission) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(AutoRetransmission)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TransmitPause) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(TransmitPause)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ProtocolException) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(ProtocolException)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NominalPrescaler) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(NominalPrescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NominalSyncJumpWidth) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(NominalSyncJumpWidth)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NominalTimeSeg1) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(NominalTimeSeg1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NominalTimeSeg2) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(NominalTimeSeg2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataPrescaler) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(DataPrescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataSyncJumpWidth) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(DataSyncJumpWidth)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataTimeSeg1) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(DataTimeSeg1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataTimeSeg2) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(DataTimeSeg2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MessageRAMOffset) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(MessageRAMOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StdFiltersNbr) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(StdFiltersNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExtFiltersNbr) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(ExtFiltersNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxFifo0ElmtsNbr) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(RxFifo0ElmtsNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxFifo0ElmtSize) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(RxFifo0ElmtSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxFifo1ElmtsNbr) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(RxFifo1ElmtsNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxFifo1ElmtSize) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(RxFifo1ElmtSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxBuffersNbr) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(RxBuffersNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxBufferSize) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(RxBufferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxEventsNbr) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(TxEventsNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxBuffersNbr) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(TxBuffersNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxFifoQueueElmtsNbr) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(TxFifoQueueElmtsNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxFifoQueueMode) as usize
                - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(TxFifoQueueMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxElmtSize) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_InitTypeDef),
            "::",
            stringify!(TxElmtSize)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_ClkCalUnitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_ClkCalUnitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_ClkCalUnitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(FDCAN_ClkCalUnitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_ClkCalUnitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_ClkCalUnitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockCalibration) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClkCalUnitTypeDef),
            "::",
            stringify!(ClockCalibration)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockDivider) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClkCalUnitTypeDef),
            "::",
            stringify!(ClockDivider)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MinOscClkPeriods) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClkCalUnitTypeDef),
            "::",
            stringify!(MinOscClkPeriods)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CalFieldLength) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClkCalUnitTypeDef),
            "::",
            stringify!(CalFieldLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TimeQuantaPerBitTime) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClkCalUnitTypeDef),
            "::",
            stringify!(TimeQuantaPerBitTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WatchdogStartValue) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ClkCalUnitTypeDef),
            "::",
            stringify!(WatchdogStartValue)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_FilterTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_FilterTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_FilterTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(FDCAN_FilterTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_FilterTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_FilterTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IdType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_FilterTypeDef),
            "::",
            stringify!(IdType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterIndex) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_FilterTypeDef),
            "::",
            stringify!(FilterIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterType) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_FilterTypeDef),
            "::",
            stringify!(FilterType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterConfig) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_FilterTypeDef),
            "::",
            stringify!(FilterConfig)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterID1) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_FilterTypeDef),
            "::",
            stringify!(FilterID1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterID2) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_FilterTypeDef),
            "::",
            stringify!(FilterID2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxBufferIndex) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_FilterTypeDef),
            "::",
            stringify!(RxBufferIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IsCalibrationMsg) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_FilterTypeDef),
            "::",
            stringify!(IsCalibrationMsg)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_TxHeaderTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_TxHeaderTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_TxHeaderTypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(FDCAN_TxHeaderTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_TxHeaderTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_TxHeaderTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Identifier) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(Identifier)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IdType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(IdType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxFrameType) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(TxFrameType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataLength) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(DataLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorStateIndicator) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(ErrorStateIndicator)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BitRateSwitch) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(BitRateSwitch)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FDFormat) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(FDFormat)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxEventFifoControl) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(TxEventFifoControl)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MessageMarker) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxHeaderTypeDef),
            "::",
            stringify!(MessageMarker)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_RxHeaderTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_RxHeaderTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_RxHeaderTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(FDCAN_RxHeaderTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_RxHeaderTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_RxHeaderTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Identifier) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(Identifier)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IdType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(IdType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxFrameType) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(RxFrameType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataLength) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(DataLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorStateIndicator) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(ErrorStateIndicator)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BitRateSwitch) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(BitRateSwitch)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FDFormat) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(FDFormat)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxTimestamp) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(RxTimestamp)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterIndex) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(FilterIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IsFilterMatchingFrame) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_RxHeaderTypeDef),
            "::",
            stringify!(IsFilterMatchingFrame)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_TxEventFifoTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_TxEventFifoTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_TxEventFifoTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(FDCAN_TxEventFifoTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_TxEventFifoTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_TxEventFifoTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Identifier) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(Identifier)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IdType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(IdType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxFrameType) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(TxFrameType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataLength) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(DataLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorStateIndicator) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(ErrorStateIndicator)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BitRateSwitch) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(BitRateSwitch)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FDFormat) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(FDFormat)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxTimestamp) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(TxTimestamp)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MessageMarker) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(MessageMarker)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EventType) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TxEventFifoTypeDef),
            "::",
            stringify!(EventType)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_HpMsgStatusTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_HpMsgStatusTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_HpMsgStatusTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(FDCAN_HpMsgStatusTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_HpMsgStatusTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_HpMsgStatusTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterList) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HpMsgStatusTypeDef),
            "::",
            stringify!(FilterList)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterIndex) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HpMsgStatusTypeDef),
            "::",
            stringify!(FilterIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MessageStorage) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HpMsgStatusTypeDef),
            "::",
            stringify!(MessageStorage)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MessageIndex) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HpMsgStatusTypeDef),
            "::",
            stringify!(MessageIndex)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_ProtocolStatusTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_ProtocolStatusTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_ProtocolStatusTypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(FDCAN_ProtocolStatusTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_ProtocolStatusTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_ProtocolStatusTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LastErrorCode) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(LastErrorCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataLastErrorCode) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(DataLastErrorCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Activity) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(Activity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorPassive) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(ErrorPassive)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Warning) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(Warning)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BusOff) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(BusOff)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxESIflag) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(RxESIflag)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxBRSflag) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(RxBRSflag)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxFDFflag) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(RxFDFflag)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ProtocolException) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(ProtocolException)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TDCvalue) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ProtocolStatusTypeDef),
            "::",
            stringify!(TDCvalue)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_ErrorCountersTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_ErrorCountersTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_ErrorCountersTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(FDCAN_ErrorCountersTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_ErrorCountersTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_ErrorCountersTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxErrorCnt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ErrorCountersTypeDef),
            "::",
            stringify!(TxErrorCnt)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxErrorCnt) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ErrorCountersTypeDef),
            "::",
            stringify!(RxErrorCnt)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxErrorPassive) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ErrorCountersTypeDef),
            "::",
            stringify!(RxErrorPassive)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorLogging) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_ErrorCountersTypeDef),
            "::",
            stringify!(ErrorLogging)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_TT_ConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_TT_ConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_TT_ConfigTypeDef>(),
        76usize,
        concat!("Size of: ", stringify!(FDCAN_TT_ConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_TT_ConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_TT_ConfigTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OperationMode) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(OperationMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GapEnable) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(GapEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TimeMaster) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(TimeMaster)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SyncDevLimit) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(SyncDevLimit)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InitRefTrigOffset) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(InitRefTrigOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExternalClkSync) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(ExternalClkSync)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AppWdgLimit) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(AppWdgLimit)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GlobalTimeFilter) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(GlobalTimeFilter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockCalibration) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(ClockCalibration)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EvtTrigPolarity) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(EvtTrigPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BasicCyclesNbr) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(BasicCyclesNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CycleStartSync) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(CycleStartSync)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxEnableWindow) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(TxEnableWindow)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExpTxTrigNbr) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(ExpTxTrigNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TURNumerator) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(TURNumerator)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TURDenominator) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(TURDenominator)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TriggerMemoryNbr) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(TriggerMemoryNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StopWatchTrigSel) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(StopWatchTrigSel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EventTrigSel) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TT_ConfigTypeDef),
            "::",
            stringify!(EventTrigSel)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_TriggerTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_TriggerTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_TriggerTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(FDCAN_TriggerTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_TriggerTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_TriggerTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TriggerIndex) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(TriggerIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TimeMark) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(TimeMark)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RepeatFactor) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(RepeatFactor)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StartCycle) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(StartCycle)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TmEventInt) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(TmEventInt)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TmEventExt) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(TmEventExt)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TriggerType) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(TriggerType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterType) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(FilterType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxBufferIndex) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(TxBufferIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FilterIndex) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TriggerTypeDef),
            "::",
            stringify!(FilterIndex)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_TTOperationStatusTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_TTOperationStatusTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_TTOperationStatusTypeDef>(),
        56usize,
        concat!("Size of: ", stringify!(FDCAN_TTOperationStatusTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_TTOperationStatusTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_TTOperationStatusTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorLevel) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(ErrorLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterState) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(MasterState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SyncState) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(SyncState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GTimeQuality) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(GTimeQuality)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockQuality) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(ClockQuality)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RefTrigOffset) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(RefTrigOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GTimeDiscPending) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(GTimeDiscPending)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GapFinished) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(GapFinished)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterPriority) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(MasterPriority)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GapStarted) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(GapStarted)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WaitForEvt) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(WaitForEvt)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AppWdgEvt) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(AppWdgEvt)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ECSPending) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(ECSPending)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PhaseLock) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_TTOperationStatusTypeDef),
            "::",
            stringify!(PhaseLock)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_MsgRamAddressTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_MsgRamAddressTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_MsgRamAddressTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(FDCAN_MsgRamAddressTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_MsgRamAddressTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_MsgRamAddressTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StandardFilterSA) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(StandardFilterSA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExtendedFilterSA) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(ExtendedFilterSA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxFIFO0SA) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(RxFIFO0SA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxFIFO1SA) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(RxFIFO1SA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxBufferSA) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(RxBufferSA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxEventFIFOSA) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(TxEventFIFOSA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxBufferSA) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(TxBufferSA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxFIFOQSA) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(TxFIFOQSA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TTMemorySA) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(TTMemorySA)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EndAddress) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_MsgRamAddressTypeDef),
            "::",
            stringify!(EndAddress)
        )
    );
}
#[test]
fn bindgen_test_layout_FDCAN_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FDCAN_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FDCAN_HandleTypeDef>(),
        172usize,
        concat!("Size of: ", stringify!(FDCAN_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FDCAN_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FDCAN_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ttcan) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HandleTypeDef),
            "::",
            stringify!(ttcan)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msgRam) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HandleTypeDef),
            "::",
            stringify!(msgRam)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LatestTxFifoQRequest) as usize
                - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HandleTypeDef),
            "::",
            stringify!(LatestTxFifoQRequest)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FDCAN_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
}
#[test]
fn bindgen_test_layout_FLASH_EraseInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FLASH_EraseInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FLASH_EraseInitTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(FLASH_EraseInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FLASH_EraseInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FLASH_EraseInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TypeErase) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_EraseInitTypeDef),
            "::",
            stringify!(TypeErase)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Banks) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_EraseInitTypeDef),
            "::",
            stringify!(Banks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Sector) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_EraseInitTypeDef),
            "::",
            stringify!(Sector)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbSectors) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_EraseInitTypeDef),
            "::",
            stringify!(NbSectors)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).VoltageRange) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_EraseInitTypeDef),
            "::",
            stringify!(VoltageRange)
        )
    );
}
#[test]
fn bindgen_test_layout_FLASH_OBProgramInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FLASH_OBProgramInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FLASH_OBProgramInitTypeDef>(),
        68usize,
        concat!("Size of: ", stringify!(FLASH_OBProgramInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FLASH_OBProgramInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FLASH_OBProgramInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OptionType) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(OptionType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WRPState) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(WRPState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WRPSector) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(WRPSector)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RDPLevel) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(RDPLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BORLevel) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(BORLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).USERType) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(USERType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).USERConfig) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(USERConfig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Banks) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(Banks)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PCROPConfig) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(PCROPConfig)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PCROPStartAddr) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(PCROPStartAddr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PCROPEndAddr) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(PCROPEndAddr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BootConfig) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(BootConfig)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BootAddr0) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(BootAddr0)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BootAddr1) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(BootAddr1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SecureAreaConfig) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(SecureAreaConfig)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SecureAreaStartAddr) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(SecureAreaStartAddr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SecureAreaEndAddr) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_OBProgramInitTypeDef),
            "::",
            stringify!(SecureAreaEndAddr)
        )
    );
}
#[test]
fn bindgen_test_layout_FLASH_CRCInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FLASH_CRCInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FLASH_CRCInitTypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(FLASH_CRCInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FLASH_CRCInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FLASH_CRCInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TypeCRC) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_CRCInitTypeDef),
            "::",
            stringify!(TypeCRC)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BurstSize) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_CRCInitTypeDef),
            "::",
            stringify!(BurstSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Bank) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_CRCInitTypeDef),
            "::",
            stringify!(Bank)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Sector) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_CRCInitTypeDef),
            "::",
            stringify!(Sector)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbSectors) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_CRCInitTypeDef),
            "::",
            stringify!(NbSectors)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCStartAddr) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_CRCInitTypeDef),
            "::",
            stringify!(CRCStartAddr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCEndAddr) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_CRCInitTypeDef),
            "::",
            stringify!(CRCEndAddr)
        )
    );
}
#[test]
fn bindgen_test_layout_GPIO_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<GPIO_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<GPIO_InitTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(GPIO_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<GPIO_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(GPIO_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Pin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Pin)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Pull) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Pull)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Speed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Speed)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Alternate) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Alternate)
        )
    );
}
#[test]
fn bindgen_test_layout_HASH_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HASH_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HASH_InitTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(HASH_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HASH_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HASH_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataType) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_InitTypeDef),
            "::",
            stringify!(DataType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).KeySize) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_InitTypeDef),
            "::",
            stringify!(KeySize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pKey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_InitTypeDef),
            "::",
            stringify!(pKey)
        )
    );
}
#[test]
fn bindgen_test_layout_HASH_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HASH_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HASH_HandleTypeDef>(),
        84usize,
        concat!("Size of: ", stringify!(HASH_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HASH_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HASH_HandleTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pHashInBuffPtr) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(pHashInBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pHashOutBuffPtr) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(pHashOutBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pHashKeyBuffPtr) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(pHashKeyBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pHashMsgBuffPtr) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(pHashMsgBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HashBuffSize) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(HashBuffSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HashInCount) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(HashInCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HashITCounter) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(HashITCounter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HashKeyCount) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(HashKeyCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Phase) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(Phase)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmain) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(hdmain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SuspendRequest) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(SuspendRequest)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DigestCalculationDisable) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(DigestCalculationDisable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbWordsAlreadyPushed) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(NbWordsAlreadyPushed)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Accumulation) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_HandleTypeDef),
            "::",
            stringify!(Accumulation)
        )
    );
}
#[test]
fn bindgen_test_layout_USB_OTG_CfgTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USB_OTG_CfgTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_CfgTypeDef>(),
        52usize,
        concat!("Size of: ", stringify!(USB_OTG_CfgTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_CfgTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_CfgTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).dev_endpoints) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(dev_endpoints)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Host_channels) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(Host_channels)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).dma_enable) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(dma_enable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ep0_mps) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(ep0_mps)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).phy_itface) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(phy_itface)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Sof_enable) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(Sof_enable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).low_power_enable) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(low_power_enable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).lpm_enable) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(lpm_enable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).battery_charging_enable) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(battery_charging_enable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).vbus_sensing_enable) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(vbus_sensing_enable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).use_dedicated_ep1) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(use_dedicated_ep1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).use_external_vbus) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_CfgTypeDef),
            "::",
            stringify!(use_external_vbus)
        )
    );
}
#[test]
fn bindgen_test_layout_USB_OTG_EPTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USB_OTG_EPTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_EPTypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(USB_OTG_EPTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_EPTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_EPTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_in) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(is_in)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).is_stall) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(is_stall)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).data_pid_start) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(data_pid_start)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).even_odd_frame) as usize - ptr as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(even_odd_frame)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).tx_fifo_num) as usize - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(tx_fifo_num)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).maxpacket) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(maxpacket)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).xfer_buff) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(xfer_buff)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).dma_addr) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(dma_addr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).xfer_len) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(xfer_len)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).xfer_count) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_EPTypeDef),
            "::",
            stringify!(xfer_count)
        )
    );
}
#[test]
fn bindgen_test_layout_USB_OTG_HCTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USB_OTG_HCTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_HCTypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(USB_OTG_HCTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_HCTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_HCTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).dev_addr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(dev_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ch_num) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(ch_num)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ep_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(ep_num)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ep_is_in) as usize - ptr as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(ep_is_in)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).do_ping) as usize - ptr as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(do_ping)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).process_ping) as usize - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(process_ping)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ep_type) as usize - ptr as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(ep_type)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).max_packet) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(max_packet)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).data_pid) as usize - ptr as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(data_pid)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).xfer_buff) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(xfer_buff)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).xfer_len) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(xfer_len)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).xfer_count) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(xfer_count)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).toggle_in) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(toggle_in)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).toggle_out) as usize - ptr as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(toggle_out)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).dma_addr) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(dma_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ErrCnt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(ErrCnt)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).urb_state) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(urb_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HCTypeDef),
            "::",
            stringify!(state)
        )
    );
}
#[test]
fn bindgen_test_layout_HCD_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HCD_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HCD_HandleTypeDef>(),
        776usize,
        concat!("Size of: ", stringify!(HCD_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HCD_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HCD_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HCD_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HCD_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HCD_HandleTypeDef),
            "::",
            stringify!(hc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(HCD_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(HCD_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(HCD_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(HCD_HandleTypeDef),
            "::",
            stringify!(pData)
        )
    );
}
#[test]
fn bindgen_test_layout_I2C_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<I2C_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2C_InitTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(I2C_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<I2C_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(I2C_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Timing) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(Timing)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OwnAddress1) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(OwnAddress1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AddressingMode) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(AddressingMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DualAddressMode) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(DualAddressMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OwnAddress2) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(OwnAddress2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OwnAddress2Masks) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(OwnAddress2Masks)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).GeneralCallMode) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(GeneralCallMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NoStretchMode) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(NoStretchMode)
        )
    );
}
#[test]
fn bindgen_test_layout___I2C_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<__I2C_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__I2C_HandleTypeDef>(),
        84usize,
        concat!("Size of: ", stringify!(__I2C_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<__I2C_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(__I2C_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pBuffPtr) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(pBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferSize) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(XferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferCount) as usize - ptr as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(XferCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferOptions) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(XferOptions)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PreviousState) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(PreviousState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).XferISR) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(XferISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmatx) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(hdmatx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmarx) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(hdmarx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AddrEventCount) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2C_HandleTypeDef),
            "::",
            stringify!(AddrEventCount)
        )
    );
}
#[test]
fn bindgen_test_layout_I2S_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<I2S_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2S_InitTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(I2S_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<I2S_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(I2S_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Standard) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(Standard)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataFormat) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(DataFormat)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MCLKOutput) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(MCLKOutput)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AudioFreq) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(AudioFreq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPOL) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(CPOL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FirstBit) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(FirstBit)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WSInversion) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(WSInversion)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Data24BitAlignment) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(Data24BitAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterKeepIOState) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(MasterKeepIOState)
        )
    );
}
#[test]
fn bindgen_test_layout___I2S_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<__I2S_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__I2S_HandleTypeDef>(),
        88usize,
        concat!("Size of: ", stringify!(__I2S_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<__I2S_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(__I2S_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pTxBuffPtr) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(pTxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferSize) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(TxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferCount) as usize - ptr as usize
        },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(TxXferCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pRxBuffPtr) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(pRxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferSize) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(RxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferCount) as usize - ptr as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(RxXferCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RxISR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(RxISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TxISR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(TxISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmatx) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(hdmatx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmarx) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(hdmarx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__I2S_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
}
#[test]
fn bindgen_test_layout_IWDG_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<IWDG_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<IWDG_InitTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(IWDG_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<IWDG_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(IWDG_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Prescaler) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_InitTypeDef),
            "::",
            stringify!(Prescaler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Reload) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_InitTypeDef),
            "::",
            stringify!(Reload)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Window) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_InitTypeDef),
            "::",
            stringify!(Window)
        )
    );
}
#[test]
fn bindgen_test_layout_IWDG_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<IWDG_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<IWDG_HandleTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(IWDG_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<IWDG_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(IWDG_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
}
#[test]
fn bindgen_test_layout_PCD_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PCD_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PCD_HandleTypeDef>(),
        1036usize,
        concat!("Size of: ", stringify!(PCD_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PCD_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PCD_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).USB_Address) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(USB_Address)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IN_ep) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(IN_ep)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OUT_ep) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(OUT_ep)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        956usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        964usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Setup) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(Setup)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LPM_State) as usize - ptr as usize
        },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(LPM_State)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BESL) as usize - ptr as usize },
        1020usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(BESL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).lpm_active) as usize - ptr as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(lpm_active)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).battery_charging_active) as usize
                - ptr as usize
        },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(battery_charging_active)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(PCD_HandleTypeDef),
            "::",
            stringify!(pData)
        )
    );
}
#[test]
fn bindgen_test_layout_PWR_PVDTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PWR_PVDTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PWR_PVDTypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(PWR_PVDTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PWR_PVDTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PWR_PVDTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PVDLevel) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_PVDTypeDef),
            "::",
            stringify!(PVDLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_PVDTypeDef),
            "::",
            stringify!(Mode)
        )
    );
}
#[test]
fn bindgen_test_layout_PWREx_AVDTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PWREx_AVDTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PWREx_AVDTypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(PWREx_AVDTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PWREx_AVDTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PWREx_AVDTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AVDLevel) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWREx_AVDTypeDef),
            "::",
            stringify!(AVDLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PWREx_AVDTypeDef),
            "::",
            stringify!(Mode)
        )
    );
}
#[test]
fn bindgen_test_layout_PWREx_WakeupPinTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PWREx_WakeupPinTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PWREx_WakeupPinTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(PWREx_WakeupPinTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PWREx_WakeupPinTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PWREx_WakeupPinTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WakeUpPin) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWREx_WakeupPinTypeDef),
            "::",
            stringify!(WakeUpPin)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PinPolarity) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PWREx_WakeupPinTypeDef),
            "::",
            stringify!(PinPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PinPull) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PWREx_WakeupPinTypeDef),
            "::",
            stringify!(PinPull)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_PLLInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_PLLInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_PLLInitTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(RCC_PLLInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_PLLInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_PLLInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLLState) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLLSource) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLLM) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLLN) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLLP) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLLQ) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLQ)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLLR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLLRGE) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLRGE)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLLVCOSEL) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLVCOSEL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLLFRACN) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLLInitTypeDef),
            "::",
            stringify!(PLLFRACN)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_OscInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_OscInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_OscInitTypeDef>(),
        76usize,
        concat!("Size of: ", stringify!(RCC_OscInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_OscInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_OscInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OscillatorType) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(OscillatorType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HSEState) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(HSEState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LSEState) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(LSEState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HSIState) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(HSIState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HSICalibrationValue) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(HSICalibrationValue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LSIState) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(LSIState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HSI48State) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(HSI48State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSIState) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(CSIState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSICalibrationValue) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(CSICalibrationValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_OscInitTypeDef),
            "::",
            stringify!(PLL)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_ClkInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_ClkInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_ClkInitTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(RCC_ClkInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_ClkInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_ClkInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockType) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClkInitTypeDef),
            "::",
            stringify!(ClockType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SYSCLKSource) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClkInitTypeDef),
            "::",
            stringify!(SYSCLKSource)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SYSCLKDivider) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClkInitTypeDef),
            "::",
            stringify!(SYSCLKDivider)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AHBCLKDivider) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClkInitTypeDef),
            "::",
            stringify!(AHBCLKDivider)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB3CLKDivider) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClkInitTypeDef),
            "::",
            stringify!(APB3CLKDivider)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB1CLKDivider) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClkInitTypeDef),
            "::",
            stringify!(APB1CLKDivider)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB2CLKDivider) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClkInitTypeDef),
            "::",
            stringify!(APB2CLKDivider)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).APB4CLKDivider) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClkInitTypeDef),
            "::",
            stringify!(APB4CLKDivider)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_PLL2InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_PLL2InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_PLL2InitTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(RCC_PLL2InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_PLL2InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_PLL2InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL2M) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL2InitTypeDef),
            "::",
            stringify!(PLL2M)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL2N) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL2InitTypeDef),
            "::",
            stringify!(PLL2N)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL2P) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL2InitTypeDef),
            "::",
            stringify!(PLL2P)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL2Q) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL2InitTypeDef),
            "::",
            stringify!(PLL2Q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL2R) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL2InitTypeDef),
            "::",
            stringify!(PLL2R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL2RGE) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL2InitTypeDef),
            "::",
            stringify!(PLL2RGE)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL2VCOSEL) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL2InitTypeDef),
            "::",
            stringify!(PLL2VCOSEL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL2FRACN) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL2InitTypeDef),
            "::",
            stringify!(PLL2FRACN)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_PLL3InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_PLL3InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_PLL3InitTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(RCC_PLL3InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_PLL3InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_PLL3InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL3M) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL3InitTypeDef),
            "::",
            stringify!(PLL3M)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL3N) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL3InitTypeDef),
            "::",
            stringify!(PLL3N)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL3P) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL3InitTypeDef),
            "::",
            stringify!(PLL3P)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL3Q) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL3InitTypeDef),
            "::",
            stringify!(PLL3Q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL3R) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL3InitTypeDef),
            "::",
            stringify!(PLL3R)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL3RGE) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL3InitTypeDef),
            "::",
            stringify!(PLL3RGE)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL3VCOSEL) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL3InitTypeDef),
            "::",
            stringify!(PLL3VCOSEL)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL3FRACN) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PLL3InitTypeDef),
            "::",
            stringify!(PLL3FRACN)
        )
    );
}
#[test]
fn bindgen_test_layout_PLL1_ClocksTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PLL1_ClocksTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PLL1_ClocksTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(PLL1_ClocksTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PLL1_ClocksTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PLL1_ClocksTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL1_P_Frequency) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL1_ClocksTypeDef),
            "::",
            stringify!(PLL1_P_Frequency)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL1_Q_Frequency) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL1_ClocksTypeDef),
            "::",
            stringify!(PLL1_Q_Frequency)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL1_R_Frequency) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL1_ClocksTypeDef),
            "::",
            stringify!(PLL1_R_Frequency)
        )
    );
}
#[test]
fn bindgen_test_layout_PLL2_ClocksTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PLL2_ClocksTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PLL2_ClocksTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(PLL2_ClocksTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PLL2_ClocksTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PLL2_ClocksTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL2_P_Frequency) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL2_ClocksTypeDef),
            "::",
            stringify!(PLL2_P_Frequency)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL2_Q_Frequency) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL2_ClocksTypeDef),
            "::",
            stringify!(PLL2_Q_Frequency)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL2_R_Frequency) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL2_ClocksTypeDef),
            "::",
            stringify!(PLL2_R_Frequency)
        )
    );
}
#[test]
fn bindgen_test_layout_PLL3_ClocksTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PLL3_ClocksTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PLL3_ClocksTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(PLL3_ClocksTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PLL3_ClocksTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PLL3_ClocksTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL3_P_Frequency) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL3_ClocksTypeDef),
            "::",
            stringify!(PLL3_P_Frequency)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL3_Q_Frequency) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL3_ClocksTypeDef),
            "::",
            stringify!(PLL3_Q_Frequency)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PLL3_R_Frequency) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PLL3_ClocksTypeDef),
            "::",
            stringify!(PLL3_R_Frequency)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_PeriphCLKInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_PeriphCLKInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_PeriphCLKInitTypeDef>(),
        188usize,
        concat!("Size of: ", stringify!(RCC_PeriphCLKInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_PeriphCLKInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_PeriphCLKInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PeriphClockSelection) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(PeriphClockSelection)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(PLL2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PLL3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(PLL3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FmcClockSelection) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(FmcClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).QspiClockSelection) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(QspiClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SdmmcClockSelection) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(SdmmcClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CkperClockSelection) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(CkperClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Sai1ClockSelection) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Sai1ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Sai23ClockSelection) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Sai23ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Spi123ClockSelection) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Spi123ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Spi45ClockSelection) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Spi45ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SpdifrxClockSelection) as usize
                - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(SpdifrxClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Dfsdm1ClockSelection) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Dfsdm1ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FdcanClockSelection) as usize
                - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(FdcanClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Swpmi1ClockSelection) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Swpmi1ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Usart234578ClockSelection) as usize
                - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Usart234578ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Usart16ClockSelection) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Usart16ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RngClockSelection) as usize
                - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(RngClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).I2c123ClockSelection) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(I2c123ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).UsbClockSelection) as usize
                - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(UsbClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CecClockSelection) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(CecClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Lptim1ClockSelection) as usize
                - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Lptim1ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Lpuart1ClockSelection) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Lpuart1ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).I2c4ClockSelection) as usize
                - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(I2c4ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Lptim2ClockSelection) as usize
                - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Lptim2ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Lptim345ClockSelection) as usize
                - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Lptim345ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AdcClockSelection) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(AdcClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Sai4AClockSelection) as usize
                - ptr as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Sai4AClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Sai4BClockSelection) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Sai4BClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Spi6ClockSelection) as usize
                - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Spi6ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RTCClockSelection) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(RTCClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Hrtim1ClockSelection) as usize
                - ptr as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(Hrtim1ClockSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TIMPresSelection) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_PeriphCLKInitTypeDef),
            "::",
            stringify!(TIMPresSelection)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_CRSInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_CRSInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_CRSInitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(RCC_CRSInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_CRSInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_CRSInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Prescaler) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSInitTypeDef),
            "::",
            stringify!(Prescaler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Source) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSInitTypeDef),
            "::",
            stringify!(Source)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Polarity) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSInitTypeDef),
            "::",
            stringify!(Polarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ReloadValue) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSInitTypeDef),
            "::",
            stringify!(ReloadValue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorLimitValue) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSInitTypeDef),
            "::",
            stringify!(ErrorLimitValue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HSI48CalibrationValue) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSInitTypeDef),
            "::",
            stringify!(HSI48CalibrationValue)
        )
    );
}
#[test]
fn bindgen_test_layout_RCC_CRSSynchroInfoTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_CRSSynchroInfoTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_CRSSynchroInfoTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(RCC_CRSSynchroInfoTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_CRSSynchroInfoTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_CRSSynchroInfoTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ReloadValue) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSSynchroInfoTypeDef),
            "::",
            stringify!(ReloadValue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HSI48CalibrationValue) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSSynchroInfoTypeDef),
            "::",
            stringify!(HSI48CalibrationValue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FreqErrorCapture) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSSynchroInfoTypeDef),
            "::",
            stringify!(FreqErrorCapture)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FreqErrorDirection) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_CRSSynchroInfoTypeDef),
            "::",
            stringify!(FreqErrorDirection)
        )
    );
}
#[test]
fn bindgen_test_layout_RTC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RTC_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RTC_InitTypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(RTC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HourFormat) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_InitTypeDef),
            "::",
            stringify!(HourFormat)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AsynchPrediv) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_InitTypeDef),
            "::",
            stringify!(AsynchPrediv)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SynchPrediv) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_InitTypeDef),
            "::",
            stringify!(SynchPrediv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OutPut) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_InitTypeDef),
            "::",
            stringify!(OutPut)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OutPutRemap) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_InitTypeDef),
            "::",
            stringify!(OutPutRemap)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OutPutPolarity) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_InitTypeDef),
            "::",
            stringify!(OutPutPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OutPutType) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_InitTypeDef),
            "::",
            stringify!(OutPutType)
        )
    );
}
#[test]
fn bindgen_test_layout_RTC_TimeTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RTC_TimeTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RTC_TimeTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(RTC_TimeTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_TimeTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_TimeTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Hours) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TimeTypeDef),
            "::",
            stringify!(Hours)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Minutes) as usize - ptr as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TimeTypeDef),
            "::",
            stringify!(Minutes)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Seconds) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TimeTypeDef),
            "::",
            stringify!(Seconds)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TimeFormat) as usize - ptr as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TimeTypeDef),
            "::",
            stringify!(TimeFormat)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SubSeconds) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TimeTypeDef),
            "::",
            stringify!(SubSeconds)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SecondFraction) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TimeTypeDef),
            "::",
            stringify!(SecondFraction)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DayLightSaving) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TimeTypeDef),
            "::",
            stringify!(DayLightSaving)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StoreOperation) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TimeTypeDef),
            "::",
            stringify!(StoreOperation)
        )
    );
}
#[test]
fn bindgen_test_layout_RTC_DateTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RTC_DateTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RTC_DateTypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(RTC_DateTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_DateTypeDef>(),
        1usize,
        concat!("Alignment of ", stringify!(RTC_DateTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WeekDay) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_DateTypeDef),
            "::",
            stringify!(WeekDay)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Month) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_DateTypeDef),
            "::",
            stringify!(Month)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Date) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_DateTypeDef),
            "::",
            stringify!(Date)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Year) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_DateTypeDef),
            "::",
            stringify!(Year)
        )
    );
}
#[test]
fn bindgen_test_layout_RTC_AlarmTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RTC_AlarmTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RTC_AlarmTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(RTC_AlarmTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_AlarmTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_AlarmTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AlarmTime) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_AlarmTypeDef),
            "::",
            stringify!(AlarmTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AlarmMask) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_AlarmTypeDef),
            "::",
            stringify!(AlarmMask)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AlarmSubSecondMask) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_AlarmTypeDef),
            "::",
            stringify!(AlarmSubSecondMask)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AlarmDateWeekDaySel) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_AlarmTypeDef),
            "::",
            stringify!(AlarmDateWeekDaySel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AlarmDateWeekDay) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_AlarmTypeDef),
            "::",
            stringify!(AlarmDateWeekDay)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Alarm) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_AlarmTypeDef),
            "::",
            stringify!(Alarm)
        )
    );
}
#[test]
fn bindgen_test_layout_RTC_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RTC_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RTC_HandleTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(RTC_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
}
#[test]
fn bindgen_test_layout_RTC_TamperTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RTC_TamperTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RTC_TamperTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(RTC_TamperTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_TamperTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_TamperTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Tamper) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(Tamper)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Interrupt) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(Interrupt)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Trigger) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(Trigger)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NoErase) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(NoErase)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MaskFlag) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(MaskFlag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Filter) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(Filter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SamplingFrequency) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(SamplingFrequency)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PrechargeDuration) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(PrechargeDuration)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TamperPullUp) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(TamperPullUp)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TimeStampOnTamperDetection) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TamperTypeDef),
            "::",
            stringify!(TimeStampOnTamperDetection)
        )
    );
}
#[test]
fn bindgen_test_layout_SDMMC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDMMC_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDMMC_InitTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(SDMMC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDMMC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDMMC_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockEdge) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_InitTypeDef),
            "::",
            stringify!(ClockEdge)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockPowerSave) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_InitTypeDef),
            "::",
            stringify!(ClockPowerSave)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BusWide) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_InitTypeDef),
            "::",
            stringify!(BusWide)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HardwareFlowControl) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_InitTypeDef),
            "::",
            stringify!(HardwareFlowControl)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockDiv) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_InitTypeDef),
            "::",
            stringify!(ClockDiv)
        )
    );
}
#[test]
fn bindgen_test_layout_SDMMC_CmdInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDMMC_CmdInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDMMC_CmdInitTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(SDMMC_CmdInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDMMC_CmdInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDMMC_CmdInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Argument) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_CmdInitTypeDef),
            "::",
            stringify!(Argument)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CmdIndex) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_CmdInitTypeDef),
            "::",
            stringify!(CmdIndex)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Response) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_CmdInitTypeDef),
            "::",
            stringify!(Response)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WaitForInterrupt) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_CmdInitTypeDef),
            "::",
            stringify!(WaitForInterrupt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPSM) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_CmdInitTypeDef),
            "::",
            stringify!(CPSM)
        )
    );
}
#[test]
fn bindgen_test_layout_SDMMC_DataInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDMMC_DataInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDMMC_DataInitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(SDMMC_DataInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDMMC_DataInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDMMC_DataInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataTimeOut) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_DataInitTypeDef),
            "::",
            stringify!(DataTimeOut)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataLength) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_DataInitTypeDef),
            "::",
            stringify!(DataLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataBlockSize) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_DataInitTypeDef),
            "::",
            stringify!(DataBlockSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TransferDir) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_DataInitTypeDef),
            "::",
            stringify!(TransferDir)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TransferMode) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_DataInitTypeDef),
            "::",
            stringify!(TransferMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DPSM) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDMMC_DataInitTypeDef),
            "::",
            stringify!(DPSM)
        )
    );
}
#[test]
fn bindgen_test_layout_HAL_SD_CardInfoTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HAL_SD_CardInfoTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HAL_SD_CardInfoTypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(HAL_SD_CardInfoTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HAL_SD_CardInfoTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HAL_SD_CardInfoTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CardType) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(CardType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CardVersion) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(CardVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Class) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(Class)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RelCardAdd) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(RelCardAdd)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BlockNbr) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(BlockNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BlockSize) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(BlockSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LogBlockNbr) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(LogBlockNbr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LogBlockSize) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(LogBlockSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CardSpeed) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardInfoTypeDef),
            "::",
            stringify!(CardSpeed)
        )
    );
}
#[test]
fn bindgen_test_layout_SD_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SD_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SD_HandleTypeDef>(),
        124usize,
        concat!("Size of: ", stringify!(SD_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SD_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SD_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pTxBuffPtr) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(pTxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferSize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(TxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pRxBuffPtr) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(pRxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferSize) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(RxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Context) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(Context)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SdCard) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(SdCard)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSD) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(CSD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(SD_HandleTypeDef),
            "::",
            stringify!(CID)
        )
    );
}
#[test]
fn bindgen_test_layout_HAL_SD_CardCSDTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HAL_SD_CardCSDTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HAL_SD_CardCSDTypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(HAL_SD_CardCSDTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HAL_SD_CardCSDTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HAL_SD_CardCSDTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSDStruct) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(CSDStruct)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SysSpecVersion) as usize - ptr as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(SysSpecVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(Reserved1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TAAC) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(TAAC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NSAC) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(NSAC)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MaxBusClkFrec) as usize - ptr as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(MaxBusClkFrec)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CardComdClasses) as usize
                - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(CardComdClasses)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RdBlockLen) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(RdBlockLen)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PartBlockRead) as usize - ptr as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(PartBlockRead)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WrBlockMisalign) as usize
                - ptr as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(WrBlockMisalign)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RdBlockMisalign) as usize
                - ptr as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(RdBlockMisalign)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DSRImpl) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(DSRImpl)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(Reserved2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DeviceSize) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(DeviceSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MaxRdCurrentVDDMin) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(MaxRdCurrentVDDMin)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MaxRdCurrentVDDMax) as usize
                - ptr as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(MaxRdCurrentVDDMax)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MaxWrCurrentVDDMin) as usize
                - ptr as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(MaxWrCurrentVDDMin)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MaxWrCurrentVDDMax) as usize
                - ptr as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(MaxWrCurrentVDDMax)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DeviceSizeMul) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(DeviceSizeMul)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EraseGrSize) as usize - ptr as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(EraseGrSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EraseGrMul) as usize - ptr as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(EraseGrMul)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WrProtectGrSize) as usize
                - ptr as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(WrProtectGrSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WrProtectGrEnable) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(WrProtectGrEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ManDeflECC) as usize - ptr as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(ManDeflECC)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WrSpeedFact) as usize - ptr as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(WrSpeedFact)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MaxWrBlockLen) as usize - ptr as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(MaxWrBlockLen)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WriteBlockPaPartial) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(WriteBlockPaPartial)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(Reserved3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ContentProtectAppli) as usize
                - ptr as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(ContentProtectAppli)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FileFormatGroup) as usize
                - ptr as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(FileFormatGroup)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CopyFlag) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(CopyFlag)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PermWrProtect) as usize - ptr as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(PermWrProtect)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TempWrProtect) as usize - ptr as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(TempWrProtect)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FileFormat) as usize - ptr as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(FileFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECC) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(ECC)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CSD_CRC) as usize - ptr as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(CSD_CRC)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved4) as usize - ptr as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCSDTypeDef),
            "::",
            stringify!(Reserved4)
        )
    );
}
#[test]
fn bindgen_test_layout_HAL_SD_CardCIDTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HAL_SD_CardCIDTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HAL_SD_CardCIDTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(HAL_SD_CardCIDTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HAL_SD_CardCIDTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HAL_SD_CardCIDTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ManufacturerID) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(ManufacturerID)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OEM_AppliID) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(OEM_AppliID)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ProdName1) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(ProdName1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ProdName2) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(ProdName2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ProdRev) as usize - ptr as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(ProdRev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ProdSN) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(ProdSN)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(Reserved1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ManufactDate) as usize - ptr as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(ManufactDate)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CID_CRC) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(CID_CRC)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardCIDTypeDef),
            "::",
            stringify!(Reserved2)
        )
    );
}
#[test]
fn bindgen_test_layout_HAL_SD_CardStatusTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<HAL_SD_CardStatusTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<HAL_SD_CardStatusTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(HAL_SD_CardStatusTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<HAL_SD_CardStatusTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(HAL_SD_CardStatusTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataBusWidth) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(DataBusWidth)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SecuredMode) as usize - ptr as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(SecuredMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CardType) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(CardType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ProtectedAreaSize) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(ProtectedAreaSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SpeedClass) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(SpeedClass)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PerformanceMove) as usize
                - ptr as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(PerformanceMove)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AllocationUnitSize) as usize
                - ptr as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(AllocationUnitSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EraseSize) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(EraseSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EraseTimeout) as usize - ptr as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(EraseTimeout)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EraseOffset) as usize - ptr as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(EraseOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).UhsSpeedGrade) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(UhsSpeedGrade)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).UhsAllocationUnitSize) as usize
                - ptr as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(UhsAllocationUnitSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).VideoSpeedClass) as usize
                - ptr as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(HAL_SD_CardStatusTypeDef),
            "::",
            stringify!(VideoSpeedClass)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_NORSRAM_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_NORSRAM_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_NORSRAM_InitTypeDef>(),
        60usize,
        concat!("Size of: ", stringify!(FMC_NORSRAM_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_NORSRAM_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_NORSRAM_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NSBank) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(NSBank)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataAddressMux) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(DataAddressMux)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MemoryType) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(MemoryType)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MemoryDataWidth) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(MemoryDataWidth)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BurstAccessMode) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(BurstAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WaitSignalPolarity) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(WaitSignalPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WaitSignalActive) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(WaitSignalActive)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WriteOperation) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(WriteOperation)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WaitSignal) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(WaitSignal)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExtendedMode) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(ExtendedMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AsynchronousWait) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(AsynchronousWait)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WriteBurst) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(WriteBurst)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ContinuousClock) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(ContinuousClock)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WriteFifo) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(WriteFifo)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).PageSize) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NORSRAM_InitTypeDef),
            "::",
            stringify!(PageSize)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_NAND_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_NAND_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_NAND_InitTypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(FMC_NAND_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_NAND_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_NAND_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NandBank) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NAND_InitTypeDef),
            "::",
            stringify!(NandBank)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Waitfeature) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NAND_InitTypeDef),
            "::",
            stringify!(Waitfeature)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MemoryDataWidth) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NAND_InitTypeDef),
            "::",
            stringify!(MemoryDataWidth)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EccComputation) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NAND_InitTypeDef),
            "::",
            stringify!(EccComputation)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ECCPageSize) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NAND_InitTypeDef),
            "::",
            stringify!(ECCPageSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TCLRSetupTime) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NAND_InitTypeDef),
            "::",
            stringify!(TCLRSetupTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TARSetupTime) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_NAND_InitTypeDef),
            "::",
            stringify!(TARSetupTime)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_SDRAM_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_SDRAM_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_SDRAM_InitTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(FMC_SDRAM_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_SDRAM_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_SDRAM_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDBank) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(SDBank)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ColumnBitsNumber) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(ColumnBitsNumber)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RowBitsNumber) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(RowBitsNumber)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MemoryDataWidth) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(MemoryDataWidth)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InternalBankNumber) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(InternalBankNumber)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CASLatency) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(CASLatency)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WriteProtection) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(WriteProtection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SDClockPeriod) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(SDClockPeriod)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ReadBurst) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(ReadBurst)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ReadPipeDelay) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_InitTypeDef),
            "::",
            stringify!(ReadPipeDelay)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_SDRAM_TimingTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_SDRAM_TimingTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_SDRAM_TimingTypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(FMC_SDRAM_TimingTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_SDRAM_TimingTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_SDRAM_TimingTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LoadToActiveDelay) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_TimingTypeDef),
            "::",
            stringify!(LoadToActiveDelay)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ExitSelfRefreshDelay) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_TimingTypeDef),
            "::",
            stringify!(ExitSelfRefreshDelay)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SelfRefreshTime) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_TimingTypeDef),
            "::",
            stringify!(SelfRefreshTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RowCycleDelay) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_TimingTypeDef),
            "::",
            stringify!(RowCycleDelay)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WriteRecoveryTime) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_TimingTypeDef),
            "::",
            stringify!(WriteRecoveryTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RPDelay) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_TimingTypeDef),
            "::",
            stringify!(RPDelay)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RCDDelay) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_TimingTypeDef),
            "::",
            stringify!(RCDDelay)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_SDRAM_CommandTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FMC_SDRAM_CommandTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FMC_SDRAM_CommandTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(FMC_SDRAM_CommandTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FMC_SDRAM_CommandTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_SDRAM_CommandTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CommandMode) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_CommandTypeDef),
            "::",
            stringify!(CommandMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CommandTarget) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_CommandTypeDef),
            "::",
            stringify!(CommandTarget)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AutoRefreshNumber) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_CommandTypeDef),
            "::",
            stringify!(AutoRefreshNumber)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ModeRegisterDefinition) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_SDRAM_CommandTypeDef),
            "::",
            stringify!(ModeRegisterDefinition)
        )
    );
}
#[test]
fn bindgen_test_layout_SDRAM_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDRAM_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDRAM_HandleTypeDef>(),
        56usize,
        concat!("Size of: ", stringify!(SDRAM_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDRAM_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDRAM_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDRAM_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDRAM_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDRAM_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDRAM_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hmdma) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDRAM_HandleTypeDef),
            "::",
            stringify!(hmdma)
        )
    );
}
#[test]
fn bindgen_test_layout_SPI_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SPI_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPI_InitTypeDef>(),
        88usize,
        concat!("Size of: ", stringify!(SPI_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SPI_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SPI_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Direction) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataSize) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(DataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CLKPolarity) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(CLKPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CLKPhase) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(CLKPhase)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NSS) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(NSS)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BaudRatePrescaler) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(BaudRatePrescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FirstBit) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(FirstBit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(TIMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCCalculation) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(CRCCalculation)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCPolynomial) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(CRCPolynomial)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCLength) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(CRCLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NSSPMode) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(NSSPMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NSSPolarity) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(NSSPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FifoThreshold) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(FifoThreshold)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxCRCInitializationPattern) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(TxCRCInitializationPattern)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxCRCInitializationPattern) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(RxCRCInitializationPattern)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterSSIdleness) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(MasterSSIdleness)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterInterDataIdleness) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(MasterInterDataIdleness)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterReceiverAutoSusp) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(MasterReceiverAutoSusp)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterKeepIOState) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(MasterKeepIOState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IOSwap) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(IOSwap)
        )
    );
}
#[test]
fn bindgen_test_layout___SPI_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<__SPI_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__SPI_HandleTypeDef>(),
        140usize,
        concat!("Size of: ", stringify!(__SPI_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<__SPI_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(__SPI_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pTxBuffPtr) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(pTxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferSize) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(TxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferCount) as usize - ptr as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(TxXferCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pRxBuffPtr) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(pRxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferSize) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(RxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferCount) as usize - ptr as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(RxXferCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CRCSize) as usize - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(CRCSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RxISR) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(RxISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TxISR) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(TxISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmatx) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(hdmatx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmarx) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(hdmarx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__SPI_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_Base_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_Base_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_Base_InitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(TIM_Base_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_Base_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_Base_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Prescaler) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Base_InitTypeDef),
            "::",
            stringify!(Prescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CounterMode) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Base_InitTypeDef),
            "::",
            stringify!(CounterMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Period) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Base_InitTypeDef),
            "::",
            stringify!(Period)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockDivision) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Base_InitTypeDef),
            "::",
            stringify!(ClockDivision)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RepetitionCounter) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Base_InitTypeDef),
            "::",
            stringify!(RepetitionCounter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AutoReloadPreload) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Base_InitTypeDef),
            "::",
            stringify!(AutoReloadPreload)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_OC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_OC_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_OC_InitTypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(TIM_OC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_OC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_OC_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OCMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OC_InitTypeDef),
            "::",
            stringify!(OCMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Pulse) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OC_InitTypeDef),
            "::",
            stringify!(Pulse)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCPolarity) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OC_InitTypeDef),
            "::",
            stringify!(OCPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCNPolarity) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OC_InitTypeDef),
            "::",
            stringify!(OCNPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCFastMode) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OC_InitTypeDef),
            "::",
            stringify!(OCFastMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCIdleState) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OC_InitTypeDef),
            "::",
            stringify!(OCIdleState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCNIdleState) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OC_InitTypeDef),
            "::",
            stringify!(OCNIdleState)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_OnePulse_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_OnePulse_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_OnePulse_InitTypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(TIM_OnePulse_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_OnePulse_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_OnePulse_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OCMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(OCMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Pulse) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(Pulse)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCPolarity) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(OCPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCNPolarity) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(OCNPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCIdleState) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(OCIdleState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OCNIdleState) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(OCNIdleState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ICPolarity) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(ICPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ICSelection) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(ICSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ICFilter) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OnePulse_InitTypeDef),
            "::",
            stringify!(ICFilter)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_IC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_IC_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_IC_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(TIM_IC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_IC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_IC_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ICPolarity) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_IC_InitTypeDef),
            "::",
            stringify!(ICPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ICSelection) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_IC_InitTypeDef),
            "::",
            stringify!(ICSelection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ICPrescaler) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_IC_InitTypeDef),
            "::",
            stringify!(ICPrescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ICFilter) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_IC_InitTypeDef),
            "::",
            stringify!(ICFilter)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_Encoder_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_Encoder_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_Encoder_InitTypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(TIM_Encoder_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_Encoder_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_Encoder_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EncoderMode) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(EncoderMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC1Polarity) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(IC1Polarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC1Selection) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(IC1Selection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC1Prescaler) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(IC1Prescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC1Filter) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(IC1Filter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC2Polarity) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(IC2Polarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC2Selection) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(IC2Selection)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC2Prescaler) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(IC2Prescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC2Filter) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_Encoder_InitTypeDef),
            "::",
            stringify!(IC2Filter)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_ClockConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_ClockConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_ClockConfigTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(TIM_ClockConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_ClockConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_ClockConfigTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockSource) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClockConfigTypeDef),
            "::",
            stringify!(ClockSource)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockPolarity) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClockConfigTypeDef),
            "::",
            stringify!(ClockPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockPrescaler) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClockConfigTypeDef),
            "::",
            stringify!(ClockPrescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockFilter) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClockConfigTypeDef),
            "::",
            stringify!(ClockFilter)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_ClearInputConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_ClearInputConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_ClearInputConfigTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(TIM_ClearInputConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_ClearInputConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_ClearInputConfigTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClearInputState) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClearInputConfigTypeDef),
            "::",
            stringify!(ClearInputState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClearInputSource) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClearInputConfigTypeDef),
            "::",
            stringify!(ClearInputSource)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClearInputPolarity) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClearInputConfigTypeDef),
            "::",
            stringify!(ClearInputPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClearInputPrescaler) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClearInputConfigTypeDef),
            "::",
            stringify!(ClearInputPrescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClearInputFilter) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ClearInputConfigTypeDef),
            "::",
            stringify!(ClearInputFilter)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_MasterConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_MasterConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_MasterConfigTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(TIM_MasterConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_MasterConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_MasterConfigTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterOutputTrigger) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_MasterConfigTypeDef),
            "::",
            stringify!(MasterOutputTrigger)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterOutputTrigger2) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_MasterConfigTypeDef),
            "::",
            stringify!(MasterOutputTrigger2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MasterSlaveMode) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_MasterConfigTypeDef),
            "::",
            stringify!(MasterSlaveMode)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_SlaveConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_SlaveConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_SlaveConfigTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(TIM_SlaveConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_SlaveConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_SlaveConfigTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SlaveMode) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_SlaveConfigTypeDef),
            "::",
            stringify!(SlaveMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).InputTrigger) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_SlaveConfigTypeDef),
            "::",
            stringify!(InputTrigger)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TriggerPolarity) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_SlaveConfigTypeDef),
            "::",
            stringify!(TriggerPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TriggerPrescaler) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_SlaveConfigTypeDef),
            "::",
            stringify!(TriggerPrescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TriggerFilter) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_SlaveConfigTypeDef),
            "::",
            stringify!(TriggerFilter)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_BreakDeadTimeConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_BreakDeadTimeConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_BreakDeadTimeConfigTypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(TIM_BreakDeadTimeConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_BreakDeadTimeConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_BreakDeadTimeConfigTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OffStateRunMode) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(OffStateRunMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OffStateIDLEMode) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(OffStateIDLEMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).LockLevel) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(LockLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DeadTime) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(DeadTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BreakState) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(BreakState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BreakPolarity) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(BreakPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BreakFilter) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(BreakFilter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Break2State) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(Break2State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Break2Polarity) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(Break2Polarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Break2Filter) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(Break2Filter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AutomaticOutput) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BreakDeadTimeConfigTypeDef),
            "::",
            stringify!(AutomaticOutput)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_HandleTypeDef>(),
        68usize,
        concat!("Size of: ", stringify!(TIM_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Channel) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HandleTypeDef),
            "::",
            stringify!(Channel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdma) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HandleTypeDef),
            "::",
            stringify!(hdma)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
}
#[test]
fn bindgen_test_layout_TIM_HallSensor_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_HallSensor_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_HallSensor_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(TIM_HallSensor_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_HallSensor_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_HallSensor_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC1Polarity) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HallSensor_InitTypeDef),
            "::",
            stringify!(IC1Polarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC1Prescaler) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HallSensor_InitTypeDef),
            "::",
            stringify!(IC1Prescaler)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).IC1Filter) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HallSensor_InitTypeDef),
            "::",
            stringify!(IC1Filter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Commutation_Delay) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_HallSensor_InitTypeDef),
            "::",
            stringify!(Commutation_Delay)
        )
    );
}
#[test]
fn bindgen_test_layout_TIMEx_BreakInputConfigTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIMEx_BreakInputConfigTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIMEx_BreakInputConfigTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(TIMEx_BreakInputConfigTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIMEx_BreakInputConfigTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIMEx_BreakInputConfigTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Source) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIMEx_BreakInputConfigTypeDef),
            "::",
            stringify!(Source)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Enable) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIMEx_BreakInputConfigTypeDef),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Polarity) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIMEx_BreakInputConfigTypeDef),
            "::",
            stringify!(Polarity)
        )
    );
}
#[test]
fn bindgen_test_layout_UART_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<UART_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<UART_InitTypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(UART_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<UART_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(UART_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WordLength) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(WordLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StopBits) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(StopBits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Parity) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(Parity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).HwFlowCtl) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(HwFlowCtl)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OverSampling) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(OverSampling)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OneBitSampling) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(OneBitSampling)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockPrescaler) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_InitTypeDef),
            "::",
            stringify!(ClockPrescaler)
        )
    );
}
#[test]
fn bindgen_test_layout_UART_AdvFeatureInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<UART_AdvFeatureInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<UART_AdvFeatureInitTypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(UART_AdvFeatureInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<UART_AdvFeatureInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(UART_AdvFeatureInitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AdvFeatureInit) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(AdvFeatureInit)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxPinLevelInvert) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(TxPinLevelInvert)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxPinLevelInvert) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(RxPinLevelInvert)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DataInvert) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(DataInvert)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Swap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(Swap)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OverrunDisable) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(OverrunDisable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DMADisableonRxError) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(DMADisableonRxError)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AutoBaudRateEnable) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(AutoBaudRateEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AutoBaudRateMode) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(AutoBaudRateMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).MSBFirst) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_AdvFeatureInitTypeDef),
            "::",
            stringify!(MSBFirst)
        )
    );
}
#[test]
fn bindgen_test_layout___UART_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<__UART_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__UART_HandleTypeDef>(),
        140usize,
        concat!("Size of: ", stringify!(__UART_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<__UART_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(__UART_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AdvancedInit) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(AdvancedInit)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pTxBuffPtr) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(pTxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferSize) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(TxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferCount) as usize - ptr as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(TxXferCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pRxBuffPtr) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(pRxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferSize) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(RxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferCount) as usize - ptr as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(RxXferCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(Mask)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FifoMode) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(FifoMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbRxDataToProcess) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(NbRxDataToProcess)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbTxDataToProcess) as usize
                - ptr as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(NbTxDataToProcess)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RxISR) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(RxISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TxISR) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(TxISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmatx) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(hdmatx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmarx) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(hdmarx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gState) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(gState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxState) as usize - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(RxState)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__UART_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
}
#[test]
fn bindgen_test_layout_UART_WakeUpTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<UART_WakeUpTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<UART_WakeUpTypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(UART_WakeUpTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<UART_WakeUpTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(UART_WakeUpTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WakeUpEvent) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_WakeUpTypeDef),
            "::",
            stringify!(WakeUpEvent)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).AddressLength) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_WakeUpTypeDef),
            "::",
            stringify!(AddressLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Address) as usize - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_WakeUpTypeDef),
            "::",
            stringify!(Address)
        )
    );
}
#[test]
fn bindgen_test_layout_USART_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USART_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USART_InitTypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(USART_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USART_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USART_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).WordLength) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(WordLength)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).StopBits) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(StopBits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Parity) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(Parity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CLKPolarity) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(CLKPolarity)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CLKPhase) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(CLKPhase)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).CLKLastBit) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(CLKLastBit)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ClockPrescaler) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(ClockPrescaler)
        )
    );
}
#[test]
fn bindgen_test_layout___USART_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<__USART_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__USART_HandleTypeDef>(),
        100usize,
        concat!("Size of: ", stringify!(__USART_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<__USART_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(__USART_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pTxBuffPtr) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(pTxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferSize) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(TxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).TxXferCount) as usize - ptr as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(TxXferCount)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pRxBuffPtr) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(pRxBuffPtr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferSize) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(RxXferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).RxXferCount) as usize - ptr as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(RxXferCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(Mask)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbRxDataToProcess) as usize
                - ptr as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(NbRxDataToProcess)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NbTxDataToProcess) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(NbTxDataToProcess)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).SlaveMode) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(SlaveMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FifoMode) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(FifoMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RxISR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(RxISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TxISR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(TxISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmatx) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(hdmatx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdmarx) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(hdmarx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ErrorCode) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__USART_HandleTypeDef),
            "::",
            stringify!(ErrorCode)
        )
    );
}
#[test]
fn bindgen_test_layout_WWDG_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<WWDG_InitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<WWDG_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(WWDG_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<WWDG_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(WWDG_InitTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Prescaler) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_InitTypeDef),
            "::",
            stringify!(Prescaler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Window) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_InitTypeDef),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Counter) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_InitTypeDef),
            "::",
            stringify!(Counter)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).EWIMode) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_InitTypeDef),
            "::",
            stringify!(EWIMode)
        )
    );
}
#[test]
fn bindgen_test_layout_WWDG_HandleTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<WWDG_HandleTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<WWDG_HandleTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(WWDG_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<WWDG_HandleTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(WWDG_HandleTypeDef))
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Instance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_HandleTypeDef),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Init) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_HandleTypeDef),
            "::",
            stringify!(Init)
        )
    );
}
pub mod FlagStatus {
    pub type Type = ::core::ffi::c_uint;
    pub const RESET: Type = 0;
    pub const SET: Type = 1;
}
pub mod FunctionalState {
    pub type Type = ::core::ffi::c_uint;
    pub const DISABLE: Type = 0;
    pub const ENABLE: Type = 1;
}
pub mod HAL_StatusTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_OK: Type = 0;
    pub const HAL_ERROR: Type = 1;
    pub const HAL_BUSY: Type = 2;
    pub const HAL_TIMEOUT: Type = 3;
}
pub mod HAL_LockTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_UNLOCKED: Type = 0;
    pub const HAL_LOCKED: Type = 1;
}
pub mod HAL_DMA_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_DMA_STATE_RESET: Type = 0;
    pub const HAL_DMA_STATE_READY: Type = 1;
    pub const HAL_DMA_STATE_BUSY: Type = 2;
    pub const HAL_DMA_STATE_ERROR: Type = 3;
    pub const HAL_DMA_STATE_ABORT: Type = 4;
}
pub mod HAL_DMA_LevelCompleteTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_DMA_FULL_TRANSFER: Type = 0;
    pub const HAL_DMA_HALF_TRANSFER: Type = 1;
}
pub mod HAL_DMA_CallbackIDTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_DMA_XFER_CPLT_CB_ID: Type = 0;
    pub const HAL_DMA_XFER_HALFCPLT_CB_ID: Type = 1;
    pub const HAL_DMA_XFER_M1CPLT_CB_ID: Type = 2;
    pub const HAL_DMA_XFER_M1HALFCPLT_CB_ID: Type = 3;
    pub const HAL_DMA_XFER_ERROR_CB_ID: Type = 4;
    pub const HAL_DMA_XFER_ABORT_CB_ID: Type = 5;
    pub const HAL_DMA_XFER_ALL_CB_ID: Type = 6;
}
pub mod HAL_DMA_MemoryTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const MEMORY0: Type = 0;
    pub const MEMORY1: Type = 1;
}
pub mod HAL_MDMA_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_MDMA_STATE_RESET: Type = 0;
    pub const HAL_MDMA_STATE_READY: Type = 1;
    pub const HAL_MDMA_STATE_BUSY: Type = 2;
    pub const HAL_MDMA_STATE_ERROR: Type = 3;
    pub const HAL_MDMA_STATE_ABORT: Type = 4;
}
pub mod HAL_MDMA_LevelCompleteTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_MDMA_FULL_TRANSFER: Type = 0;
    pub const HAL_MDMA_BUFFER_TRANSFER: Type = 1;
    pub const HAL_MDMA_BLOCK_TRANSFER: Type = 2;
    pub const HAL_MDMA_REPEAT_BLOCK_TRANSFER: Type = 3;
}
pub mod HAL_MDMA_CallbackIDTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_MDMA_XFER_CPLT_CB_ID: Type = 0;
    pub const HAL_MDMA_XFER_BUFFERCPLT_CB_ID: Type = 1;
    pub const HAL_MDMA_XFER_BLOCKCPLT_CB_ID: Type = 2;
    pub const HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID: Type = 3;
    pub const HAL_MDMA_XFER_ERROR_CB_ID: Type = 4;
    pub const HAL_MDMA_XFER_ABORT_CB_ID: Type = 5;
    pub const HAL_MDMA_XFER_ALL_CB_ID: Type = 6;
}
pub mod HAL_CRC_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_CRC_STATE_RESET: Type = 0;
    pub const HAL_CRC_STATE_READY: Type = 1;
    pub const HAL_CRC_STATE_BUSY: Type = 2;
    pub const HAL_CRC_STATE_TIMEOUT: Type = 3;
    pub const HAL_CRC_STATE_ERROR: Type = 4;
}
pub mod HAL_DAC_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_DAC_STATE_RESET: Type = 0;
    pub const HAL_DAC_STATE_READY: Type = 1;
    pub const HAL_DAC_STATE_BUSY: Type = 2;
    pub const HAL_DAC_STATE_TIMEOUT: Type = 3;
    pub const HAL_DAC_STATE_ERROR: Type = 4;
}
pub mod HAL_DCMI_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_DCMI_STATE_RESET: Type = 0;
    pub const HAL_DCMI_STATE_READY: Type = 1;
    pub const HAL_DCMI_STATE_BUSY: Type = 2;
    pub const HAL_DCMI_STATE_TIMEOUT: Type = 3;
    pub const HAL_DCMI_STATE_ERROR: Type = 4;
    pub const HAL_DCMI_STATE_SUSPENDED: Type = 5;
}
pub mod HAL_FDCAN_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_FDCAN_STATE_RESET: Type = 0;
    pub const HAL_FDCAN_STATE_READY: Type = 1;
    pub const HAL_FDCAN_STATE_BUSY: Type = 2;
    pub const HAL_FDCAN_STATE_ERROR: Type = 3;
}
pub mod GPIO_PinState {
    pub type Type = ::core::ffi::c_uint;
    pub const GPIO_PIN_RESET: Type = 0;
    pub const GPIO_PIN_SET: Type = 1;
}
pub mod HAL_HASH_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_HASH_STATE_RESET: Type = 0;
    pub const HAL_HASH_STATE_READY: Type = 1;
    pub const HAL_HASH_STATE_BUSY: Type = 2;
    pub const HAL_HASH_STATE_TIMEOUT: Type = 6;
    pub const HAL_HASH_STATE_ERROR: Type = 7;
    pub const HAL_HASH_STATE_SUSPENDED: Type = 8;
}
pub mod HAL_HASH_PhaseTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_HASH_PHASE_READY: Type = 1;
    pub const HAL_HASH_PHASE_PROCESS: Type = 2;
    pub const HAL_HASH_PHASE_HMAC_STEP_1: Type = 3;
    pub const HAL_HASH_PHASE_HMAC_STEP_2: Type = 4;
    pub const HAL_HASH_PHASE_HMAC_STEP_3: Type = 5;
}
pub mod HAL_HASH_SuspendTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_HASH_SUSPEND_NONE: Type = 0;
    pub const HAL_HASH_SUSPEND: Type = 1;
}
pub mod USB_OTG_URBStateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const URB_IDLE: Type = 0;
    pub const URB_DONE: Type = 1;
    pub const URB_NOTREADY: Type = 2;
    pub const URB_NYET: Type = 3;
    pub const URB_ERROR: Type = 4;
    pub const URB_STALL: Type = 5;
}
pub mod USB_OTG_HCStateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HC_IDLE: Type = 0;
    pub const HC_XFRC: Type = 1;
    pub const HC_HALTED: Type = 2;
    pub const HC_NAK: Type = 3;
    pub const HC_NYET: Type = 4;
    pub const HC_STALL: Type = 5;
    pub const HC_XACTERR: Type = 6;
    pub const HC_BBLERR: Type = 7;
    pub const HC_DATATGLERR: Type = 8;
}
pub mod HCD_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_HCD_STATE_RESET: Type = 0;
    pub const HAL_HCD_STATE_READY: Type = 1;
    pub const HAL_HCD_STATE_ERROR: Type = 2;
    pub const HAL_HCD_STATE_BUSY: Type = 3;
    pub const HAL_HCD_STATE_TIMEOUT: Type = 4;
}
pub mod HAL_I2C_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_I2C_STATE_RESET: Type = 0;
    pub const HAL_I2C_STATE_READY: Type = 32;
    pub const HAL_I2C_STATE_BUSY: Type = 36;
    pub const HAL_I2C_STATE_BUSY_TX: Type = 33;
    pub const HAL_I2C_STATE_BUSY_RX: Type = 34;
    pub const HAL_I2C_STATE_LISTEN: Type = 40;
    pub const HAL_I2C_STATE_BUSY_TX_LISTEN: Type = 41;
    pub const HAL_I2C_STATE_BUSY_RX_LISTEN: Type = 42;
    pub const HAL_I2C_STATE_ABORT: Type = 96;
    pub const HAL_I2C_STATE_TIMEOUT: Type = 160;
    pub const HAL_I2C_STATE_ERROR: Type = 224;
}
pub mod HAL_I2C_ModeTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_I2C_MODE_NONE: Type = 0;
    pub const HAL_I2C_MODE_MASTER: Type = 16;
    pub const HAL_I2C_MODE_SLAVE: Type = 32;
    pub const HAL_I2C_MODE_MEM: Type = 64;
}
pub mod HAL_I2S_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_I2S_STATE_RESET: Type = 0;
    pub const HAL_I2S_STATE_READY: Type = 1;
    pub const HAL_I2S_STATE_BUSY: Type = 2;
    pub const HAL_I2S_STATE_BUSY_TX: Type = 3;
    pub const HAL_I2S_STATE_BUSY_RX: Type = 4;
    pub const HAL_I2S_STATE_TIMEOUT: Type = 6;
    pub const HAL_I2S_STATE_ERROR: Type = 7;
}
pub mod PCD_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_PCD_STATE_RESET: Type = 0;
    pub const HAL_PCD_STATE_READY: Type = 1;
    pub const HAL_PCD_STATE_ERROR: Type = 2;
    pub const HAL_PCD_STATE_BUSY: Type = 3;
    pub const HAL_PCD_STATE_TIMEOUT: Type = 4;
}
pub mod PCD_LPM_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const LPM_L0: Type = 0;
    pub const LPM_L1: Type = 1;
    pub const LPM_L2: Type = 2;
    pub const LPM_L3: Type = 3;
}
pub mod PCD_LPM_MsgTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const PCD_LPM_L0_ACTIVE: Type = 0;
    pub const PCD_LPM_L1_ACTIVE: Type = 1;
}
pub mod PCD_BCD_MsgTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const PCD_BCD_ERROR: Type = 255;
    pub const PCD_BCD_CONTACT_DETECTION: Type = 254;
    pub const PCD_BCD_STD_DOWNSTREAM_PORT: Type = 253;
    pub const PCD_BCD_CHARGING_DOWNSTREAM_PORT: Type = 252;
    pub const PCD_BCD_DEDICATED_CHARGING_PORT: Type = 251;
    pub const PCD_BCD_DISCOVERY_COMPLETED: Type = 0;
}
pub mod HAL_RTCStateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_RTC_STATE_RESET: Type = 0;
    pub const HAL_RTC_STATE_READY: Type = 1;
    pub const HAL_RTC_STATE_BUSY: Type = 2;
    pub const HAL_RTC_STATE_TIMEOUT: Type = 3;
    pub const HAL_RTC_STATE_ERROR: Type = 4;
}
pub mod HAL_SD_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_SD_STATE_RESET: Type = 0;
    pub const HAL_SD_STATE_READY: Type = 1;
    pub const HAL_SD_STATE_TIMEOUT: Type = 2;
    pub const HAL_SD_STATE_BUSY: Type = 3;
    pub const HAL_SD_STATE_PROGRAMMING: Type = 4;
    pub const HAL_SD_STATE_RECEIVING: Type = 5;
    pub const HAL_SD_STATE_TRANSFER: Type = 6;
    pub const HAL_SD_STATE_ERROR: Type = 15;
}
pub mod HAL_SDEx_DMABuffer_MemoryTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const SD_DMA_BUFFER0: Type = 0;
    pub const SD_DMA_BUFFER1: Type = 1;
}
pub mod HAL_SDRAM_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_SDRAM_STATE_RESET: Type = 0;
    pub const HAL_SDRAM_STATE_READY: Type = 1;
    pub const HAL_SDRAM_STATE_BUSY: Type = 2;
    pub const HAL_SDRAM_STATE_ERROR: Type = 3;
    pub const HAL_SDRAM_STATE_WRITE_PROTECTED: Type = 4;
    pub const HAL_SDRAM_STATE_PRECHARGED: Type = 5;
}
pub mod HAL_SPI_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_SPI_STATE_RESET: Type = 0;
    pub const HAL_SPI_STATE_READY: Type = 1;
    pub const HAL_SPI_STATE_BUSY: Type = 2;
    pub const HAL_SPI_STATE_BUSY_TX: Type = 3;
    pub const HAL_SPI_STATE_BUSY_RX: Type = 4;
    pub const HAL_SPI_STATE_BUSY_TX_RX: Type = 5;
    pub const HAL_SPI_STATE_ERROR: Type = 6;
    pub const HAL_SPI_STATE_ABORT: Type = 7;
}
pub mod HAL_TIM_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_TIM_STATE_RESET: Type = 0;
    pub const HAL_TIM_STATE_READY: Type = 1;
    pub const HAL_TIM_STATE_BUSY: Type = 2;
    pub const HAL_TIM_STATE_TIMEOUT: Type = 3;
    pub const HAL_TIM_STATE_ERROR: Type = 4;
}
pub mod HAL_TIM_ActiveChannel {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_TIM_ACTIVE_CHANNEL_1: Type = 1;
    pub const HAL_TIM_ACTIVE_CHANNEL_2: Type = 2;
    pub const HAL_TIM_ACTIVE_CHANNEL_3: Type = 4;
    pub const HAL_TIM_ACTIVE_CHANNEL_4: Type = 8;
    pub const HAL_TIM_ACTIVE_CHANNEL_5: Type = 16;
    pub const HAL_TIM_ACTIVE_CHANNEL_6: Type = 32;
    pub const HAL_TIM_ACTIVE_CHANNEL_CLEARED: Type = 0;
}
pub mod HAL_USART_StateTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_USART_STATE_RESET: Type = 0;
    pub const HAL_USART_STATE_READY: Type = 1;
    pub const HAL_USART_STATE_BUSY: Type = 2;
    pub const HAL_USART_STATE_BUSY_TX: Type = 18;
    pub const HAL_USART_STATE_BUSY_RX: Type = 34;
    pub const HAL_USART_STATE_BUSY_TX_RX: Type = 50;
    pub const HAL_USART_STATE_TIMEOUT: Type = 3;
    pub const HAL_USART_STATE_ERROR: Type = 4;
}
pub mod HAL_TickFreqTypeDef {
    pub type Type = ::core::ffi::c_uint;
    pub const HAL_TICK_FREQ_10HZ: Type = 100;
    pub const HAL_TICK_FREQ_100HZ: Type = 10;
    pub const HAL_TICK_FREQ_1KHZ: Type = 1;
    pub const HAL_TICK_FREQ_DEFAULT: Type = 1;
}
pub use self::USB_OTG_HCStateTypeDef::Type as HCD_HCStateTypeDef;
pub use self::USB_OTG_URBStateTypeDef::Type as HCD_URBStateTypeDef;
extern "C" {
    pub fn HAL_DMAEx_MultiBufferStart(
        hdma: *mut DMA_HandleTypeDef,
        SrcAddress: u32,
        DstAddress: u32,
        SecondMemAddress: u32,
        DataLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMAEx_MultiBufferStart_IT(
        hdma: *mut DMA_HandleTypeDef,
        SrcAddress: u32,
        DstAddress: u32,
        SecondMemAddress: u32,
        DataLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMAEx_ChangeMemory(
        hdma: *mut DMA_HandleTypeDef,
        Address: u32,
        memory: HAL_DMA_MemoryTypeDef::Type,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMAEx_ConfigMuxSync(
        hdma: *mut DMA_HandleTypeDef,
        pSyncConfig: *mut HAL_DMA_MuxSyncConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMAEx_ConfigMuxRequestGenerator(
        hdma: *mut DMA_HandleTypeDef,
        pRequestGeneratorConfig: *mut HAL_DMA_MuxRequestGeneratorConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMAEx_EnableMuxRequestGenerator(
        hdma: *mut DMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMAEx_DisableMuxRequestGenerator(
        hdma: *mut DMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMAEx_MUX_IRQHandler(hdma: *mut DMA_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DMA_Init(
        hdma: *mut DMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_DeInit(
        hdma: *mut DMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_Start(
        hdma: *mut DMA_HandleTypeDef,
        SrcAddress: u32,
        DstAddress: u32,
        DataLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_Start_IT(
        hdma: *mut DMA_HandleTypeDef,
        SrcAddress: u32,
        DstAddress: u32,
        DataLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_Abort(
        hdma: *mut DMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_Abort_IT(
        hdma: *mut DMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_PollForTransfer(
        hdma: *mut DMA_HandleTypeDef,
        CompleteLevel: HAL_DMA_LevelCompleteTypeDef::Type,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_IRQHandler(hdma: *mut DMA_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DMA_RegisterCallback(
        hdma: *mut DMA_HandleTypeDef,
        CallbackID: HAL_DMA_CallbackIDTypeDef::Type,
        pCallback: ::core::option::Option<
            unsafe extern "C" fn(_hdma: *mut DMA_HandleTypeDef),
        >,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_UnRegisterCallback(
        hdma: *mut DMA_HandleTypeDef,
        CallbackID: HAL_DMA_CallbackIDTypeDef::Type,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_GetState(
        hdma: *mut DMA_HandleTypeDef,
    ) -> HAL_DMA_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_DMA_GetError(hdma: *mut DMA_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_MDMA_Init(
        hmdma: *mut MDMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_DeInit(
        hmdma: *mut MDMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_ConfigPostRequestMask(
        hmdma: *mut MDMA_HandleTypeDef,
        MaskAddress: u32,
        MaskData: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_RegisterCallback(
        hmdma: *mut MDMA_HandleTypeDef,
        CallbackID: HAL_MDMA_CallbackIDTypeDef::Type,
        pCallback: ::core::option::Option<
            unsafe extern "C" fn(_hmdma: *mut MDMA_HandleTypeDef),
        >,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_UnRegisterCallback(
        hmdma: *mut MDMA_HandleTypeDef,
        CallbackID: HAL_MDMA_CallbackIDTypeDef::Type,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_LinkedList_CreateNode(
        pNode: *mut MDMA_LinkNodeTypeDef,
        pNodeConfig: *mut MDMA_LinkNodeConfTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_LinkedList_AddNode(
        hmdma: *mut MDMA_HandleTypeDef,
        pNewNode: *mut MDMA_LinkNodeTypeDef,
        pPrevNode: *mut MDMA_LinkNodeTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_LinkedList_RemoveNode(
        hmdma: *mut MDMA_HandleTypeDef,
        pNode: *mut MDMA_LinkNodeTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_LinkedList_EnableCircularMode(
        hmdma: *mut MDMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_LinkedList_DisableCircularMode(
        hmdma: *mut MDMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_Start(
        hmdma: *mut MDMA_HandleTypeDef,
        SrcAddress: u32,
        DstAddress: u32,
        BlockDataLength: u32,
        BlockCount: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_Start_IT(
        hmdma: *mut MDMA_HandleTypeDef,
        SrcAddress: u32,
        DstAddress: u32,
        BlockDataLength: u32,
        BlockCount: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_Abort(
        hmdma: *mut MDMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_Abort_IT(
        hmdma: *mut MDMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_PollForTransfer(
        hmdma: *mut MDMA_HandleTypeDef,
        CompleteLevel: HAL_MDMA_LevelCompleteTypeDef::Type,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_GenerateSWRequest(
        hmdma: *mut MDMA_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_IRQHandler(hmdma: *mut MDMA_HandleTypeDef);
}
extern "C" {
    pub fn HAL_MDMA_GetState(
        hmdma: *mut MDMA_HandleTypeDef,
    ) -> HAL_MDMA_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_MDMA_GetError(hmdma: *mut MDMA_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_ADCEx_Calibration_Start(
        hadc: *mut ADC_HandleTypeDef,
        CalibrationMode: u32,
        SingleDiff: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_Calibration_GetValue(
        hadc: *mut ADC_HandleTypeDef,
        SingleDiff: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_ADCEx_LinearCalibration_GetValue(
        hadc: *mut ADC_HandleTypeDef,
        LinearCalib_Buffer: *mut u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_Calibration_SetValue(
        hadc: *mut ADC_HandleTypeDef,
        SingleDiff: u32,
        CalibrationFactor: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_LinearCalibration_SetValue(
        hadc: *mut ADC_HandleTypeDef,
        LinearCalib_Buffer: *mut u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_LinearCalibration_FactorLoad(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedStart(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedStop(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedPollForConversion(
        hadc: *mut ADC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedStart_IT(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedStop_IT(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_MultiModeStart_DMA(
        hadc: *mut ADC_HandleTypeDef,
        pData: *mut u32,
        Length: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_MultiModeStop_DMA(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_MultiModeGetValue(hadc: *mut ADC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedGetValue(
        hadc: *mut ADC_HandleTypeDef,
        InjectedRank: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedConvCpltCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_InjectedQueueOverflowCallback(
        hadc: *mut ADC_HandleTypeDef,
    );
}
extern "C" {
    pub fn HAL_ADCEx_LevelOutOfWindow2Callback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_LevelOutOfWindow3Callback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_EndOfSamplingCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADCEx_RegularStop(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_RegularStop_IT(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_RegularStop_DMA(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_RegularMultiModeStop_DMA(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_InjectedConfigChannel(
        hadc: *mut ADC_HandleTypeDef,
        sConfigInjected: *mut ADC_InjectionConfTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_MultiModeConfigChannel(
        hadc: *mut ADC_HandleTypeDef,
        multimode: *mut ADC_MultiModeTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_EnableInjectedQueue(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_DisableInjectedQueue(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_DisableVoltageRegulator(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADCEx_EnterADCDeepPowerDownMode(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_Init(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_DeInit(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_MspInit(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_MspDeInit(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_Start(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_Stop(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_PollForConversion(
        hadc: *mut ADC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_PollForEvent(
        hadc: *mut ADC_HandleTypeDef,
        EventType: u32,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_Start_IT(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_Stop_IT(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_Start_DMA(
        hadc: *mut ADC_HandleTypeDef,
        pData: *mut u32,
        Length: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_Stop_DMA(
        hadc: *mut ADC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_GetValue(hadc: *mut ADC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_ADC_IRQHandler(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_ConvCpltCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_ConvHalfCpltCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_LevelOutOfWindowCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_ErrorCallback(hadc: *mut ADC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_ADC_ConfigChannel(
        hadc: *mut ADC_HandleTypeDef,
        sConfig: *mut ADC_ChannelConfTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_AnalogWDGConfig(
        hadc: *mut ADC_HandleTypeDef,
        AnalogWDGConfig: *mut ADC_AnalogWDGConfTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_ADC_GetState(hadc: *mut ADC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_ADC_GetError(hadc: *mut ADC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_NVIC_SetPriorityGrouping(PriorityGroup: u32);
}
extern "C" {
    pub fn HAL_NVIC_SetPriority(
        IRQn: IRQn_Type::Type,
        PreemptPriority: u32,
        SubPriority: u32,
    );
}
extern "C" {
    pub fn HAL_NVIC_EnableIRQ(IRQn: IRQn_Type::Type);
}
extern "C" {
    pub fn HAL_NVIC_DisableIRQ(IRQn: IRQn_Type::Type);
}
extern "C" {
    pub fn HAL_NVIC_SystemReset();
}
extern "C" {
    pub fn HAL_SYSTICK_Config(TicksNumb: u32) -> u32;
}
extern "C" {
    pub fn HAL_MPU_Enable(MPU_Control: u32);
}
extern "C" {
    pub fn HAL_MPU_Disable();
}
extern "C" {
    pub fn HAL_MPU_ConfigRegion(MPU_Init: *mut MPU_Region_InitTypeDef);
}
extern "C" {
    pub fn HAL_NVIC_GetPriorityGrouping() -> u32;
}
extern "C" {
    pub fn HAL_NVIC_GetPriority(
        IRQn: IRQn_Type::Type,
        PriorityGroup: u32,
        pPreemptPriority: *mut u32,
        pSubPriority: *mut u32,
    );
}
extern "C" {
    pub fn HAL_NVIC_GetPendingIRQ(IRQn: IRQn_Type::Type) -> u32;
}
extern "C" {
    pub fn HAL_NVIC_SetPendingIRQ(IRQn: IRQn_Type::Type);
}
extern "C" {
    pub fn HAL_NVIC_ClearPendingIRQ(IRQn: IRQn_Type::Type);
}
extern "C" {
    pub fn HAL_NVIC_GetActive(IRQn: IRQn_Type::Type) -> u32;
}
extern "C" {
    pub fn HAL_SYSTICK_CLKSourceConfig(CLKSource: u32);
}
extern "C" {
    pub fn HAL_SYSTICK_IRQHandler();
}
extern "C" {
    pub fn HAL_SYSTICK_Callback();
}
extern "C" {
    pub fn HAL_GetCurrentCPUID() -> u32;
}
extern "C" {
    pub fn HAL_CRCEx_Polynomial_Set(
        hcrc: *mut CRC_HandleTypeDef,
        Pol: u32,
        PolyLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_CRCEx_Input_Data_Reverse(
        hcrc: *mut CRC_HandleTypeDef,
        InputReverseMode: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_CRCEx_Output_Data_Reverse(
        hcrc: *mut CRC_HandleTypeDef,
        OutputReverseMode: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_CRC_Init(
        hcrc: *mut CRC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_CRC_DeInit(
        hcrc: *mut CRC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_CRC_MspInit(hcrc: *mut CRC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_CRC_MspDeInit(hcrc: *mut CRC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_CRC_Accumulate(
        hcrc: *mut CRC_HandleTypeDef,
        pBuffer: *mut u32,
        BufferLength: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_CRC_Calculate(
        hcrc: *mut CRC_HandleTypeDef,
        pBuffer: *mut u32,
        BufferLength: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_CRC_GetState(
        hcrc: *mut CRC_HandleTypeDef,
    ) -> HAL_CRC_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_TriangleWaveGenerate(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
        Amplitude: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_NoiseWaveGenerate(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
        Amplitude: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_DualStart(
        hdac: *mut DAC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_DualStop(
        hdac: *mut DAC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_DualStart_DMA(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
        pData: *mut u32,
        Length: u32,
        Alignment: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_DualStop_DMA(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_DualSetValue(
        hdac: *mut DAC_HandleTypeDef,
        Alignment: u32,
        Data1: u32,
        Data2: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_DualGetValue(hdac: *mut DAC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_DACEx_ConvCpltCallbackCh2(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DACEx_ConvHalfCpltCallbackCh2(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DACEx_ErrorCallbackCh2(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DACEx_DMAUnderrunCallbackCh2(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DACEx_SelfCalibrate(
        hdac: *mut DAC_HandleTypeDef,
        sConfig: *mut DAC_ChannelConfTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_SetUserTrimming(
        hdac: *mut DAC_HandleTypeDef,
        sConfig: *mut DAC_ChannelConfTypeDef,
        Channel: u32,
        NewTrimmingValue: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DACEx_GetTrimOffset(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_DAC_Init(
        hdac: *mut DAC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_DeInit(
        hdac: *mut DAC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_MspInit(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DAC_MspDeInit(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DAC_Start(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_Stop(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_Start_DMA(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
        pData: *mut u32,
        Length: u32,
        Alignment: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_Stop_DMA(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_IRQHandler(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DAC_SetValue(
        hdac: *mut DAC_HandleTypeDef,
        Channel: u32,
        Alignment: u32,
        Data: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_ConvCpltCallbackCh1(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DAC_ConvHalfCpltCallbackCh1(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DAC_ErrorCallbackCh1(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DAC_DMAUnderrunCallbackCh1(hdac: *mut DAC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DAC_GetValue(hdac: *mut DAC_HandleTypeDef, Channel: u32) -> u32;
}
extern "C" {
    pub fn HAL_DAC_ConfigChannel(
        hdac: *mut DAC_HandleTypeDef,
        sConfig: *mut DAC_ChannelConfTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_GetState(
        hdac: *mut DAC_HandleTypeDef,
    ) -> HAL_DAC_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_DAC_GetError(hdac: *mut DAC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_DCMI_Init(
        hdcmi: *mut DCMI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_DeInit(
        hdcmi: *mut DCMI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_MspInit(hdcmi: *mut DCMI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DCMI_MspDeInit(hdcmi: *mut DCMI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DCMI_Start_DMA(
        hdcmi: *mut DCMI_HandleTypeDef,
        DCMI_Mode: u32,
        pData: u32,
        Length: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_Stop(
        hdcmi: *mut DCMI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_Suspend(
        hdcmi: *mut DCMI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_Resume(
        hdcmi: *mut DCMI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_ErrorCallback(hdcmi: *mut DCMI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DCMI_LineEventCallback(hdcmi: *mut DCMI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DCMI_FrameEventCallback(hdcmi: *mut DCMI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DCMI_VsyncEventCallback(hdcmi: *mut DCMI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DCMI_IRQHandler(hdcmi: *mut DCMI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_DCMI_ConfigCrop(
        hdcmi: *mut DCMI_HandleTypeDef,
        X0: u32,
        Y0: u32,
        XSize: u32,
        YSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_EnableCrop(
        hdcmi: *mut DCMI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_DisableCrop(
        hdcmi: *mut DCMI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_ConfigSyncUnmask(
        hdcmi: *mut DCMI_HandleTypeDef,
        SyncUnmask: *mut DCMI_SyncUnmaskTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_GetState(
        hdcmi: *mut DCMI_HandleTypeDef,
    ) -> HAL_DCMI_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_DCMI_GetError(hdcmi: *mut DCMI_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_Init(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_DeInit(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_MspInit(hfdcan: *mut FDCAN_HandleTypeDef);
}
extern "C" {
    pub fn HAL_FDCAN_MspDeInit(hfdcan: *mut FDCAN_HandleTypeDef);
}
extern "C" {
    pub fn HAL_FDCAN_EnterPowerDownMode(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ExitPowerDownMode(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigClockCalibration(
        hfdcan: *mut FDCAN_HandleTypeDef,
        sCcuConfig: *mut FDCAN_ClkCalUnitTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetClockCalibrationState(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_ResetClockCalibrationState(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetClockCalibrationCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
        Counter: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigFilter(
        hfdcan: *mut FDCAN_HandleTypeDef,
        sFilterConfig: *mut FDCAN_FilterTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigGlobalFilter(
        hfdcan: *mut FDCAN_HandleTypeDef,
        NonMatchingStd: u32,
        NonMatchingExt: u32,
        RejectRemoteStd: u32,
        RejectRemoteExt: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigExtendedIdMask(
        hfdcan: *mut FDCAN_HandleTypeDef,
        Mask: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigRxFifoOverwrite(
        hfdcan: *mut FDCAN_HandleTypeDef,
        RxFifo: u32,
        OperationMode: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigFifoWatermark(
        hfdcan: *mut FDCAN_HandleTypeDef,
        FIFO: u32,
        Watermark: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigRamWatchdog(
        hfdcan: *mut FDCAN_HandleTypeDef,
        CounterStartValue: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigTimestampCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TimestampPrescaler: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_EnableTimestampCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TimestampOperation: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_DisableTimestampCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetTimestampCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> u16;
}
extern "C" {
    pub fn HAL_FDCAN_ResetTimestampCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigTimeoutCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TimeoutOperation: u32,
        TimeoutPeriod: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_EnableTimeoutCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_DisableTimeoutCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetTimeoutCounter(hfdcan: *mut FDCAN_HandleTypeDef)
        -> u16;
}
extern "C" {
    pub fn HAL_FDCAN_ResetTimeoutCounter(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigTxDelayCompensation(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TdcOffset: u32,
        TdcFilter: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_EnableTxDelayCompensation(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_DisableTxDelayCompensation(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_EnableISOMode(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_DisableISOMode(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_EnableEdgeFiltering(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_DisableEdgeFiltering(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_Start(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_Stop(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_AddMessageToTxFifoQ(
        hfdcan: *mut FDCAN_HandleTypeDef,
        pTxHeader: *mut FDCAN_TxHeaderTypeDef,
        pTxData: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_AddMessageToTxBuffer(
        hfdcan: *mut FDCAN_HandleTypeDef,
        pTxHeader: *mut FDCAN_TxHeaderTypeDef,
        pTxData: *mut u8,
        BufferIndex: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_EnableTxBufferRequest(
        hfdcan: *mut FDCAN_HandleTypeDef,
        BufferIndex: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetLatestTxFifoQRequestBuffer(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_AbortTxRequest(
        hfdcan: *mut FDCAN_HandleTypeDef,
        BufferIndex: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetRxMessage(
        hfdcan: *mut FDCAN_HandleTypeDef,
        RxLocation: u32,
        pRxHeader: *mut FDCAN_RxHeaderTypeDef,
        pRxData: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetTxEvent(
        hfdcan: *mut FDCAN_HandleTypeDef,
        pTxEvent: *mut FDCAN_TxEventFifoTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetHighPriorityMessageStatus(
        hfdcan: *mut FDCAN_HandleTypeDef,
        HpMsgStatus: *mut FDCAN_HpMsgStatusTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetProtocolStatus(
        hfdcan: *mut FDCAN_HandleTypeDef,
        ProtocolStatus: *mut FDCAN_ProtocolStatusTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_GetErrorCounters(
        hfdcan: *mut FDCAN_HandleTypeDef,
        ErrorCounters: *mut FDCAN_ErrorCountersTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_IsRxBufferMessageAvailable(
        hfdcan: *mut FDCAN_HandleTypeDef,
        RxBufferIndex: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_IsTxBufferMessagePending(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TxBufferIndex: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_GetRxFifoFillLevel(
        hfdcan: *mut FDCAN_HandleTypeDef,
        RxFifo: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_GetTxFifoFreeLevel(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_IsRestrictedOperationMode(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_ExitRestrictedOperationMode(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_ConfigOperation(
        hfdcan: *mut FDCAN_HandleTypeDef,
        pTTParams: *mut FDCAN_TT_ConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_ConfigReferenceMessage(
        hfdcan: *mut FDCAN_HandleTypeDef,
        IdType: u32,
        Identifier: u32,
        Payload: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_ConfigTrigger(
        hfdcan: *mut FDCAN_HandleTypeDef,
        sTriggerConfig: *mut FDCAN_TriggerTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_SetGlobalTime(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TimePreset: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_SetClockSynchronization(
        hfdcan: *mut FDCAN_HandleTypeDef,
        NewTURNumerator: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_ConfigStopWatch(
        hfdcan: *mut FDCAN_HandleTypeDef,
        Source: u32,
        Polarity: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_ConfigRegisterTimeMark(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TimeMarkSource: u32,
        TimeMarkValue: u32,
        RepeatFactor: u32,
        StartCycle: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_EnableRegisterTimeMarkPulse(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_DisableRegisterTimeMarkPulse(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_EnableTriggerTimeMarkPulse(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_DisableTriggerTimeMarkPulse(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_EnableHardwareGapControl(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_DisableHardwareGapControl(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_EnableTimeMarkGapControl(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_DisableTimeMarkGapControl(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_SetNextIsGap(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_SetEndOfGap(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_ConfigExternalSyncPhase(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TargetPhase: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_EnableExternalSynchronization(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_DisableExternalSynchronization(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_GetOperationStatus(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TTOpStatus: *mut FDCAN_TTOperationStatusTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ConfigInterruptLines(
        hfdcan: *mut FDCAN_HandleTypeDef,
        ITList: u32,
        InterruptLine: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_ConfigInterruptLines(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TTITList: u32,
        InterruptLine: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_ActivateNotification(
        hfdcan: *mut FDCAN_HandleTypeDef,
        ActiveITs: u32,
        BufferIndexes: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_DeactivateNotification(
        hfdcan: *mut FDCAN_HandleTypeDef,
        InactiveITs: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_ActivateNotification(
        hfdcan: *mut FDCAN_HandleTypeDef,
        ActiveTTITs: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_TT_DeactivateNotification(
        hfdcan: *mut FDCAN_HandleTypeDef,
        InactiveTTITs: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FDCAN_IRQHandler(hfdcan: *mut FDCAN_HandleTypeDef);
}
extern "C" {
    pub fn HAL_FDCAN_ClockCalibrationCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        ClkCalibrationITs: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TxEventFifoCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TxEventFifoITs: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_RxFifo0Callback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        RxFifo0ITs: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_RxFifo1Callback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        RxFifo1ITs: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TxFifoEmptyCallback(hfdcan: *mut FDCAN_HandleTypeDef);
}
extern "C" {
    pub fn HAL_FDCAN_TxBufferCompleteCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        BufferIndexes: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TxBufferAbortCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        BufferIndexes: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_RxBufferNewMessageCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
    );
}
extern "C" {
    pub fn HAL_FDCAN_HighPriorityMessageCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TimestampWraparoundCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TimeoutOccurredCallback(hfdcan: *mut FDCAN_HandleTypeDef);
}
extern "C" {
    pub fn HAL_FDCAN_ErrorCallback(hfdcan: *mut FDCAN_HandleTypeDef);
}
extern "C" {
    pub fn HAL_FDCAN_ErrorStatusCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        ErrorStatusITs: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TT_ScheduleSyncCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TTSchedSyncITs: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TT_TimeMarkCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TTTimeMarkITs: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TT_StopWatchCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        SWTime: u32,
        SWCycleCount: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_TT_GlobalTimeCallback(
        hfdcan: *mut FDCAN_HandleTypeDef,
        TTGlobTimeITs: u32,
    );
}
extern "C" {
    pub fn HAL_FDCAN_GetError(hfdcan: *mut FDCAN_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_FDCAN_GetState(
        hfdcan: *mut FDCAN_HandleTypeDef,
    ) -> HAL_FDCAN_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASHEx_Erase(
        pEraseInit: *mut FLASH_EraseInitTypeDef,
        SectorError: *mut u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASHEx_Erase_IT(
        pEraseInit: *mut FLASH_EraseInitTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASHEx_OBProgram(
        pOBInit: *mut FLASH_OBProgramInitTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASHEx_OBGetConfig(pOBInit: *mut FLASH_OBProgramInitTypeDef);
}
extern "C" {
    pub fn HAL_FLASHEx_Unlock_Bank1() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASHEx_Lock_Bank1() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASHEx_Unlock_Bank2() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASHEx_Lock_Bank2() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASHEx_ComputeCRC(
        pCRCInit: *mut FLASH_CRCInitTypeDef,
        CRC_Result: *mut u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASH_Program(
        TypeProgram: u32,
        FlashAddress: u32,
        DataAddress: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASH_Program_IT(
        TypeProgram: u32,
        FlashAddress: u32,
        DataAddress: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASH_IRQHandler();
}
extern "C" {
    pub fn HAL_FLASH_EndOfOperationCallback(ReturnValue: u32);
}
extern "C" {
    pub fn HAL_FLASH_OperationErrorCallback(ReturnValue: u32);
}
extern "C" {
    pub fn HAL_FLASH_Unlock() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASH_Lock() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASH_OB_Unlock() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASH_OB_Lock() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASH_OB_Launch() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_FLASH_GetError() -> u32;
}
extern "C" {
    pub fn HAL_GPIO_Init(
        GPIOx: *mut GPIO_TypeDef,
        GPIO_Init: *mut GPIO_InitTypeDef,
    );
}
extern "C" {
    pub fn HAL_GPIO_DeInit(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u32);
}
extern "C" {
    pub fn HAL_GPIO_ReadPin(
        GPIOx: *mut GPIO_TypeDef,
        GPIO_Pin: u16,
    ) -> GPIO_PinState::Type;
}
extern "C" {
    pub fn HAL_GPIO_WritePin(
        GPIOx: *mut GPIO_TypeDef,
        GPIO_Pin: u16,
        PinState: GPIO_PinState::Type,
    );
}
extern "C" {
    pub fn HAL_GPIO_TogglePin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16);
}
extern "C" {
    pub fn HAL_GPIO_LockPin(
        GPIOx: *mut GPIO_TypeDef,
        GPIO_Pin: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_GPIO_EXTI_IRQHandler(GPIO_Pin: u16);
}
extern "C" {
    pub fn HAL_GPIO_EXTI_Callback(GPIO_Pin: u16);
}
extern "C" {
    pub fn HAL_HASHEx_SHA224_Start(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA224_Accmlt(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA224_Accmlt_End(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA256_Start(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA256_Accmlt(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA256_Accmlt_End(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA224_Start_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA224_Accmlt_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA224_Accmlt_End_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA256_Start_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA256_Accmlt_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA256_Accmlt_End_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA224_Start_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA224_Finish(
        hhash: *mut HASH_HandleTypeDef,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA256_Start_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASHEx_SHA256_Finish(
        hhash: *mut HASH_HandleTypeDef,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA224_Start(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA256_Start(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA224_Start_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA256_Start_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA224_Start_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA256_Start_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_MD5_Step1_2_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_MD5_Step2_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_MD5_Step2_3_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA1_Step1_2_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA1_Step2_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA1_Step2_3_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA224_Step1_2_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA224_Step2_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA224_Step2_3_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA256_Step1_2_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA256_Step2_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMACEx_SHA256_Step2_3_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_Init(
        hhash: *mut HASH_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_DeInit(
        hhash: *mut HASH_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MspInit(hhash: *mut HASH_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HASH_MspDeInit(hhash: *mut HASH_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HASH_InCpltCallback(hhash: *mut HASH_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HASH_DgstCpltCallback(hhash: *mut HASH_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HASH_ErrorCallback(hhash: *mut HASH_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HASH_SHA1_Start(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MD5_Start(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MD5_Accmlt(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_SHA1_Accmlt(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MD5_Accmlt_End(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_SHA1_Accmlt_End(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_SHA1_Start_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_SHA1_Accmlt_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_SHA1_Accmlt_End_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MD5_Start_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MD5_Accmlt_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MD5_Accmlt_End_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_IRQHandler(hhash: *mut HASH_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HASH_SHA1_Start_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_SHA1_Finish(
        hhash: *mut HASH_HandleTypeDef,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MD5_Start_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_MD5_Finish(
        hhash: *mut HASH_HandleTypeDef,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMAC_SHA1_Start(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMAC_MD5_Start(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMAC_MD5_Start_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMAC_SHA1_Start_IT(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
        pOutBuffer: *mut u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMAC_SHA1_Start_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HMAC_MD5_Start_DMA(
        hhash: *mut HASH_HandleTypeDef,
        pInBuffer: *mut u8,
        Size: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_GetState(
        hhash: *mut HASH_HandleTypeDef,
    ) -> HAL_HASH_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_GetStatus(
        hhash: *mut HASH_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_ContextSaving(
        hhash: *mut HASH_HandleTypeDef,
        pMemBuffer: *mut u8,
    );
}
extern "C" {
    pub fn HAL_HASH_ContextRestoring(
        hhash: *mut HASH_HandleTypeDef,
        pMemBuffer: *mut u8,
    );
}
extern "C" {
    pub fn HAL_HASH_SwFeed_ProcessSuspend(hhash: *mut HASH_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HASH_DMAFeed_ProcessSuspend(
        hhash: *mut HASH_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HASH_GetError(hhash: *mut HASH_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_HCD_Init(
        hhcd: *mut HCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_DeInit(
        hhcd: *mut HCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_HC_Init(
        hhcd: *mut HCD_HandleTypeDef,
        ch_num: u8,
        epnum: u8,
        dev_address: u8,
        speed: u8,
        ep_type: u8,
        mps: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_HC_Halt(
        hhcd: *mut HCD_HandleTypeDef,
        ch_num: u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_MspInit(hhcd: *mut HCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HCD_MspDeInit(hhcd: *mut HCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HCD_HC_SubmitRequest(
        hhcd: *mut HCD_HandleTypeDef,
        ch_num: u8,
        direction: u8,
        ep_type: u8,
        token: u8,
        pbuff: *mut u8,
        length: u16,
        do_ping: u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_IRQHandler(hhcd: *mut HCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HCD_SOF_Callback(hhcd: *mut HCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HCD_Connect_Callback(hhcd: *mut HCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HCD_Disconnect_Callback(hhcd: *mut HCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HCD_PortEnabled_Callback(hhcd: *mut HCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HCD_PortDisabled_Callback(hhcd: *mut HCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HCD_HC_NotifyURBChange_Callback(
        hhcd: *mut HCD_HandleTypeDef,
        chnum: u8,
        urb_state: HCD_URBStateTypeDef,
    );
}
extern "C" {
    pub fn HAL_HCD_ResetPort(
        hhcd: *mut HCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_Start(
        hhcd: *mut HCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_Stop(
        hhcd: *mut HCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_GetState(
        hhcd: *mut HCD_HandleTypeDef,
    ) -> HCD_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_HCD_HC_GetURBState(
        hhcd: *mut HCD_HandleTypeDef,
        chnum: u8,
    ) -> HCD_URBStateTypeDef;
}
extern "C" {
    pub fn HAL_HCD_HC_GetXferCount(
        hhcd: *mut HCD_HandleTypeDef,
        chnum: u8,
    ) -> u32;
}
extern "C" {
    pub fn HAL_HCD_HC_GetState(
        hhcd: *mut HCD_HandleTypeDef,
        chnum: u8,
    ) -> HCD_HCStateTypeDef;
}
extern "C" {
    pub fn HAL_HCD_GetCurrentFrame(hhcd: *mut HCD_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_HCD_GetCurrentSpeed(hhcd: *mut HCD_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_I2CEx_ConfigAnalogFilter(
        hi2c: *mut I2C_HandleTypeDef,
        AnalogFilter: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2CEx_ConfigDigitalFilter(
        hi2c: *mut I2C_HandleTypeDef,
        DigitalFilter: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2CEx_EnableWakeUp(
        hi2c: *mut I2C_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2CEx_DisableWakeUp(
        hi2c: *mut I2C_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2CEx_EnableFastModePlus(ConfigFastModePlus: u32);
}
extern "C" {
    pub fn HAL_I2CEx_DisableFastModePlus(ConfigFastModePlus: u32);
}
extern "C" {
    pub fn HAL_I2C_Init(
        hi2c: *mut I2C_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_DeInit(
        hi2c: *mut I2C_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_MspInit(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_MspDeInit(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_Master_Transmit(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Receive(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Transmit(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Receive(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Mem_Write(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        MemAddress: u16,
        MemAddSize: u16,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Mem_Read(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        MemAddress: u16,
        MemAddSize: u16,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_IsDeviceReady(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        Trials: u32,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Transmit_IT(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Receive_IT(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Transmit_IT(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Receive_IT(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Mem_Write_IT(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        MemAddress: u16,
        MemAddSize: u16,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Mem_Read_IT(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        MemAddress: u16,
        MemAddSize: u16,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Seq_Transmit_IT(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
        XferOptions: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Seq_Receive_IT(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
        XferOptions: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Seq_Transmit_IT(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        XferOptions: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Seq_Receive_IT(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        XferOptions: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_EnableListen_IT(
        hi2c: *mut I2C_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_DisableListen_IT(
        hi2c: *mut I2C_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Abort_IT(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Transmit_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Receive_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Transmit_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Receive_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Mem_Write_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        MemAddress: u16,
        MemAddSize: u16,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Mem_Read_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        MemAddress: u16,
        MemAddSize: u16,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Seq_Transmit_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
        XferOptions: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Master_Seq_Receive_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        DevAddress: u16,
        pData: *mut u8,
        Size: u16,
        XferOptions: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Seq_Transmit_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        XferOptions: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_Slave_Seq_Receive_DMA(
        hi2c: *mut I2C_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        XferOptions: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_EV_IRQHandler(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_ER_IRQHandler(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_MasterTxCpltCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_MasterRxCpltCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_SlaveTxCpltCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_SlaveRxCpltCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_AddrCallback(
        hi2c: *mut I2C_HandleTypeDef,
        TransferDirection: u8,
        AddrMatchCode: u16,
    );
}
extern "C" {
    pub fn HAL_I2C_ListenCpltCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_MemTxCpltCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_MemRxCpltCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_ErrorCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_AbortCpltCallback(hi2c: *mut I2C_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2C_GetState(
        hi2c: *mut I2C_HandleTypeDef,
    ) -> HAL_I2C_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_GetMode(
        hi2c: *mut I2C_HandleTypeDef,
    ) -> HAL_I2C_ModeTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2C_GetError(hi2c: *mut I2C_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_I2S_Init(
        hi2s: *mut I2S_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_DeInit(
        hi2s: *mut I2S_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_MspInit(hi2s: *mut I2S_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2S_MspDeInit(hi2s: *mut I2S_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2S_Transmit(
        hi2s: *mut I2S_HandleTypeDef,
        pData: *mut u16,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_Receive(
        hi2s: *mut I2S_HandleTypeDef,
        pData: *mut u16,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_Transmit_IT(
        hi2s: *mut I2S_HandleTypeDef,
        pData: *mut u16,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_Receive_IT(
        hi2s: *mut I2S_HandleTypeDef,
        pData: *mut u16,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_IRQHandler(hi2s: *mut I2S_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2S_Transmit_DMA(
        hi2s: *mut I2S_HandleTypeDef,
        pData: *mut u16,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_Receive_DMA(
        hi2s: *mut I2S_HandleTypeDef,
        pData: *mut u16,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_DMAPause(
        hi2s: *mut I2S_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_DMAResume(
        hi2s: *mut I2S_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_DMAStop(
        hi2s: *mut I2S_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_TxHalfCpltCallback(hi2s: *mut I2S_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2S_TxCpltCallback(hi2s: *mut I2S_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2S_RxHalfCpltCallback(hi2s: *mut I2S_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2S_RxCpltCallback(hi2s: *mut I2S_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2S_ErrorCallback(hi2s: *mut I2S_HandleTypeDef);
}
extern "C" {
    pub fn HAL_I2S_GetState(
        hi2s: *mut I2S_HandleTypeDef,
    ) -> HAL_I2S_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_I2S_GetError(hi2s: *mut I2S_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_IWDG_Init(
        hiwdg: *mut IWDG_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_IWDG_Refresh(
        hiwdg: *mut IWDG_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCDEx_SetTxFiFo(
        hpcd: *mut PCD_HandleTypeDef,
        fifo: u8,
        size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCDEx_SetRxFiFo(
        hpcd: *mut PCD_HandleTypeDef,
        size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCDEx_ActivateLPM(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCDEx_DeActivateLPM(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCDEx_ActivateBCD(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCDEx_DeActivateBCD(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCDEx_BCD_VBUSDetect(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCDEx_LPM_Callback(
        hpcd: *mut PCD_HandleTypeDef,
        msg: PCD_LPM_MsgTypeDef::Type,
    );
}
extern "C" {
    pub fn HAL_PCDEx_BCD_Callback(
        hpcd: *mut PCD_HandleTypeDef,
        msg: PCD_BCD_MsgTypeDef::Type,
    );
}
extern "C" {
    pub fn HAL_PCD_Init(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_DeInit(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_MspInit(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_MspDeInit(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_Start(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_Stop(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_IRQHandler(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_SOFCallback(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_SetupStageCallback(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_ResetCallback(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_SuspendCallback(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_ResumeCallback(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_ConnectCallback(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_DisconnectCallback(hpcd: *mut PCD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_PCD_DataOutStageCallback(
        hpcd: *mut PCD_HandleTypeDef,
        epnum: u8,
    );
}
extern "C" {
    pub fn HAL_PCD_DataInStageCallback(hpcd: *mut PCD_HandleTypeDef, epnum: u8);
}
extern "C" {
    pub fn HAL_PCD_ISOOUTIncompleteCallback(
        hpcd: *mut PCD_HandleTypeDef,
        epnum: u8,
    );
}
extern "C" {
    pub fn HAL_PCD_ISOINIncompleteCallback(
        hpcd: *mut PCD_HandleTypeDef,
        epnum: u8,
    );
}
extern "C" {
    pub fn HAL_PCD_DevConnect(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_DevDisconnect(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_SetAddress(
        hpcd: *mut PCD_HandleTypeDef,
        address: u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_EP_Open(
        hpcd: *mut PCD_HandleTypeDef,
        ep_addr: u8,
        ep_mps: u16,
        ep_type: u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_EP_Close(
        hpcd: *mut PCD_HandleTypeDef,
        ep_addr: u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_EP_Receive(
        hpcd: *mut PCD_HandleTypeDef,
        ep_addr: u8,
        pBuf: *mut u8,
        len: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_EP_Transmit(
        hpcd: *mut PCD_HandleTypeDef,
        ep_addr: u8,
        pBuf: *mut u8,
        len: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_EP_GetRxCount(
        hpcd: *mut PCD_HandleTypeDef,
        ep_addr: u8,
    ) -> u32;
}
extern "C" {
    pub fn HAL_PCD_EP_SetStall(
        hpcd: *mut PCD_HandleTypeDef,
        ep_addr: u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_EP_ClrStall(
        hpcd: *mut PCD_HandleTypeDef,
        ep_addr: u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_EP_Flush(
        hpcd: *mut PCD_HandleTypeDef,
        ep_addr: u8,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_ActivateRemoteWakeup(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_DeActivateRemoteWakeup(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PCD_GetState(
        hpcd: *mut PCD_HandleTypeDef,
    ) -> PCD_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_ConfigSupply(SupplySource: u32)
        -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_GetSupplyConfig() -> u32;
}
extern "C" {
    pub fn HAL_PWREx_ControlVoltageScaling(
        VoltageScaling: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_GetVoltageRange() -> u32;
}
extern "C" {
    pub fn HAL_PWREx_ControlStopModeVoltageScaling(
        VoltageScaling: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_GetStopModeVoltageRange() -> u32;
}
extern "C" {
    pub fn HAL_PWREx_EnterSTOPMode(Regulator: u32, STOPEntry: u8, Domain: u32);
}
extern "C" {
    pub fn HAL_PWREx_EnterSTANDBYMode(Domain: u32);
}
extern "C" {
    pub fn HAL_PWREx_ConfigD3Domain(D3State: u32);
}
extern "C" {
    pub fn HAL_PWREx_ClearPendingEvent();
}
extern "C" {
    pub fn HAL_PWREx_EnableFlashPowerDown();
}
extern "C" {
    pub fn HAL_PWREx_DisableFlashPowerDown();
}
extern "C" {
    pub fn HAL_PWREx_EnableWakeUpPin(sPinParams: *mut PWREx_WakeupPinTypeDef);
}
extern "C" {
    pub fn HAL_PWREx_DisableWakeUpPin(WakeUpPin: u32);
}
extern "C" {
    pub fn HAL_PWREx_GetWakeupFlag(WakeUpFlag: u32) -> u32;
}
extern "C" {
    pub fn HAL_PWREx_ClearWakeupFlag(
        WakeUpFlag: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_WAKEUP_PIN_IRQHandler();
}
extern "C" {
    pub fn HAL_PWREx_WKUP1_Callback();
}
extern "C" {
    pub fn HAL_PWREx_WKUP2_Callback();
}
extern "C" {
    pub fn HAL_PWREx_WKUP3_Callback();
}
extern "C" {
    pub fn HAL_PWREx_WKUP4_Callback();
}
extern "C" {
    pub fn HAL_PWREx_WKUP5_Callback();
}
extern "C" {
    pub fn HAL_PWREx_WKUP6_Callback();
}
extern "C" {
    pub fn HAL_PWREx_EnableBkUpReg() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_DisableBkUpReg() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_EnableUSBReg() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_DisableUSBReg() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_PWREx_EnableUSBVoltageDetector();
}
extern "C" {
    pub fn HAL_PWREx_DisableUSBVoltageDetector();
}
extern "C" {
    pub fn HAL_PWREx_EnableBatteryCharging(ResistorValue: u32);
}
extern "C" {
    pub fn HAL_PWREx_DisableBatteryCharging();
}
extern "C" {
    pub fn HAL_PWREx_EnableMonitoring();
}
extern "C" {
    pub fn HAL_PWREx_DisableMonitoring();
}
extern "C" {
    pub fn HAL_PWREx_GetTemperatureLevel() -> u32;
}
extern "C" {
    pub fn HAL_PWREx_GetVBATLevel() -> u32;
}
extern "C" {
    pub fn HAL_PWREx_ConfigAVD(sConfigAVD: *mut PWREx_AVDTypeDef);
}
extern "C" {
    pub fn HAL_PWREx_EnableAVD();
}
extern "C" {
    pub fn HAL_PWREx_DisableAVD();
}
extern "C" {
    pub fn HAL_PWREx_PVD_AVD_IRQHandler();
}
extern "C" {
    pub fn HAL_PWREx_AVDCallback();
}
extern "C" {
    pub fn HAL_PWR_DeInit();
}
extern "C" {
    pub fn HAL_PWR_EnableBkUpAccess();
}
extern "C" {
    pub fn HAL_PWR_DisableBkUpAccess();
}
extern "C" {
    pub fn HAL_PWR_ConfigPVD(sConfigPVD: *mut PWR_PVDTypeDef);
}
extern "C" {
    pub fn HAL_PWR_EnablePVD();
}
extern "C" {
    pub fn HAL_PWR_DisablePVD();
}
extern "C" {
    pub fn HAL_PWR_EnableWakeUpPin(WakeUpPinPolarity: u32);
}
extern "C" {
    pub fn HAL_PWR_DisableWakeUpPin(WakeUpPinx: u32);
}
extern "C" {
    pub fn HAL_PWR_EnterSTOPMode(Regulator: u32, STOPEntry: u8);
}
extern "C" {
    pub fn HAL_PWR_EnterSLEEPMode(Regulator: u32, SLEEPEntry: u8);
}
extern "C" {
    pub fn HAL_PWR_EnterSTANDBYMode();
}
extern "C" {
    pub fn HAL_PWR_PVD_IRQHandler();
}
extern "C" {
    pub fn HAL_PWR_PVDCallback();
}
extern "C" {
    pub fn HAL_PWR_EnableSleepOnExit();
}
extern "C" {
    pub fn HAL_PWR_DisableSleepOnExit();
}
extern "C" {
    pub fn HAL_PWR_EnableSEVOnPend();
}
extern "C" {
    pub fn HAL_PWR_DisableSEVOnPend();
}
extern "C" {
    pub fn HAL_RCCEx_PeriphCLKConfig(
        PeriphClkInit: *mut RCC_PeriphCLKInitTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RCCEx_GetPeriphCLKConfig(
        PeriphClkInit: *mut RCC_PeriphCLKInitTypeDef,
    );
}
extern "C" {
    pub fn HAL_RCCEx_GetPeriphCLKFreq(PeriphClk: u32) -> u32;
}
extern "C" {
    pub fn HAL_RCCEx_GetD1PCLK1Freq() -> u32;
}
extern "C" {
    pub fn HAL_RCCEx_GetD3PCLK1Freq() -> u32;
}
extern "C" {
    pub fn HAL_RCCEx_GetD1SysClockFreq() -> u32;
}
extern "C" {
    pub fn HAL_RCCEx_GetPLL1ClockFreq(PLL1_Clocks: *mut PLL1_ClocksTypeDef);
}
extern "C" {
    pub fn HAL_RCCEx_GetPLL2ClockFreq(PLL2_Clocks: *mut PLL2_ClocksTypeDef);
}
extern "C" {
    pub fn HAL_RCCEx_GetPLL3ClockFreq(PLL3_Clocks: *mut PLL3_ClocksTypeDef);
}
extern "C" {
    pub fn HAL_RCCEx_WakeUpStopCLKConfig(WakeUpClk: u32);
}
extern "C" {
    pub fn HAL_RCCEx_KerWakeUpStopCLKConfig(WakeUpClk: u32);
}
extern "C" {
    pub fn HAL_RCCEx_EnableLSECSS();
}
extern "C" {
    pub fn HAL_RCCEx_DisableLSECSS();
}
extern "C" {
    pub fn HAL_RCCEx_WWDGxSysResetConfig(RCC_WWDGx: u32);
}
extern "C" {
    pub fn HAL_RCCEx_CRSConfig(pInit: *mut RCC_CRSInitTypeDef);
}
extern "C" {
    pub fn HAL_RCCEx_CRSSoftwareSynchronizationGenerate();
}
extern "C" {
    pub fn HAL_RCCEx_CRSGetSynchronizationInfo(
        pSynchroInfo: *mut RCC_CRSSynchroInfoTypeDef,
    );
}
extern "C" {
    pub fn HAL_RCCEx_CRSWaitSynchronization(Timeout: u32) -> u32;
}
extern "C" {
    pub fn HAL_RCCEx_CRS_IRQHandler();
}
extern "C" {
    pub fn HAL_RCCEx_CRS_SyncOkCallback();
}
extern "C" {
    pub fn HAL_RCCEx_CRS_SyncWarnCallback();
}
extern "C" {
    pub fn HAL_RCCEx_CRS_ExpectedSyncCallback();
}
extern "C" {
    pub fn HAL_RCCEx_CRS_ErrorCallback(Error: u32);
}
extern "C" {
    pub fn HAL_RCC_DeInit() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RCC_OscConfig(
        RCC_OscInitStruct: *mut RCC_OscInitTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RCC_ClockConfig(
        RCC_ClkInitStruct: *mut RCC_ClkInitTypeDef,
        FLatency: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RCC_MCOConfig(
        RCC_MCOx: u32,
        RCC_MCOSource: u32,
        RCC_MCODiv: u32,
    );
}
extern "C" {
    pub fn HAL_RCC_EnableCSS();
}
extern "C" {
    pub fn HAL_RCC_DisableCSS();
}
extern "C" {
    pub fn HAL_RCC_GetSysClockFreq() -> u32;
}
extern "C" {
    pub fn HAL_RCC_GetHCLKFreq() -> u32;
}
extern "C" {
    pub fn HAL_RCC_GetPCLK1Freq() -> u32;
}
extern "C" {
    pub fn HAL_RCC_GetPCLK2Freq() -> u32;
}
extern "C" {
    pub fn HAL_RCC_GetOscConfig(RCC_OscInitStruct: *mut RCC_OscInitTypeDef);
}
extern "C" {
    pub fn HAL_RCC_GetClockConfig(
        RCC_ClkInitStruct: *mut RCC_ClkInitTypeDef,
        pFLatency: *mut u32,
    );
}
extern "C" {
    pub fn HAL_RCC_NMI_IRQHandler();
}
extern "C" {
    pub fn HAL_RCC_CSSCallback();
}
extern "C" {
    pub fn HAL_RTCEx_SetTimeStamp(
        hrtc: *mut RTC_HandleTypeDef,
        TimeStampEdge: u32,
        RTC_TimeStampPin: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_SetTimeStamp_IT(
        hrtc: *mut RTC_HandleTypeDef,
        TimeStampEdge: u32,
        RTC_TimeStampPin: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_DeactivateTimeStamp(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_SetInternalTimeStamp(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_DeactivateInternalTimeStamp(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_GetTimeStamp(
        hrtc: *mut RTC_HandleTypeDef,
        sTimeStamp: *mut RTC_TimeTypeDef,
        sTimeStampDate: *mut RTC_DateTypeDef,
        Format: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_TamperTimeStampIRQHandler(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_TimeStampEventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_PollForTimeStampEvent(
        hrtc: *mut RTC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_SetTamper(
        hrtc: *mut RTC_HandleTypeDef,
        sTamper: *mut RTC_TamperTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_SetTamper_IT(
        hrtc: *mut RTC_HandleTypeDef,
        sTamper: *mut RTC_TamperTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_DeactivateTamper(
        hrtc: *mut RTC_HandleTypeDef,
        Tamper: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_PollForTamper1Event(
        hrtc: *mut RTC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_PollForTamper2Event(
        hrtc: *mut RTC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_PollForTamper3Event(
        hrtc: *mut RTC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_Tamper1EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_Tamper2EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_Tamper3EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_InternalTamper1EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_InternalTamper2EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_InternalTamper3EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_InternalTamper4EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_InternalTamper5EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_InternalTamper6EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_InternalTamper8EventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_SetWakeUpTimer(
        hrtc: *mut RTC_HandleTypeDef,
        WakeUpCounter: u32,
        WakeUpClock: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_SetWakeUpTimer_IT(
        hrtc: *mut RTC_HandleTypeDef,
        WakeUpCounter: u32,
        WakeUpClock: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_DeactivateWakeUpTimer(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_GetWakeUpTimer(hrtc: *mut RTC_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_RTCEx_WakeUpTimerIRQHandler(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_WakeUpTimerEventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_PollForWakeUpTimerEvent(
        hrtc: *mut RTC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_BKUPWrite(
        hrtc: *mut RTC_HandleTypeDef,
        BackupRegister: u32,
        Data: u32,
    );
}
extern "C" {
    pub fn HAL_RTCEx_BKUPRead(
        hrtc: *mut RTC_HandleTypeDef,
        BackupRegister: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_RTCEx_SetSmoothCalib(
        hrtc: *mut RTC_HandleTypeDef,
        SmoothCalibPeriod: u32,
        SmoothCalibPlusPulses: u32,
        SmoothCalibMinusPulsesValue: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_SetSynchroShift(
        hrtc: *mut RTC_HandleTypeDef,
        ShiftAdd1S: u32,
        ShiftSubFS: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_SetCalibrationOutPut(
        hrtc: *mut RTC_HandleTypeDef,
        CalibOutput: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_DeactivateCalibrationOutPut(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_SetRefClock(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_DeactivateRefClock(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_EnableBypassShadow(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_DisableBypassShadow(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTCEx_AlarmBEventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTCEx_PollForAlarmBEvent(
        hrtc: *mut RTC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_Init(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_DeInit(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_MspInit(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTC_MspDeInit(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTC_SetTime(
        hrtc: *mut RTC_HandleTypeDef,
        sTime: *mut RTC_TimeTypeDef,
        Format: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_GetTime(
        hrtc: *mut RTC_HandleTypeDef,
        sTime: *mut RTC_TimeTypeDef,
        Format: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_SetDate(
        hrtc: *mut RTC_HandleTypeDef,
        sDate: *mut RTC_DateTypeDef,
        Format: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_GetDate(
        hrtc: *mut RTC_HandleTypeDef,
        sDate: *mut RTC_DateTypeDef,
        Format: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_SetAlarm(
        hrtc: *mut RTC_HandleTypeDef,
        sAlarm: *mut RTC_AlarmTypeDef,
        Format: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_SetAlarm_IT(
        hrtc: *mut RTC_HandleTypeDef,
        sAlarm: *mut RTC_AlarmTypeDef,
        Format: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_DeactivateAlarm(
        hrtc: *mut RTC_HandleTypeDef,
        Alarm: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_GetAlarm(
        hrtc: *mut RTC_HandleTypeDef,
        sAlarm: *mut RTC_AlarmTypeDef,
        Alarm: u32,
        Format: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_AlarmIRQHandler(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTC_AlarmAEventCallback(hrtc: *mut RTC_HandleTypeDef);
}
extern "C" {
    pub fn HAL_RTC_PollForAlarmAEvent(
        hrtc: *mut RTC_HandleTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_WaitForSynchro(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_RTC_GetState(
        hrtc: *mut RTC_HandleTypeDef,
    ) -> HAL_RTCStateTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDEx_ConfigDMAMultiBuffer(
        hsd: *mut SD_HandleTypeDef,
        pDataBuffer0: *mut u32,
        pDataBuffer1: *mut u32,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDEx_ReadBlocksDMAMultiBuffer(
        hsd: *mut SD_HandleTypeDef,
        BlockAdd: u32,
        NumberOfBlocks: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDEx_WriteBlocksDMAMultiBuffer(
        hsd: *mut SD_HandleTypeDef,
        BlockAdd: u32,
        NumberOfBlocks: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDEx_ChangeDMABuffer(
        hsd: *mut SD_HandleTypeDef,
        Buffer: HAL_SDEx_DMABuffer_MemoryTypeDef::Type,
        pDataBuffer: *mut u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SD_Init(hsd: *mut SD_HandleTypeDef) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_InitCard(
        hsd: *mut SD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_DeInit(hsd: *mut SD_HandleTypeDef)
        -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_MspInit(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SD_MspDeInit(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SD_ReadBlocks(
        hsd: *mut SD_HandleTypeDef,
        pData: *mut u8,
        BlockAdd: u32,
        NumberOfBlocks: u32,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_WriteBlocks(
        hsd: *mut SD_HandleTypeDef,
        pData: *mut u8,
        BlockAdd: u32,
        NumberOfBlocks: u32,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_Erase(
        hsd: *mut SD_HandleTypeDef,
        BlockStartAdd: u32,
        BlockEndAdd: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_ReadBlocks_IT(
        hsd: *mut SD_HandleTypeDef,
        pData: *mut u8,
        BlockAdd: u32,
        NumberOfBlocks: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_WriteBlocks_IT(
        hsd: *mut SD_HandleTypeDef,
        pData: *mut u8,
        BlockAdd: u32,
        NumberOfBlocks: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_ReadBlocks_DMA(
        hsd: *mut SD_HandleTypeDef,
        pData: *mut u8,
        BlockAdd: u32,
        NumberOfBlocks: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_WriteBlocks_DMA(
        hsd: *mut SD_HandleTypeDef,
        pData: *mut u8,
        BlockAdd: u32,
        NumberOfBlocks: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_IRQHandler(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SD_TxCpltCallback(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SD_RxCpltCallback(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SD_ErrorCallback(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SD_AbortCallback(hsd: *mut SD_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SD_ConfigWideBusOperation(
        hsd: *mut SD_HandleTypeDef,
        WideMode: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_ConfigSpeedBusOperation(
        hsd: *mut SD_HandleTypeDef,
        SpeedMode: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_GetCardState(
        hsd: *mut SD_HandleTypeDef,
    ) -> HAL_SD_CardStateTypeDef;
}
extern "C" {
    pub fn HAL_SD_GetCardCID(
        hsd: *mut SD_HandleTypeDef,
        pCID: *mut HAL_SD_CardCIDTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_GetCardCSD(
        hsd: *mut SD_HandleTypeDef,
        pCSD: *mut HAL_SD_CardCSDTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_GetCardStatus(
        hsd: *mut SD_HandleTypeDef,
        pStatus: *mut HAL_SD_CardStatusTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_GetCardInfo(
        hsd: *mut SD_HandleTypeDef,
        pCardInfo: *mut HAL_SD_CardInfoTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_GetState(
        hsd: *mut SD_HandleTypeDef,
    ) -> HAL_SD_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_GetError(hsd: *mut SD_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_SD_Abort(hsd: *mut SD_HandleTypeDef) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SD_Abort_IT(
        hsd: *mut SD_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_Init(
        hsdram: *mut SDRAM_HandleTypeDef,
        Timing: *mut FMC_SDRAM_TimingTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_DeInit(
        hsdram: *mut SDRAM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_MspInit(hsdram: *mut SDRAM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDRAM_MspDeInit(hsdram: *mut SDRAM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDRAM_IRQHandler(hsdram: *mut SDRAM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDRAM_RefreshErrorCallback(hsdram: *mut SDRAM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDRAM_DMA_XferCpltCallback(hmdma: *mut MDMA_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDRAM_DMA_XferErrorCallback(hmdma: *mut MDMA_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SDRAM_Read_8b(
        hsdram: *mut SDRAM_HandleTypeDef,
        pAddress: *mut u32,
        pDstBuffer: *mut u8,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_Write_8b(
        hsdram: *mut SDRAM_HandleTypeDef,
        pAddress: *mut u32,
        pSrcBuffer: *mut u8,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_Read_16b(
        hsdram: *mut SDRAM_HandleTypeDef,
        pAddress: *mut u32,
        pDstBuffer: *mut u16,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_Write_16b(
        hsdram: *mut SDRAM_HandleTypeDef,
        pAddress: *mut u32,
        pSrcBuffer: *mut u16,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_Read_32b(
        hsdram: *mut SDRAM_HandleTypeDef,
        pAddress: *mut u32,
        pDstBuffer: *mut u32,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_Write_32b(
        hsdram: *mut SDRAM_HandleTypeDef,
        pAddress: *mut u32,
        pSrcBuffer: *mut u32,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_Read_DMA(
        hsdram: *mut SDRAM_HandleTypeDef,
        pAddress: *mut u32,
        pDstBuffer: *mut u32,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_Write_DMA(
        hsdram: *mut SDRAM_HandleTypeDef,
        pAddress: *mut u32,
        pSrcBuffer: *mut u32,
        BufferSize: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_WriteProtection_Enable(
        hsdram: *mut SDRAM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_WriteProtection_Disable(
        hsdram: *mut SDRAM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_SendCommand(
        hsdram: *mut SDRAM_HandleTypeDef,
        Command: *mut FMC_SDRAM_CommandTypeDef,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_ProgramRefreshRate(
        hsdram: *mut SDRAM_HandleTypeDef,
        RefreshRate: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_SetAutoRefreshNumber(
        hsdram: *mut SDRAM_HandleTypeDef,
        AutoRefreshNumber: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SDRAM_GetModeStatus(hsdram: *mut SDRAM_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_SDRAM_GetState(
        hsdram: *mut SDRAM_HandleTypeDef,
    ) -> HAL_SDRAM_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPIEx_FlushRxFifo(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPIEx_EnableLockConfiguration(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPIEx_ConfigureUnderrun(
        hspi: *mut SPI_HandleTypeDef,
        UnderrunDetection: u32,
        UnderrunBehaviour: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_Init(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_DeInit(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_MspInit(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_MspDeInit(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_Transmit(
        hspi: *mut SPI_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_Receive(
        hspi: *mut SPI_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_TransmitReceive(
        hspi: *mut SPI_HandleTypeDef,
        pTxData: *mut u8,
        pRxData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_Transmit_IT(
        hspi: *mut SPI_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_Receive_IT(
        hspi: *mut SPI_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_TransmitReceive_IT(
        hspi: *mut SPI_HandleTypeDef,
        pTxData: *mut u8,
        pRxData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_Transmit_DMA(
        hspi: *mut SPI_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_Receive_DMA(
        hspi: *mut SPI_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_TransmitReceive_DMA(
        hspi: *mut SPI_HandleTypeDef,
        pTxData: *mut u8,
        pRxData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_DMAPause(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_DMAResume(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_DMAStop(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_Abort(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_Abort_IT(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_IRQHandler(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_TxCpltCallback(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_RxCpltCallback(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_TxRxCpltCallback(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_TxHalfCpltCallback(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_RxHalfCpltCallback(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_TxRxHalfCpltCallback(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_ErrorCallback(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_AbortCpltCallback(hspi: *mut SPI_HandleTypeDef);
}
extern "C" {
    pub fn HAL_SPI_GetState(
        hspi: *mut SPI_HandleTypeDef,
    ) -> HAL_SPI_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_SPI_GetError(hspi: *mut SPI_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_Init(
        htim: *mut TIM_HandleTypeDef,
        sConfig: *mut TIM_HallSensor_InitTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_DeInit(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_MspInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_MspDeInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_Start(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_Stop(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_Start_IT(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_Start_DMA(
        htim: *mut TIM_HandleTypeDef,
        pData: *mut u32,
        Length: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_Stop_DMA(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OCN_Start(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OCN_Stop(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OCN_Start_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OCN_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OCN_Start_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
        pData: *mut u32,
        Length: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OCN_Stop_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_PWMN_Start(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_PWMN_Stop(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_PWMN_Start_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_PWMN_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_PWMN_Start_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
        pData: *mut u32,
        Length: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_PWMN_Stop_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OnePulseN_Start(
        htim: *mut TIM_HandleTypeDef,
        OutputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OnePulseN_Stop(
        htim: *mut TIM_HandleTypeDef,
        OutputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OnePulseN_Start_IT(
        htim: *mut TIM_HandleTypeDef,
        OutputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_OnePulseN_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
        OutputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_ConfigCommutEvent(
        htim: *mut TIM_HandleTypeDef,
        InputTrigger: u32,
        CommutationSource: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_ConfigCommutEvent_IT(
        htim: *mut TIM_HandleTypeDef,
        InputTrigger: u32,
        CommutationSource: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_ConfigCommutEvent_DMA(
        htim: *mut TIM_HandleTypeDef,
        InputTrigger: u32,
        CommutationSource: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_MasterConfigSynchronization(
        htim: *mut TIM_HandleTypeDef,
        sMasterConfig: *mut TIM_MasterConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_ConfigBreakDeadTime(
        htim: *mut TIM_HandleTypeDef,
        sBreakDeadTimeConfig: *mut TIM_BreakDeadTimeConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_ConfigBreakInput(
        htim: *mut TIM_HandleTypeDef,
        BreakInput: u32,
        sBreakInputConfig: *mut TIMEx_BreakInputConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_GroupChannel5(
        htim: *mut TIM_HandleTypeDef,
        Channels: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_RemapConfig(
        htim: *mut TIM_HandleTypeDef,
        Remap: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_TISelection(
        htim: *mut TIM_HandleTypeDef,
        TISelection: u32,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIMEx_CommutCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIMEx_CommutHalfCpltCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIMEx_BreakCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIMEx_Break2Callback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIMEx_HallSensor_GetState(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_TIM_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Base_Init(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Base_DeInit(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Base_MspInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_Base_MspDeInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_Base_Start(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Base_Stop(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Base_Start_IT(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Base_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Base_Start_DMA(
        htim: *mut TIM_HandleTypeDef,
        pData: *mut u32,
        Length: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Base_Stop_DMA(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_Init(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_DeInit(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_MspInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_OC_MspDeInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_OC_Start(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_Stop(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_Start_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_Start_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
        pData: *mut u32,
        Length: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_Stop_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_Init(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_DeInit(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_MspInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_PWM_MspDeInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_PWM_Start(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_Stop(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_Start_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_Start_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
        pData: *mut u32,
        Length: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_Stop_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_Init(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_DeInit(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_MspInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_IC_MspDeInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_IC_Start(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_Stop(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_Start_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_Start_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
        pData: *mut u32,
        Length: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_Stop_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OnePulse_Init(
        htim: *mut TIM_HandleTypeDef,
        OnePulseMode: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OnePulse_DeInit(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OnePulse_MspInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_OnePulse_MspDeInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_OnePulse_Start(
        htim: *mut TIM_HandleTypeDef,
        OutputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OnePulse_Stop(
        htim: *mut TIM_HandleTypeDef,
        OutputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OnePulse_Start_IT(
        htim: *mut TIM_HandleTypeDef,
        OutputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OnePulse_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
        OutputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_Init(
        htim: *mut TIM_HandleTypeDef,
        sConfig: *mut TIM_Encoder_InitTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_DeInit(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_MspInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_Encoder_MspDeInit(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_Encoder_Start(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_Stop(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_Start_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_Stop_IT(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_Start_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
        pData1: *mut u32,
        pData2: *mut u32,
        Length: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_Stop_DMA(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IRQHandler(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_OC_ConfigChannel(
        htim: *mut TIM_HandleTypeDef,
        sConfig: *mut TIM_OC_InitTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_ConfigChannel(
        htim: *mut TIM_HandleTypeDef,
        sConfig: *mut TIM_OC_InitTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_ConfigChannel(
        htim: *mut TIM_HandleTypeDef,
        sConfig: *mut TIM_IC_InitTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OnePulse_ConfigChannel(
        htim: *mut TIM_HandleTypeDef,
        sConfig: *mut TIM_OnePulse_InitTypeDef,
        OutputChannel: u32,
        InputChannel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_ConfigOCrefClear(
        htim: *mut TIM_HandleTypeDef,
        sClearInputConfig: *mut TIM_ClearInputConfigTypeDef,
        Channel: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_ConfigClockSource(
        htim: *mut TIM_HandleTypeDef,
        sClockSourceConfig: *mut TIM_ClockConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_ConfigTI1Input(
        htim: *mut TIM_HandleTypeDef,
        TI1_Selection: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_SlaveConfigSynchro(
        htim: *mut TIM_HandleTypeDef,
        sSlaveConfig: *mut TIM_SlaveConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_SlaveConfigSynchro_IT(
        htim: *mut TIM_HandleTypeDef,
        sSlaveConfig: *mut TIM_SlaveConfigTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_DMABurst_WriteStart(
        htim: *mut TIM_HandleTypeDef,
        BurstBaseAddress: u32,
        BurstRequestSrc: u32,
        BurstBuffer: *mut u32,
        BurstLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_DMABurst_MultiWriteStart(
        htim: *mut TIM_HandleTypeDef,
        BurstBaseAddress: u32,
        BurstRequestSrc: u32,
        BurstBuffer: *mut u32,
        BurstLength: u32,
        DataLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_DMABurst_WriteStop(
        htim: *mut TIM_HandleTypeDef,
        BurstRequestSrc: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_DMABurst_ReadStart(
        htim: *mut TIM_HandleTypeDef,
        BurstBaseAddress: u32,
        BurstRequestSrc: u32,
        BurstBuffer: *mut u32,
        BurstLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_DMABurst_MultiReadStart(
        htim: *mut TIM_HandleTypeDef,
        BurstBaseAddress: u32,
        BurstRequestSrc: u32,
        BurstBuffer: *mut u32,
        BurstLength: u32,
        DataLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_DMABurst_ReadStop(
        htim: *mut TIM_HandleTypeDef,
        BurstRequestSrc: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_GenerateEvent(
        htim: *mut TIM_HandleTypeDef,
        EventSource: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_ReadCapturedValue(
        htim: *mut TIM_HandleTypeDef,
        Channel: u32,
    ) -> u32;
}
extern "C" {
    pub fn HAL_TIM_PeriodElapsedCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_PeriodElapsedHalfCpltCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_OC_DelayElapsedCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_IC_CaptureCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_IC_CaptureHalfCpltCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_PWM_PulseFinishedCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_PWM_PulseFinishedHalfCpltCallback(
        htim: *mut TIM_HandleTypeDef,
    );
}
extern "C" {
    pub fn HAL_TIM_TriggerCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_TriggerHalfCpltCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_ErrorCallback(htim: *mut TIM_HandleTypeDef);
}
extern "C" {
    pub fn HAL_TIM_Base_GetState(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_TIM_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OC_GetState(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_TIM_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_PWM_GetState(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_TIM_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_IC_GetState(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_TIM_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_OnePulse_GetState(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_TIM_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_TIM_Encoder_GetState(
        htim: *mut TIM_HandleTypeDef,
    ) -> HAL_TIM_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_RS485Ex_Init(
        huart: *mut UART_HandleTypeDef,
        Polarity: u32,
        AssertionTime: u32,
        DeassertionTime: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UARTEx_WakeupCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UARTEx_RxFifoFullCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UARTEx_TxFifoEmptyCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UARTEx_StopModeWakeUpSourceConfig(
        huart: *mut UART_HandleTypeDef,
        WakeUpSelection: UART_WakeUpTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UARTEx_EnableStopMode(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UARTEx_DisableStopMode(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MultiProcessorEx_AddressLength_Set(
        huart: *mut UART_HandleTypeDef,
        AddressLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UARTEx_EnableFifoMode(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UARTEx_DisableFifoMode(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UARTEx_SetTxFifoThreshold(
        huart: *mut UART_HandleTypeDef,
        Threshold: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UARTEx_SetRxFifoThreshold(
        huart: *mut UART_HandleTypeDef,
        Threshold: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_Init(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HalfDuplex_Init(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_LIN_Init(
        huart: *mut UART_HandleTypeDef,
        BreakDetectLength: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MultiProcessor_Init(
        huart: *mut UART_HandleTypeDef,
        Address: u8,
        WakeUpMethod: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_DeInit(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_MspInit(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_MspDeInit(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_Transmit(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_Receive(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_Transmit_IT(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_Receive_IT(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_Transmit_DMA(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_Receive_DMA(
        huart: *mut UART_HandleTypeDef,
        pData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_DMAPause(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_DMAResume(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_DMAStop(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_Abort(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_AbortTransmit(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_AbortReceive(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_Abort_IT(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_AbortTransmit_IT(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_AbortReceive_IT(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_IRQHandler(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_TxHalfCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_TxCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_RxHalfCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_RxCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_ErrorCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_AbortCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_AbortTransmitCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_AbortReceiveCpltCallback(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_UART_ReceiverTimeout_Config(
        huart: *mut UART_HandleTypeDef,
        TimeoutValue: u32,
    );
}
extern "C" {
    pub fn HAL_UART_EnableReceiverTimeout(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_DisableReceiverTimeout(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_LIN_SendBreak(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MultiProcessor_EnableMuteMode(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MultiProcessor_DisableMuteMode(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MultiProcessor_EnterMuteMode(huart: *mut UART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_HalfDuplex_EnableTransmitter(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_HalfDuplex_EnableReceiver(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_UART_GetState(
        huart: *mut UART_HandleTypeDef,
    ) -> HAL_UART_StateTypeDef;
}
extern "C" {
    pub fn HAL_UART_GetError(huart: *mut UART_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_USARTEx_RxFifoFullCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USARTEx_TxFifoEmptyCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USARTEx_EnableSlaveMode(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USARTEx_DisableSlaveMode(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USARTEx_ConfigNSS(
        husart: *mut USART_HandleTypeDef,
        NSSConfig: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USARTEx_EnableFifoMode(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USARTEx_DisableFifoMode(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USARTEx_SetTxFifoThreshold(
        husart: *mut USART_HandleTypeDef,
        Threshold: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USARTEx_SetRxFifoThreshold(
        husart: *mut USART_HandleTypeDef,
        Threshold: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_Init(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_DeInit(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_MspInit(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_MspDeInit(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_Transmit(
        husart: *mut USART_HandleTypeDef,
        pTxData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_Receive(
        husart: *mut USART_HandleTypeDef,
        pRxData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_TransmitReceive(
        husart: *mut USART_HandleTypeDef,
        pTxData: *mut u8,
        pRxData: *mut u8,
        Size: u16,
        Timeout: u32,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_Transmit_IT(
        husart: *mut USART_HandleTypeDef,
        pTxData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_Receive_IT(
        husart: *mut USART_HandleTypeDef,
        pRxData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_TransmitReceive_IT(
        husart: *mut USART_HandleTypeDef,
        pTxData: *mut u8,
        pRxData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_Transmit_DMA(
        husart: *mut USART_HandleTypeDef,
        pTxData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_Receive_DMA(
        husart: *mut USART_HandleTypeDef,
        pRxData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_TransmitReceive_DMA(
        husart: *mut USART_HandleTypeDef,
        pTxData: *mut u8,
        pRxData: *mut u8,
        Size: u16,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_DMAPause(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_DMAResume(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_DMAStop(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_Abort(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_Abort_IT(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_IRQHandler(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_TxHalfCpltCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_TxCpltCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_RxCpltCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_RxHalfCpltCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_TxRxCpltCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_ErrorCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_AbortCpltCallback(husart: *mut USART_HandleTypeDef);
}
extern "C" {
    pub fn HAL_USART_GetState(
        husart: *mut USART_HandleTypeDef,
    ) -> HAL_USART_StateTypeDef::Type;
}
extern "C" {
    pub fn HAL_USART_GetError(husart: *mut USART_HandleTypeDef) -> u32;
}
extern "C" {
    pub fn HAL_WWDG_Init(
        hwwdg: *mut WWDG_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_WWDG_MspInit(hwwdg: *mut WWDG_HandleTypeDef);
}
extern "C" {
    pub fn HAL_WWDG_Refresh(
        hwwdg: *mut WWDG_HandleTypeDef,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_WWDG_IRQHandler(hwwdg: *mut WWDG_HandleTypeDef);
}
extern "C" {
    pub fn HAL_WWDG_EarlyWakeupCallback(hwwdg: *mut WWDG_HandleTypeDef);
}
extern "C" {
    pub fn HAL_Init() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_DeInit() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_MspInit();
}
extern "C" {
    pub fn HAL_MspDeInit();
}
extern "C" {
    pub fn HAL_InitTick(TickPriority: u32) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_IncTick();
}
extern "C" {
    pub fn HAL_Delay(Delay: u32);
}
extern "C" {
    pub fn HAL_GetTick() -> u32;
}
extern "C" {
    pub fn HAL_GetTickPrio() -> u32;
}
extern "C" {
    pub fn HAL_SetTickFreq(
        Freq: HAL_TickFreqTypeDef::Type,
    ) -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_GetTickFreq() -> HAL_TickFreqTypeDef::Type;
}
extern "C" {
    pub fn HAL_SuspendTick();
}
extern "C" {
    pub fn HAL_ResumeTick();
}
extern "C" {
    pub fn HAL_GetHalVersion() -> u32;
}
extern "C" {
    pub fn HAL_GetREVID() -> u32;
}
extern "C" {
    pub fn HAL_GetDEVID() -> u32;
}
extern "C" {
    pub fn HAL_GetUIDw0() -> u32;
}
extern "C" {
    pub fn HAL_GetUIDw1() -> u32;
}
extern "C" {
    pub fn HAL_GetUIDw2() -> u32;
}
extern "C" {
    pub fn HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETHInterface: u32);
}
extern "C" {
    pub fn HAL_SYSCFG_AnalogSwitchConfig(
        SYSCFG_AnalogSwitch: u32,
        SYSCFG_SwitchState: u32,
    );
}
extern "C" {
    pub fn HAL_SYSCFG_EnableBOOST();
}
extern "C" {
    pub fn HAL_SYSCFG_DisableBOOST();
}
extern "C" {
    pub fn HAL_SYSCFG_CM7BootAddConfig(BootRegister: u32, BootAddress: u32);
}
extern "C" {
    pub fn HAL_EnableCompensationCell();
}
extern "C" {
    pub fn HAL_DisableCompensationCell();
}
extern "C" {
    pub fn HAL_SYSCFG_EnableIOSpeedOptimize();
}
extern "C" {
    pub fn HAL_SYSCFG_DisableIOSpeedOptimize();
}
extern "C" {
    pub fn HAL_SYSCFG_CompensationCodeSelect(SYSCFG_CompCode: u32);
}
extern "C" {
    pub fn HAL_SYSCFG_CompensationCodeConfig(
        SYSCFG_PMOSCode: u32,
        SYSCFG_NMOSCode: u32,
    );
}
extern "C" {
    pub fn HAL_DBGMCU_EnableDBGSleepMode();
}
extern "C" {
    pub fn HAL_DBGMCU_DisableDBGSleepMode();
}
extern "C" {
    pub fn HAL_DBGMCU_EnableDBGStopMode();
}
extern "C" {
    pub fn HAL_DBGMCU_DisableDBGStopMode();
}
extern "C" {
    pub fn HAL_DBGMCU_EnableDBGStandbyMode();
}
extern "C" {
    pub fn HAL_DBGMCU_DisableDBGStandbyMode();
}
extern "C" {
    pub fn HAL_EnableDomain3DBGStopMode();
}
extern "C" {
    pub fn HAL_DisableDomain3DBGStopMode();
}
extern "C" {
    pub fn HAL_EnableDomain3DBGStandbyMode();
}
extern "C" {
    pub fn HAL_DisableDomain3DBGStandbyMode();
}
extern "C" {
    pub fn HAL_EXTI_EdgeConfig(EXTI_Line: u32, EXTI_Edge: u32);
}
extern "C" {
    pub fn HAL_EXTI_GenerateSWInterrupt(EXTI_Line: u32);
}
extern "C" {
    pub fn HAL_EXTI_D1_ClearFlag(EXTI_Line: u32);
}
extern "C" {
    pub fn HAL_EXTI_D1_EventInputConfig(
        EXTI_Line: u32,
        EXTI_Mode: u32,
        EXTI_LineCmd: u32,
    );
}
extern "C" {
    pub fn HAL_EXTI_D3_EventInputConfig(
        EXTI_Line: u32,
        EXTI_LineCmd: u32,
        EXTI_ClearSrc: u32,
    );
}
extern "C" {
    pub fn HAL_SetFMCMemorySwappingConfig(BankMapConfig: u32);
}
extern "C" {
    pub fn HAL_GetFMCMemorySwappingConfig() -> u32;
}
extern "C" {
    pub fn HAL_SYSCFG_VREFBUF_VoltageScalingConfig(VoltageScaling: u32);
}
extern "C" {
    pub fn HAL_SYSCFG_VREFBUF_HighImpedanceConfig(Mode: u32);
}
extern "C" {
    pub fn HAL_SYSCFG_VREFBUF_TrimmingConfig(TrimmingValue: u32);
}
extern "C" {
    pub fn HAL_SYSCFG_EnableVREFBUF() -> HAL_StatusTypeDef::Type;
}
extern "C" {
    pub fn HAL_SYSCFG_DisableVREFBUF();
}
