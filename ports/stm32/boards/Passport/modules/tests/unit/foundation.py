# SPDX-FileCopyrightText: Â© 2021 Foundation Devices, Inc. <hello@foundationdevices.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Test the foundation module.

import foundation

HOR_RES = 100
VER_RES = 100


def should_fail(f):
    '''Run a function that should fail (throw an exception)'''

    try:
        f()
    except BaseException:
        return

    raise RuntimeError('The test was supposed to fail')


should_fail(lambda: foundation.qr.init())
should_fail(lambda: foundation.qr.init(None, None, None))
foundation.qr.init(HOR_RES, VER_RES, bytearray(HOR_RES * VER_RES))

should_fail(lambda: foundation.convert_rgb565_to_grayscale())
should_fail(lambda: foundation.convert_rgb565_to_grayscale(None, None, None, None))
foundation.convert_rgb565_to_grayscale(bytearray(HOR_RES * VER_RES * 2),
                                       bytearray(HOR_RES * VER_RES),
                                       HOR_RES,
                                       VER_RES)

should_fail(lambda: foundation.sha256())
should_fail(lambda: foundation.sha256(None, None))
# TODO: bytearray.fromhex('1331715A1FFD04E66004931A8DBC3655EB4A523ED5EC65EC6D1CED93782BD3BD')
digest = bytearray(32)
foundation.sha256('this is the message', digest)
assert digest == bytearray(b'\x131qZ\x1f\xfd\x04\xe6`\x04\x93\x1a\x8d\xbc6U\xebJR>\xd5\xece\xecm\x1c\xed\x93x+\xd3\xbd')  # nopep8

SAMPLE_HOR_RES = 10
SAMPLE_VER_RES = 10
SAMPLE_IMG = [0x04, 0x28, 0x40, 0x01, 0xfb, 0x05, 0xfa, 0x05, 0xfb, 0x05, 0xfa, 0x05,
              0x5e, 0x05, 0x5e, 0x05, 0x5e, 0x05, 0x5e, 0x05, 0xff, 0xff, 0x67, 0xff,
              0xfb, 0x05, 0xfa, 0x05, 0x5f, 0x05, 0x8a, 0x4d, 0x8a, 0x4d, 0x8a, 0x4d,
              0x09, 0x8e, 0x5e, 0x05, 0x67, 0xff, 0x47, 0xff, 0x5e, 0x05, 0x5f, 0x05,
              0x8a, 0x55, 0x6a, 0x4d, 0x29, 0x8e, 0x8a, 0x55, 0xc7, 0xe9, 0x5e, 0x05,
              0x5f, 0x05, 0xbe, 0x24, 0x5e, 0x05, 0x5f, 0x05, 0x29, 0x8e, 0xc7, 0xe1,
              0x8a, 0x55, 0x6a, 0x4d, 0x09, 0x8e, 0xde, 0x24, 0xde, 0x24, 0xbe, 0x24,
              0x5e, 0x05, 0xbe, 0x24, 0xbe, 0x24, 0x09, 0x8e, 0x07, 0x5a, 0xa9, 0x7a,
              0xde, 0x24, 0xbe, 0x24, 0xde, 0x24, 0xbe, 0x24, 0xde, 0x24, 0xde, 0x24,
              0xbe, 0x24, 0xbe, 0x24, 0xa9, 0x7a, 0xa6, 0x51, 0x5c, 0x24, 0x5c, 0x24,
              0xda, 0x1b, 0xba, 0x1b, 0xbe, 0x24, 0xbe, 0x24, 0x5d, 0x24, 0xda, 0x1b,
              0x07, 0x5a, 0xa6, 0x51, 0xba, 0x1b, 0xba, 0x1b, 0xba, 0x1b, 0xba, 0x1b,
              0xe6, 0x33, 0x6a, 0x55, 0x8a, 0x55, 0xda, 0x1b, 0xa9, 0x7a, 0xa9, 0x7a,
              0xba, 0x1b, 0xba, 0x1b, 0xba, 0x1b, 0xda, 0x1b, 0xe6, 0x33, 0xe6, 0x33,
              0x8a, 0x55, 0xa6, 0x51, 0xa6, 0x51, 0xa9, 0x7a, 0x07, 0x5a, 0x8a, 0x4d,
              0xda, 0x1b, 0xba, 0x1b, 0x8a, 0x4d, 0x8a, 0x55, 0x6a, 0x55, 0x6a, 0x4d,
              0x8a, 0x55, 0x8a, 0x4d, 0x8a, 0x4d, 0x6a, 0x55]


sample_grayscale = bytearray(SAMPLE_HOR_RES * SAMPLE_VER_RES)
foundation.convert_rgb565_to_grayscale(bytearray(SAMPLE_IMG), sample_grayscale, SAMPLE_HOR_RES, SAMPLE_VER_RES)

return_value.write(b'OK')
