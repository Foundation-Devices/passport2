# SPDX-FileCopyrightText: Â© 2021 Foundation Devices, Inc. <hello@foundationdevices.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later

contribdir := join(justfile_directory(), "../contrib")
openocd_cfg := join(contribdir, "openocd.cfg")

# Launch OCD, run a command and then exit
@run-ocd-command command:
    openocd -f {{openocd_cfg}} -c "init; reset halt; {{command}}" -c "exit"

# Build the bootloader (debug, release, locked or production)
# NOTE: Pass "factory_test" for factory_test to enable it.
build screen="mono" colorway="light" rel="release" factory_test="": clean
    #!/usr/bin/env bash
    set -e
    echo -e "\nBuilding Bootloader..."

    echo {{ if screen == "mono" { "Building for MONO screen" } else if screen == "color" { "Building for COLOR screen" } else { error("Invalid screen type '" + screen + "'. Must be 'mono' or 'color'") } }}
    if [[ "{{screen}}" == "color" ]]; then
        echo {{ if colorway == "light" { "Building LIGHT colorway" } else if colorway == "dark" { "Building DARK colorway" } else { error("Invalid colorway type '" + colorway + "'. Must be 'light' or 'dark'") } }}
    fi
    make {{rel}} SCREEN_MODE={{uppercase(screen)}} COLORWAY={{uppercase(colorway)}} FACTORY_TEST={{factory_test}}

    if [[ "{{rel}}" == "debug" ]]; then
        FOLDER=debug
    else
        FOLDER=release
    fi

    echo -e "\nBootloader Build Complete"

# Clean the bootloader build
clean:
    @echo "Cleaning Bootloader..."
    make clean
    @echo "Bootloader Clean Complete"

# Build and flash the bootloader, appending the existing secrets, if any.
# If no secrets are present in the device, then just flash the raw bootloader.
flash screen="mono" colorway="light" rel="release" factory_test="": (build screen colorway rel factory_test) && (reset)
    #!/usr/bin/env bash
    set -euo pipefail

    EMPTY_SECRETS_BIN=$(mktemp /tmp/foundatiob-bl-flash.XXXXXX)
    DEVICE_SECRETS_BIN=$(mktemp /tmp/foundation-bl-flash.XXXXXX)

    printf -- 'FF %.0s' {1..256} | xxd -r -p - ${EMPTY_SECRETS_BIN}
    just save-secrets {{screen}} ${DEVICE_SECRETS_BIN}

    if cmp -s ${DEVICE_SECRETS_BIN} ${EMPTY_SECRETS_BIN};
    then
        echo "Board doesn't have secrets, flashing raw firmware"
        just run-ocd-command "flash write_image erase arm/{{rel}}/bootloader-{{uppercase(screen)}}-{{uppercase(colorway)}}.bin 0x8000000"
    else
        echo "Appending existing secrets to the bootloader"
        add-secrets -b "arm/{{rel}}/bootloader-{{uppercase(screen)}}-{{uppercase(colorway)}}.bin" -s ${DEVICE_SECRETS_BIN}

        echo "Flashing bootloader with secrets"
        just run-ocd-command "flash write_image erase arm/{{rel}}/bootloader-{{uppercase(screen)}}-{{uppercase(colorway)}}-secrets.bin 0x8000000"
    fi

    # Remove the tmp files
    rm -f ${EMPTY_SECRETS_BIN}
    rm -f ${DEVICE_SECRETS_BIN}


# Build and flash the bootloader with no secrets (use to setup a new Secure Element)
flash-only screen="mono" colorway="light" rel="release": && (reset)
    just run-ocd-command "flash write_image erase arm/{{rel}}/bootloader-{{uppercase(screen)}}-{{uppercase(colorway)}}.bin 0x8000000"

# Build and flash the bootloader with saved secrets (use to restore the bootloader of a bricked device)
flash-with-secrets screen="mono" colorway="light" rel="release": && (reset)
    add-secrets -b "arm/{{rel}}/bootloader-{{uppercase(screen)}}-{{uppercase(colorway)}}.bin" -s secrets
    just run-ocd-command "flash write_image erase arm/{{rel}}/bootloader-{{uppercase(screen)}}-{{uppercase(colorway)}}-secrets.bin 0x8000000"

# Reset the Passport
reset: (run-ocd-command "reset")

# Read the "ROM Secrets" from Passport and save them to a file
save-secrets screen="mono" filename="secrets":
    #!/usr/bin/env bash
    set -euo pipefail

    # Get the secrets address depending on the selected screen mode.
    BL_NVROM_BASE=$(make bl_nvrom_base SCREEN_MODE={{uppercase(screen)}})
    echo "Bootloader secrets address for '{{screen}}': $BL_NVROM_BASE"

    just run-ocd-command "dump_image {{filename}} $BL_NVROM_BASE 256"

images:
    just ../../../images
